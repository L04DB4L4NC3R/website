[
	{
		"created_at": "2019-08-18T01:32:40.812Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2019-05-03T05:59:04.681Z",
		"published_at": "2019-05-03T05:59:04.681Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: Process synchronization monitors in go\ndescription: Introduction\ndate: '2019-05-03T05:59:04.681Z'\ncategories: []\nkeywords: []\nslug: /@angadsharma1016/process-synchronization-monitors-in-go-d31f4c42fce7\n---\n\n**Introduction**\n\nIn the most recent times, programming has taken its fifth gear by leveraging process synchronization constructs to achieve thread level optimization. Popular languages like Java, python, support multi-threading. But control flow is often blurred in the process of achieving maximum concurrent throughput.\n\n![single threaded v/s multi-threaded processes](https://thepracticaldev.s3.amazonaws.com/i/yqpxzuclxgrk59jnehzn.png)\nsingle threaded v/s multi-threaded processes\n\n**Semaphores**\n\nSemaphores are low level constructs which mainly have two methods defined on them. `Wait()` and `Signal()` . Semaphores make sure that the critical section of your code is atomic. Which means that in essence, shared memory cohesiveness should be sequential when two threads are trying to access it at the same time.\n\nOne thread acquires the lock, performs its critical section and then releases the lock for the other threads. In the meantime, all of the other threads are waiting in queue.\n\n![semaphores in action](https://thepracticaldev.s3.amazonaws.com/i/5wgksg7hn1rumv5o77lb.png)\n\n**Monitors**\n\nA Monitor is a high level process synchronization construct which abstracts away all of the timing information. It holds conditionals, shared memory, and timing information all under the same hood.\n\nA Monitor class is an abstract data type which contains shared data variables and procedures. The variables are private and cannot be accessed from outside of the construct, only its procedures can access the variables. Only one thread can access a monitor class object at one time.\n\n![_Monitor class_](https://thepracticaldev.s3.amazonaws.com/i/7ar0fcaqxmxkcun3blch.png)\n\n**Monitors in go**\n\nWe are going to construct a monitor interface which has all of the necessary functions required. Subsequently we are going to be creating a construct that satisfies the monitor interface and define the methods on it.\n\nCreate a file `main.go`\n\n```go\npackage main\n\nimport (  \n \"fmt\"  \n \"sync\"  \n)\n\ntype Monitor interface {  \n Wait()  \n Signal()  \n GetData() \\[\\]string  \n PutData(string)  \n}\n\ntype Words struct {  \n mutex         \\*sync.Mutex  \n wordsArray    \\[\\]string  \n isInitialized bool  \n}\n\nfunc (m \\*Words) Init() {  \n m.mutex = \u0026sync.Mutex{}  \n m.wordsArray = \\[\\]string{}  \n m.isInitialized = true  \n}\n```\n\nHere our Words struct satisfies the monitor interface. All of the member variables are private. Our task is to append words in an array atomically. Note that this is not an ideal use case for monitors but serves as a good example of the same.\n\nSince we cannot access the member variables of the Words class we will be defining fetchers and getters on it.\n\n*   **GetData() \\[\\]string :** GetData function simple returns the whole array of words\n*   **PutData(string) :** PutData function takes in a word as an argument and then atomically appends it to the array.\n\nNow we are going to be defining the remaining functions\n\n```go\nfunc (m \\*Words) Wait() {  \n if m.isInitialized {  \n  m.mutex.Lock()  \n }  \n}\n\nfunc (m \\*Words) Signal() {  \n if m.isInitialized {  \n  m.mutex.Unlock()  \n }  \n}\n\nfunc (m \\*Words) GetData() \\[\\]string { return m.wordsArray }\n\nfunc (m \\*Words) PutData(word string) {  \n m.Wait()\n\n// critical section  \n m.wordsArray = append(m.wordsArray, word)  \n // critical section done\n\nm.Signal()  \n}\n```\n\nA monitor clubs together timing and control information. Here only initialized structs will be able to acquire the lock.\n\n*   **Wait() :** The wait function acquires the mutex (mutual exclusion) lock if the member variables are defined\n*   **Signal() :** The signal function releases the acquired lock so that the other threads can acquire it.\n\nOur main function looks like this\n\n```go\nfunc main() {  \n m := \u0026Words{}  \n m.Init()\n\nwg := \u0026sync.WaitGroup{}  \n wg.Add(2)  \n go func() {  \n  defer wg.Done()  \n  m.PutData(\"Angad\")  \n }()  \n go func() {  \n  defer wg.Done()  \n  m.PutData(\"Sharma\")  \n }()  \n wg.Wait()  \n fmt.Println(m.GetData())  \n}\n```\n\nHere we have initialized our Words struct and all of the member variables in it. Then we have started two goroutines to append words into the array. After the operation is done, we simply print out the whole array.\n\nOutput:\n```\n[Sharma Angad]\n```\n\n**Application of monitors**\n\n*   Producer-consumer problem: One process produces data and the other process utilizes that data. Synchronization is required between the processes.\n*   Dining-philosopher problem: K number of philosophers have chopsticks in front of them. They require 2 chopsticks to eat. They need to choose between thinking and eating according to their peers.\n*   File read-write problem: Monitors can be used to prevent `read-after-write`, `write-after-read`, and `write-after-write` problems.\n\n**Conclusion**\n\n\u003e Monitors are useful data structures used to encapsulate all of the control information, timing information, and shared data under one roof. They are an abstraction over semaphores where we can define control statements over mutual exclusion.\n\n![Monitors](https://thepracticaldev.s3.amazonaws.com/i/o0ez6rin7gdct4n1uaxb.jpeg)\n\n**Further reading**\n\n[**Dining Philosopher Problem Using Semaphores**](https://www.geeksforgeeks.org/operating-system-dining-philosopher-problem-using-semaphores/)\n\n[**L04DB4L4NC3R/go-monitors**](https://github.com/L04DB4L4NC3R/go-monitors.git)\n\n[**Difference Between Semaphore and Monitor in OS**](https://techdifferences.com/difference-between-semaphore-and-monitor-in-os.html)",
		"cached_tag_list": "go, os, computerscience",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tOXWpz4j--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/s7x5jswmrdfkx247686o.jpeg",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/process-synchronization-monitors-in-go-4g4k",
		"public_reactions_count": 8,
		"processed_html": "\u003cp\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the most recent times, programming has taken its fifth gear by leveraging process synchronization constructs to achieve thread level optimization. Popular languages like Java, python, support multi-threading. But control flow is often blurred in the process of achieving maximum concurrent throughput.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jok4RY3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/yqpxzuclxgrk59jnehzn.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jok4RY3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/yqpxzuclxgrk59jnehzn.png\" alt=\"single threaded v/s multi-threaded processes\" loading=\"lazy\" width=\"712\" height=\"391\"\u003e\u003c/a\u003e\u003cbr\u003e\nsingle threaded v/s multi-threaded processes\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSemaphores\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSemaphores are low level constructs which mainly have two methods defined on them. \u003ccode\u003eWait()\u003c/code\u003e and \u003ccode\u003eSignal()\u003c/code\u003e . Semaphores make sure that the critical section of your code is atomic. Which means that in essence, shared memory cohesiveness should be sequential when two threads are trying to access it at the same time.\u003c/p\u003e\n\n\u003cp\u003eOne thread acquires the lock, performs its critical section and then releases the lock for the other threads. In the meantime, all of the other threads are waiting in queue.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_cES9gK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/5wgksg7hn1rumv5o77lb.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_cES9gK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/5wgksg7hn1rumv5o77lb.png\" alt=\"semaphores in action\" loading=\"lazy\" width=\"636\" height=\"273\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eMonitors\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eA Monitor is a high level process synchronization construct which abstracts away all of the timing information. It holds conditionals, shared memory, and timing information all under the same hood.\u003c/p\u003e\n\n\u003cp\u003eA Monitor class is an abstract data type which contains shared data variables and procedures. The variables are private and cannot be accessed from outside of the construct, only its procedures can access the variables. Only one thread can access a monitor class object at one time.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Wa8SHsOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/7ar0fcaqxmxkcun3blch.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Wa8SHsOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/7ar0fcaqxmxkcun3blch.png\" alt=\"_Monitor class_\" loading=\"lazy\" width=\"607\" height=\"515\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eMonitors in go\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe are going to construct a monitor interface which has all of the necessary functions required. Subsequently we are going to be creating a construct that satisfies the monitor interface and define the methods on it.\u003c/p\u003e\n\n\u003cp\u003eCreate a file \u003ccode\u003emain.go\u003c/code\u003e\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight go\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e  \n \u003cspan class=\"s\"\u003e\"fmt\"\u003c/span\u003e  \n \u003cspan class=\"s\"\u003e\"sync\"\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eMonitor\u003c/span\u003e \u003cspan class=\"k\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n \u003cspan class=\"n\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n \u003cspan class=\"n\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n \u003cspan class=\"n\"\u003eGetData\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e  \n \u003cspan class=\"n\"\u003ePutData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etype\u003c/span\u003e \u003cspan class=\"n\"\u003eWords\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n \u003cspan class=\"n\"\u003emutex\u003c/span\u003e         \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esync\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMutex\u003c/span\u003e  \n \u003cspan class=\"n\"\u003ewordsArray\u003c/span\u003e    \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e  \n \u003cspan class=\"n\"\u003eisInitialized\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eWords\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esync\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMutex\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e  \n \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewordsArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e  \n \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisInitialized\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003etrue\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eHere our Words struct satisfies the monitor interface. All of the member variables are private. Our task is to append words in an array atomically. Note that this is not an ideal use case for monitors but serves as a good example of the same.\u003c/p\u003e\n\n\u003cp\u003eSince we cannot access the member variables of the Words class we will be defining fetchers and getters on it.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  \u003cstrong\u003eGetData() []string :\u003c/strong\u003e GetData function simple returns the whole array of words\u003c/li\u003e\n\u003cli\u003e  \u003cstrong\u003ePutData(string) :\u003c/strong\u003e PutData function takes in a word as an argument and then atomically appends it to the array.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow we are going to be defining the remaining functions\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight go\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eWords\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisInitialized\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n  \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eWords\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisInitialized\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n  \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eWords\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eGetData\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewordsArray\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eWords\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ePutData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eword\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e// critical section  \u003c/span\u003e\n \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewordsArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewordsArray\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n \u003cspan class=\"c\"\u003e// critical section done\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSignal\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eA monitor clubs together timing and control information. Here only initialized structs will be able to acquire the lock.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  \u003cstrong\u003eWait() :\u003c/strong\u003e The wait function acquires the mutex (mutual exclusion) lock if the member variables are defined\u003c/li\u003e\n\u003cli\u003e  \u003cstrong\u003eSignal() :\u003c/strong\u003e The signal function releases the acquired lock so that the other threads can acquire it.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOur main function looks like this\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight go\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n \u003cspan class=\"n\"\u003em\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eWords\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e  \n \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ewg\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003esync\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWaitGroup\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e  \n \u003cspan class=\"n\"\u003ewg\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n  \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"n\"\u003ewg\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n  \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePutData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Angad\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n \u003cspan class=\"p\"\u003e}()\u003c/span\u003e  \n \u003cspan class=\"k\"\u003ego\u003c/span\u003e \u003cspan class=\"k\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n  \u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"n\"\u003ewg\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n  \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePutData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Sharma\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n \u003cspan class=\"p\"\u003e}()\u003c/span\u003e  \n \u003cspan class=\"n\"\u003ewg\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWait\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \n \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetData\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e  \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eHere we have initialized our Words struct and all of the member variables in it. Then we have started two goroutines to append words into the array. After the operation is done, we simply print out the whole array.\u003c/p\u003e\n\n\u003cp\u003eOutput:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[Sharma Angad]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eApplication of monitors\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Producer-consumer problem: One process produces data and the other process utilizes that data. Synchronization is required between the processes.\u003c/li\u003e\n\u003cli\u003e  Dining-philosopher problem: K number of philosophers have chopsticks in front of them. They require 2 chopsticks to eat. They need to choose between thinking and eating according to their peers.\u003c/li\u003e\n\u003cli\u003e  File read-write problem: Monitors can be used to prevent \u003ccode\u003eread-after-write\u003c/code\u003e, \u003ccode\u003ewrite-after-read\u003c/code\u003e, and \u003ccode\u003ewrite-after-write\u003c/code\u003e problems.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eMonitors are useful data structures used to encapsulate all of the control information, timing information, and shared data under one roof. They are an abstraction over semaphores where we can define control statements over mutual exclusion.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vrYFDTux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/o0ez6rin7gdct4n1uaxb.jpeg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vrYFDTux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/o0ez6rin7gdct4n1uaxb.jpeg\" alt=\"Monitors\" loading=\"lazy\" width=\"517\" height=\"491\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eFurther reading\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.geeksforgeeks.org/operating-system-dining-philosopher-problem-using-semaphores/\"\u003e\u003cstrong\u003eDining Philosopher Problem Using Semaphores\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/go-monitors.git\"\u003e\u003cstrong\u003eL04DB4L4NC3R/go-monitors\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://techdifferences.com/difference-between-semaphore-and-monitor-in-os.html\"\u003e\u003cstrong\u003eDifference Between Semaphore and Monitor in OS\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "process-synchronization-monitors-in-go-4g4k",
		"social_image": null,
		"title": "Process synchronization monitors in go",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2019-08-18T01:55:10.457Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2019-07-26T16:25:51.363Z",
		"published_at": "2019-07-26T16:25:51.363Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: Building a personal portfolio website with Hugo\ndescription: Introduction\ndate: '2019-07-26T16:25:51.363Z'\ncategories: []\nkeywords: []\nslug: /@angadsharma1016/building-a-personal-portfolio-website-with-hugo-7e8604d5e877\n---\n\n\n**Introduction**\n\nA personal portfolio is always fun. Whether it be flaunting it amongst your peers or standing out from the crowd in hiring. Everyone wants to have one but no one wants to write boring HTML for it. Well guess what, now you can make your own portfolio the way you write your `README`s on GitHub, in [markdown](https://www.markdownguide.org/).\n\n[Hugo](https://github.com/gohugoio/hugo.git), the world’s fastest framework for building websites, offers the following features for building your own website with both blazing fast speed and smooth ease. Hugo provides the following features:\n\n*   Fast reloading with real time changes on the web\n*   Loads of themes and templates\n*   Multi-language support\n*   Static site generator\n*   Millisecond build time\n\n**Installation**\n\nTo get started, make sure you have the [Go](https://golang.org/dl/) installed. To install Hugo refer [this](https://gohugo.io/getting-started/installing).. Hugo offers a very easy-to-use multi Operating System command line interface to interact with its underlying features.\n\n**Getting started**\n\nTo create a new website using Hugo, simply run the following commands on the command line.\n\n```bash\n\n$ hugo new site mysite  \n$ cd mysite  \n$ git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c\n\n# Directory structure of the project\n$ tree mysite\n\nmysite  \n├── archetypes  \n│   └── default.md  \n├── config.toml  \n├── content  \n├── data  \n├── layouts  \n├── static  \n└── themes  \n    └── m10c\n\n7 directories, 2 files\n```\n\nYou can look at some great themes for Hugo over [here](https://themes.gohugo.io/). In this tutorial we are going to use the [m10c](https://github.com/vaga/hugo-theme-m10c) theme.\n\nAdd `theme = \"m10c\"`, at the end of **config.toml**. You can start the hugo server by typing:\n\n```bash\n\n$ hugo server -D\n```\n\nGo to `localhost:1313` and you will be able to see the following:\n\n![_Empty m10c theme_](https://thepracticaldev.s3.amazonaws.com/i/naoqabqt0aio91acx9v8.png)\n\nNow to add social links to your portfolio you can take a look at **mysite/themes/m10c/exampleSite/config.toml.** This serves as an example of adding different components to your own _config.toml._ You can add the social login links to your own config. Copying the params to our own _config.toml_, it now looks like this:\n\n{% gist https://gist.github.com/L04DB4L4NC3R/660bfffc555f4b44e16d8bd6a65f026d.js %}\n\nTo add an avatar, simple add an image of yourself, name it `avatar.jpg` and place it in **static/** folder. Our website now looks like this:\n\n![_The website, with social links and avatar_](https://thepracticaldev.s3.amazonaws.com/i/wykfnsyoes62kmgs77jx.png)\n\nNow that we have our image and social links on the website, it is time to add some more of our information.\n\nIn Hugo, we can create different web pages. Each webpage goes into the **content/posts/** directory as a markdown file. It is there that we can write markdown and define how we want it all to lay out.\n\nWebpages are created in the form of posts in Hugo. Lets get started with creating a new post.\n\n```bash\n$ hugo new posts/Blogs.md\n```\n\nThis creates a new file called `Blogs.md` in the **content/posts/** folder. Open _Blogs.md_ and you can start writing markdown.\n\n{% gist https://gist.github.com/L04DB4L4NC3R/a9b36fd871631a654cd473caf676b23c.js %}\n\nAnd it will automatically be reloaded on your website in the form of a hyperlink. You can paginate over these hyperlinks and also set which hyperlinks to show first in the order of the time they were created. On clicking the hyperlink, you will be able to see contents of the markdown file that we defined above.\n\nWith the right number of posts and enough content, you can make your own portfolio. Take a look at one of my post pages.\n\n![](https://thepracticaldev.s3.amazonaws.com/i/154ctx742mfhln7t3upj.png)\n\nAn industry with an increasing number of competition is the best motivation for someone to start designing their portfolio in a way that it stands out from the rest of the competition. But who says it has to be hard?\n\nWith a handful of simple steps, and some markdown magic, anyone can make their own beautiful website without coding one bit. Hugo is indeed a very fast tool, with advanced features like instant reloading and real time refresh, loads of templates, easy configuration, multi-language support and of course, markdown!\n\n**References**\n\n[**L04DB4L4NC3R/hugo-demo**](https://github.com/L04DB4L4NC3R/hugo-demo)\n\n[**Hosting \u0026 Deployment**](https://gohugo.io/hosting-and-deployment/)\n\n[**gohugoio/hugo**](https://github.com/gohugoio/hugo)",
		"cached_tag_list": "go, hugo, webdev",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--MBn-fGV3--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/uzcdwdfvso6zl4oxtg41.jpg",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/building-a-personal-portfolio-website-with-hugo-5c8l",
		"public_reactions_count": 14,
		"processed_html": "\u003cp\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eA personal portfolio is always fun. Whether it be flaunting it amongst your peers or standing out from the crowd in hiring. Everyone wants to have one but no one wants to write boring HTML for it. Well guess what, now you can make your own portfolio the way you write your \u003ccode\u003eREADME\u003c/code\u003es on GitHub, in \u003ca href=\"https://www.markdownguide.org/\"\u003emarkdown\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/gohugoio/hugo.git\"\u003eHugo\u003c/a\u003e, the world’s fastest framework for building websites, offers the following features for building your own website with both blazing fast speed and smooth ease. Hugo provides the following features:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Fast reloading with real time changes on the web\u003c/li\u003e\n\u003cli\u003e  Loads of themes and templates\u003c/li\u003e\n\u003cli\u003e  Multi-language support\u003c/li\u003e\n\u003cli\u003e  Static site generator\u003c/li\u003e\n\u003cli\u003e  Millisecond build time\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstallation\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eTo get started, make sure you have the \u003ca href=\"https://golang.org/dl/\"\u003eGo\u003c/a\u003e installed. To install Hugo refer \u003ca href=\"https://gohugo.io/getting-started/installing\"\u003ethis\u003c/a\u003e.. Hugo offers a very easy-to-use multi Operating System command line interface to interact with its underlying features.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGetting started\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eTo create a new website using Hugo, simply run the following commands on the command line.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ehugo new site mysite  \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003emysite  \n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003egit clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c\n\n\u003cspan class=\"c\"\u003e# Directory structure of the project\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003etree mysite\n\nmysite  \n├── archetypes  \n│   └── default.md  \n├── config.toml  \n├── content  \n├── data  \n├── layouts  \n├── static  \n└── themes  \n    └── m10c\n\n7 directories, 2 files\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eYou can look at some great themes for Hugo over \u003ca href=\"https://themes.gohugo.io/\"\u003ehere\u003c/a\u003e. In this tutorial we are going to use the \u003ca href=\"https://github.com/vaga/hugo-theme-m10c\"\u003em10c\u003c/a\u003e theme.\u003c/p\u003e\n\n\u003cp\u003eAdd \u003ccode\u003etheme = \"m10c\"\u003c/code\u003e, at the end of \u003cstrong\u003econfig.toml\u003c/strong\u003e. You can start the hugo server by typing:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ehugo server \u003cspan class=\"nt\"\u003e-D\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eGo to \u003ccode\u003elocalhost:1313\u003c/code\u003e and you will be able to see the following:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--02ffuljP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/naoqabqt0aio91acx9v8.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--02ffuljP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/naoqabqt0aio91acx9v8.png\" alt=\"_Empty m10c theme_\" loading=\"lazy\" width=\"880\" height=\"622\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNow to add social links to your portfolio you can take a look at \u003cstrong\u003emysite/themes/m10c/exampleSite/config.toml.\u003c/strong\u003e This serves as an example of adding different components to your own \u003cem\u003econfig.toml.\u003c/em\u003e You can add the social login links to your own config. Copying the params to our own \u003cem\u003econfig.toml\u003c/em\u003e, it now looks like this:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/660bfffc555f4b44e16d8bd6a65f026d.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eTo add an avatar, simple add an image of yourself, name it \u003ccode\u003eavatar.jpg\u003c/code\u003e and place it in \u003cstrong\u003estatic/\u003c/strong\u003e folder. Our website now looks like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8XnS8_0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/wykfnsyoes62kmgs77jx.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8XnS8_0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/wykfnsyoes62kmgs77jx.png\" alt=\"_The website, with social links and avatar_\" loading=\"lazy\" width=\"880\" height=\"426\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNow that we have our image and social links on the website, it is time to add some more of our information.\u003c/p\u003e\n\n\u003cp\u003eIn Hugo, we can create different web pages. Each webpage goes into the \u003cstrong\u003econtent/posts/\u003c/strong\u003e directory as a markdown file. It is there that we can write markdown and define how we want it all to lay out.\u003c/p\u003e\n\n\u003cp\u003eWebpages are created in the form of posts in Hugo. Lets get started with creating a new post.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ehugo new posts/Blogs.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThis creates a new file called \u003ccode\u003eBlogs.md\u003c/code\u003e in the \u003cstrong\u003econtent/posts/\u003c/strong\u003e folder. Open \u003cem\u003eBlogs.md\u003c/em\u003e and you can start writing markdown.\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/a9b36fd871631a654cd473caf676b23c.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAnd it will automatically be reloaded on your website in the form of a hyperlink. You can paginate over these hyperlinks and also set which hyperlinks to show first in the order of the time they were created. On clicking the hyperlink, you will be able to see contents of the markdown file that we defined above.\u003c/p\u003e\n\n\u003cp\u003eWith the right number of posts and enough content, you can make your own portfolio. Take a look at one of my post pages.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YRuaj4Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/154ctx742mfhln7t3upj.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--YRuaj4Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/154ctx742mfhln7t3upj.png\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"462\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAn industry with an increasing number of competition is the best motivation for someone to start designing their portfolio in a way that it stands out from the rest of the competition. But who says it has to be hard?\u003c/p\u003e\n\n\u003cp\u003eWith a handful of simple steps, and some markdown magic, anyone can make their own beautiful website without coding one bit. Hugo is indeed a very fast tool, with advanced features like instant reloading and real time refresh, loads of templates, easy configuration, multi-language support and of course, markdown!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReferences\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/hugo-demo\"\u003e\u003cstrong\u003eL04DB4L4NC3R/hugo-demo\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://gohugo.io/hosting-and-deployment/\"\u003e\u003cstrong\u003eHosting \u0026amp; Deployment\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/gohugoio/hugo\"\u003e\u003cstrong\u003egohugoio/hugo\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "building-a-personal-portfolio-website-with-hugo-5c8l",
		"social_image": null,
		"title": "Building a personal portfolio website with Hugo",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2019-08-18T02:10:09.332Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-07-14T16:54:34.346Z",
		"published_at": "2019-05-05T10:24:07.618Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: 'The Dispatcher'\ndescription: Introduction\ndate: '2019-05-05T10:24:07.618Z'\ncategories: []\nkeywords: []\nslug: /@angadsharma1016/the-dispatcher-pat-man-of-processes-6370da07a211\n---\n\n\n**Introduction**\n\nLets say you are an employee looking for that A+ in your appraisal. Now the boss selects you for a super important project. Feeling special? The boss, by this metaphor, is a task scheduler. Now a dispatcher is someone who gives you suitcase full of briefing letters related to the project and opens the door for you with a pat on your back!\n\nLets call him pat-man for reference.\n\nYour computer is an interesting piece of hardware, but holds an even more spectacular piece of software, nay, an array of processes working together. to make it feel like just one big software. But these processes need to communicate. Moreover, they need to coordinate their temporal cohesiveness. That’s where the schedulers and dispatchers come in.\n\n**Process states in an operating system**\n\nA process in an operating system has 5 states associated with it:\n\n*   `New`: When a new process is created\n*   `Ready`: When the process is ready for execution\n*   `Running`: When the process is running\n*   `Waiting`: When the process is waiting for another process, or an I/O task to complete\n*   `Terminated`: When the process ends\n\n![process states](https://thepracticaldev.s3.amazonaws.com/i/5okde6cbdpmvg00evzo5.jpeg)\n\nNote that there is a waiting queue and a ready queue associated with all of the processes.\n\nThe waiting queue consists of a list of all of the processes that are waiting to be dispatched. When the processes are ready to execute, they are pushed into the ready queue.\n\nThe **short term scheduler** runs in the CPU and is used for selecting a single process from the ready queue for execution.\n\n![scheduling and dispatching processes with queues](https://thepracticaldev.s3.amazonaws.com/i/qco1p2gogb0xn98ixjvg.png)\n\n**The dispatcher**\n\nA process dispatcher gives control of the CPU to a process selected by the short term scheduler.\n\nRewind back to the introduction where we said that your boss was the scheduler and the pat-man was the dispatcher. Note that the boss selected you but it was the pat-man who actually opened the door for you and gave you the resources to operate. Similarly, dispatchers can allocate threads to processes and CPU to the threads.\n\nA dispatcher has the following responsibilities:\n\n*   **Switching to user mode**: All of the low level operating system processes run on the kernel level security access, but all of the application code and user issued processes run in the application space or the user permission mode. Dispatcher switches the processes to the user mode.\n*   **Addressing:** The program counter (PC) register points towards the next process that is to be executed. The dispatcher is responsible for addressing that address.\n*   **Initiation of context switch:** A context switch is when a currently running process is halted and all of its data and its process control block (PCB) are stored in main memory, and another process is loaded in its place for execution.\n*   **Managing dispatch latency:** Dispatch latency is calculated as the time it takes to stop one process and start another. The lower the dispatch latency, the more efficient the software for the same hardware configuration.\n\n\u003e Note that a dispatcher is NOT a thread. The dispatcher runs on each core, runs a thread for a while, saves its state, loads the state of another thread and runs it.\n\n**Selection of processes for dispatch**\n\nThe dispatcher can select processes in the following ways:\n\n![ready queue](https://thepracticaldev.s3.amazonaws.com/i/y0cgwhn7ugz0sgsm2xeo.png)\n\n*   Search the table from the front and run the first ready thread.\n\n![ready queue](https://thepracticaldev.s3.amazonaws.com/i/sro2d9xctq8da48jdbis.png)\n\n*   Dispatch one thread from the queue and run it. If the process is not completed, insert it at the back of the queue.\n\n![priority based ready queues](https://thepracticaldev.s3.amazonaws.com/i/i4fo5k7416mu62kw8qr6.png)\n\n*   Give each thread a priority and organize the priority queues accordingly.\n\n![priority based multiple queues](https://thepracticaldev.s3.amazonaws.com/i/io79i1c35n2rcm52fdqn.png)\npriority based multiple queues\n\n*   Have multiple queues for each priority class. Whenever some threads are ready for execution chose the one with the highest priority and run it.\n\n![](https://thepracticaldev.s3.amazonaws.com/i/047fj5ubxhwgaiy5snzf.png)\n\n**Stopping processes and managing dispatcher failure**\n\nIf a thread is executing and the dispatcher isn’t, it means that the operating system has lost control. In that case the following recovery mechanisms can be employed:\n\n**Traps:** Traps are essentially events in the operating system which cause a state switch into the operating system. Traps allow execution of a program or task to be continued without loss of program continuity. The return address for the trap handler points to the instruction to be executed after the trapping instruction. They can be used to catch arithmetic errors.\n\n*   `System calls`: System calls is an application programming interface through which processes running in user mode can communicate with the kernel mode to leverage operating system specific functionalities like signalling or killing processes.\n*   `Page Fault`: A page fault occurs when a program attempts to access data or code that is in its address space, but is not currently located in the system.\n\n**Interrupts:** Events occurring outside the current thread that causes a state switch in the operating system. eg: timers, completion of disk operations etc. They can be used to stop running processes.\n\n\u003e Interrupts are hardware interrupts like the completion of I/O events while traps are software-invoked interrupts like division by 0. Both traps and interrupts are asynchronous and are used as signalling or recovery mechanisms by the OS in case of a dispatch failure.\n\n**Conclusion**\n\n![](https://thepracticaldev.s3.amazonaws.com/i/4tsqffvin8walzp50yse.jpg)\n\n\nA dispatcher is an integral part of an operating system. It is responsible for maintaining the ready queue and making sure each ready process gets dispatched to utilize the CPU.\n\nDispatcher is also being used in other systems like sophisticated small-talk messaging systems, and in object oriented programming as dynamic dispatchers. It is time someone patted the pat-man on the back!\n\n**Further reading**\n\n[**What is the difference between Trap and Interrupt?**](https://stackoverflow.com/questions/3149175/what-is-the-difference-between-trap-and-interrupt)\n\n[**A Compact Task Dispatcher for Embedded Systems.pdf**](https://drive.google.com/file/d/0Bw1wxZHj3VakNnZ3eFVEbUhWZ2s/view)\n\n[**Implementing an Asynchronous Dispatch Queue**](https://embeddedartistry.com/blog/2017/2/1/c11-implementing-a-dispatch-queue-using-stdfunction)",
		"cached_tag_list": "os, computerscience",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 1,
		"description": "Introduction",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--FsEbuRyl--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/8snhnbtdskfpg90wtlyi.jpg",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/the-dispatcher-4l4k",
		"public_reactions_count": 8,
		"processed_html": "\u003cp\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eLets say you are an employee looking for that A+ in your appraisal. Now the boss selects you for a super important project. Feeling special? The boss, by this metaphor, is a task scheduler. Now a dispatcher is someone who gives you suitcase full of briefing letters related to the project and opens the door for you with a pat on your back!\u003c/p\u003e\n\n\u003cp\u003eLets call him pat-man for reference.\u003c/p\u003e\n\n\u003cp\u003eYour computer is an interesting piece of hardware, but holds an even more spectacular piece of software, nay, an array of processes working together. to make it feel like just one big software. But these processes need to communicate. Moreover, they need to coordinate their temporal cohesiveness. That’s where the schedulers and dispatchers come in.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eProcess states in an operating system\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eA process in an operating system has 5 states associated with it:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  \u003ccode\u003eNew\u003c/code\u003e: When a new process is created\u003c/li\u003e\n\u003cli\u003e  \u003ccode\u003eReady\u003c/code\u003e: When the process is ready for execution\u003c/li\u003e\n\u003cli\u003e  \u003ccode\u003eRunning\u003c/code\u003e: When the process is running\u003c/li\u003e\n\u003cli\u003e  \u003ccode\u003eWaiting\u003c/code\u003e: When the process is waiting for another process, or an I/O task to complete\u003c/li\u003e\n\u003cli\u003e  \u003ccode\u003eTerminated\u003c/code\u003e: When the process ends\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RGCswyb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/5okde6cbdpmvg00evzo5.jpeg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RGCswyb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/5okde6cbdpmvg00evzo5.jpeg\" alt=\"process states\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNote that there is a waiting queue and a ready queue associated with all of the processes.\u003c/p\u003e\n\n\u003cp\u003eThe waiting queue consists of a list of all of the processes that are waiting to be dispatched. When the processes are ready to execute, they are pushed into the ready queue.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eshort term scheduler\u003c/strong\u003e runs in the CPU and is used for selecting a single process from the ready queue for execution.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MG3ZJS7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/qco1p2gogb0xn98ixjvg.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MG3ZJS7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/qco1p2gogb0xn98ixjvg.png\" alt=\"scheduling and dispatching processes with queues\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe dispatcher\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eA process dispatcher gives control of the CPU to a process selected by the short term scheduler.\u003c/p\u003e\n\n\u003cp\u003eRewind back to the introduction where we said that your boss was the scheduler and the pat-man was the dispatcher. Note that the boss selected you but it was the pat-man who actually opened the door for you and gave you the resources to operate. Similarly, dispatchers can allocate threads to processes and CPU to the threads.\u003c/p\u003e\n\n\u003cp\u003eA dispatcher has the following responsibilities:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  \u003cstrong\u003eSwitching to user mode\u003c/strong\u003e: All of the low level operating system processes run on the kernel level security access, but all of the application code and user issued processes run in the application space or the user permission mode. Dispatcher switches the processes to the user mode.\u003c/li\u003e\n\u003cli\u003e  \u003cstrong\u003eAddressing:\u003c/strong\u003e The program counter (PC) register points towards the next process that is to be executed. The dispatcher is responsible for addressing that address.\u003c/li\u003e\n\u003cli\u003e  \u003cstrong\u003eInitiation of context switch:\u003c/strong\u003e A context switch is when a currently running process is halted and all of its data and its process control block (PCB) are stored in main memory, and another process is loaded in its place for execution.\u003c/li\u003e\n\u003cli\u003e  \u003cstrong\u003eManaging dispatch latency:\u003c/strong\u003e Dispatch latency is calculated as the time it takes to stop one process and start another. The lower the dispatch latency, the more efficient the software for the same hardware configuration.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote that a dispatcher is NOT a thread. The dispatcher runs on each core, runs a thread for a while, saves its state, loads the state of another thread and runs it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eSelection of processes for dispatch\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe dispatcher can select processes in the following ways:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HXidarD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/y0cgwhn7ugz0sgsm2xeo.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HXidarD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/y0cgwhn7ugz0sgsm2xeo.png\" alt=\"ready queue\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Search the table from the front and run the first ready thread.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--X1M69QRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/sro2d9xctq8da48jdbis.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--X1M69QRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/sro2d9xctq8da48jdbis.png\" alt=\"ready queue\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Dispatch one thread from the queue and run it. If the process is not completed, insert it at the back of the queue.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lyGTo9LM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/i4fo5k7416mu62kw8qr6.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lyGTo9LM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/i4fo5k7416mu62kw8qr6.png\" alt=\"priority based ready queues\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Give each thread a priority and organize the priority queues accordingly.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9I-ZMKAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/io79i1c35n2rcm52fdqn.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9I-ZMKAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/io79i1c35n2rcm52fdqn.png\" alt=\"priority based multiple queues\" loading=\"lazy\"\u003e\u003c/a\u003e\u003cbr\u003e\npriority based multiple queues\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Have multiple queues for each priority class. Whenever some threads are ready for execution chose the one with the highest priority and run it.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sXHcC026--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/047fj5ubxhwgaiy5snzf.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sXHcC026--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/047fj5ubxhwgaiy5snzf.png\" alt=\"\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eStopping processes and managing dispatcher failure\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIf a thread is executing and the dispatcher isn’t, it means that the operating system has lost control. In that case the following recovery mechanisms can be employed:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTraps:\u003c/strong\u003e Traps are essentially events in the operating system which cause a state switch into the operating system. Traps allow execution of a program or task to be continued without loss of program continuity. The return address for the trap handler points to the instruction to be executed after the trapping instruction. They can be used to catch arithmetic errors.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  \u003ccode\u003eSystem calls\u003c/code\u003e: System calls is an application programming interface through which processes running in user mode can communicate with the kernel mode to leverage operating system specific functionalities like signalling or killing processes.\u003c/li\u003e\n\u003cli\u003e  \u003ccode\u003ePage Fault\u003c/code\u003e: A page fault occurs when a program attempts to access data or code that is in its address space, but is not currently located in the system.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eInterrupts:\u003c/strong\u003e Events occurring outside the current thread that causes a state switch in the operating system. eg: timers, completion of disk operations etc. They can be used to stop running processes.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eInterrupts are hardware interrupts like the completion of I/O events while traps are software-invoked interrupts like division by 0. Both traps and interrupts are asynchronous and are used as signalling or recovery mechanisms by the OS in case of a dispatch failure.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SVP98goD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/4tsqffvin8walzp50yse.jpg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SVP98goD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/4tsqffvin8walzp50yse.jpg\" alt=\"\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eA dispatcher is an integral part of an operating system. It is responsible for maintaining the ready queue and making sure each ready process gets dispatched to utilize the CPU.\u003c/p\u003e\n\n\u003cp\u003eDispatcher is also being used in other systems like sophisticated small-talk messaging systems, and in object oriented programming as dynamic dispatchers. It is time someone patted the pat-man on the back!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eFurther reading\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://stackoverflow.com/questions/3149175/what-is-the-difference-between-trap-and-interrupt\"\u003e\u003cstrong\u003eWhat is the difference between Trap and Interrupt?\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://drive.google.com/file/d/0Bw1wxZHj3VakNnZ3eFVEbUhWZ2s/view\"\u003e\u003cstrong\u003eA Compact Task Dispatcher for Embedded Systems.pdf\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://embeddedartistry.com/blog/2017/2/1/c11-implementing-a-dispatch-queue-using-stdfunction\"\u003e\u003cstrong\u003eImplementing an Asynchronous Dispatch Queue\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "the-dispatcher-4l4k",
		"social_image": null,
		"title": "The Dispatcher",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2019-08-18T03:16:36.012Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2019-04-30T11:15:58.382Z",
		"published_at": "2019-04-30T11:15:58.382Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: Mutually exclusive terminals on the web\ndescription: Introduction\ndate: '2019-04-30T11:15:58.382Z'\ncategories: []\nkeywords: []\nslug: /@angadsharma1016/mutually-exclusive-terminal-sessions-on-the-web-bf2393364436\n---\n\n**Introduction**\n\nIn the age of online learning, knowledge can be grasped at a click of a button while enjoying your favourite blend of coffee sitting on your favourite couch. In this era of online distribution of education, mutually exclusive exam rooms are a necessity. We will learn how to make an online shared command line exam room for the same.\n\n\nNote that the [project](https://github.com/L04DB4L4NC3R/examinaar) which is going to be referred has the following deliverables:\n\n* Terminal sessions on the web\n* The ability to create/delete shell instances of any OS at will\n* Filesystem sharing, yet session based exclusivity\n* The ability to join/leave multiple sessions at will\n* Real time video chatting while in session\n\nWithout further ado lets get started on a journey which will take you to the horizons of your browser as well as the zenith of your terminal.\n\n*   golang standard net/http library\n*   docker community edition\n*   gotty, go web terminal library\n\n\n\n\nThe basic draft of our application will have 2 way shared terminals like this-\n\n![Two exclusive terminals running on the web](https://thepracticaldev.s3.amazonaws.com/i/w34ctkpeptye5k5psbts.png)\n\n*   Make sure to install the latest version of golang\n*   Install the latest version of docker CE\n* Install [goTTY](https://www.tecmint.com/gotty-share-linux-terminal-in-web-browser/)\n\n**Installing go dependencies**\n\n```\n$ sudo apt-get update \u0026\u0026 sudo apt-get upgrade -y\n$ go get github.com/yudai/gotty\n$ tree .\n\n├── bin  \n│   ├── get_dependancies  \n│   └── main  \n├── _config.yml  \n├── controller  \n│   ├── auth.go  \n│   ├── helpers.go  \n│   ├── host.go  \n│   ├── routers.go  \n│   └── user.go  \n├── database.db  \n├── main.go  \n├── model  \n│   └── dbfuncs.go  \n├── README.md  \n└── views  \n    ├── _card.html  \n    ├── host.html  \n    ├── index.html  \n    ├── login.html  \n    ├── _navbar.html  \n    ├── _scripts.html  \n    ├── session.html  \n    ├── signup.html  \n    └── view\\_sessions.html\n```\n\n**Writing the main.go server file**\n\n{% gist https://gist.github.com/L04DB4L4NC3R/1311c6c182138fa8d6c712a4dab3fb58.js %}\n\nQuick recap. We installed all of the required software. Then we moved on to set up our server and handlers for serving static files. Then we wrote a function for populating templates to make sure our frontend work is fine and dandy.\n\nPhew! that was a lot! But we have a lot of configuration and setting up done. Now we just have to convert coffee to code and we are good to go. Moving forward, now we are ready to set up the endpoints of our application. We will first start at exposing the API and then we will work on creating a frontend for the same.\n\nNavigate to **/controller** and create 2 files called **host.go** and **routers.go**. The former will have all of our major code and the latter will have some configuration to make sure it runs fine, thusly obeying the unspoken law of modularity.\n\n**Writing modular structures for linkage**\n\nFor making things easy for us to understand and implement we will be creating a structure called **Host**, which holds a template object which we can play with. Then we a **RegisterRoutes** method to Host for handling our desired end points\n\n**router.go** is solely dedicated to joining all of the modular code that we write in package controller and include them in a function which runs when the server runs.\n\nWill will also include the Startup function in **main.go** to start handling the routes we specify\n\n{% gist https://gist.github.com/L04DB4L4NC3R/6b11fd21e00089498afb7564b12f78ab.js %}\n\n**Making a frontend**\n\nEvery project starts with an index.html. Now it is finally time to create our own. Navigate to **/views** directory and create **index.html** and **\\_scripts.html** The main aim is creating a form which can give us the following information-\n\n*   image1: Name of the first image/OS the host wants to run\n*   image2: Name of the second image/OS the host wants to run\n*   port1: Port number of the first image\n*   port2: port number of the second image\n\nOur Index file now looks like this\n\n![index.html](https://thepracticaldev.s3.amazonaws.com/i/g8wg3oia5oyo4oxemzjy.png)\n\n**Creating a session**\n\nNow that we have made the form, it is time to make a handler which does the following-\n\n*   Take inputs- image1, image2, port1, port2\n*   start docker container image1 on port1 and image2 on port2\n*   exec into the docker container and expose it using goTTY\n\n\n**Post handler for creating session**\n\n\nWe will also write our goroutines to make sessions. Each goroutine runs a container with the specified (posted) image and along the specified (posted) port in interactive mode. Then we pipe that exclusive terminal session onto the web through our trusted goTTY\n\n{% gist https://gist.github.com/L04DB4L4NC3R/04154b33f171363239bd10770aec3e93.js %}\n\nAnd thus we end our post handler for creating an exclusive session. Now we create a get route to show us the form.\n\n```go\nfunc (h Host) servepage(w http.ResponseWriter, r \\*http.Request) {  \nif r.Method == http.MethodGet {\n\n                // look for our index page and serve it  \n\t\tt := h.temp.Lookup(\"index.html\")  \n\t\tif t != nil {  \n\t\t\terr = t.Execute(w, val)  \n\t\t} else {  \n\t\t\tw.WriteHeader(http.StatusNotFound)  \n\t\t}  \n\t} else if r.Method == http.MethodPost { // Continue with the post handler\n\n}\n```\n\nQuick recap of what we just did. We created a form in index.html, then we started writing the servepage route that we had defined before. First we handled the POST request, and serialized all of the posted input to a data structure. Then we used that information to write asynchronous goroutines and make then run a docker container of our choice and port in interactive mode. And lastly run a goTTY session on that running docker container. The last thing left on our menu is actually showing the terminals online. So we need to create our **host.html**. See the source code.\n\n\n\n**How to run the project**\n\n```bash\n# Pull all of the essential docker images you want to run   \ndocker pull alpine ubuntu fedora\n\n# Run the project   \ngo run main.go\n```\n\n*   Navigate to localhost:3000/host\n*   Enter the details and you are good to go\n\n**Conclusion**\n\nWe have reached a stage where we can make and deploy shared terminals on the clouds. The advantage of these sessions are-\n\n*   They are light weight\n*   They follow mutual exclusion\n*   There are no memory leaks into the host system\n*   They is fast and effective\n*   They provides shared address space and at the same time abstraction from the host\n\n**Moving forward**\n\nThis project was just the beginning. We can do so much more! Creating a seperate user space for viewing and joining sessions. Even including Agora.io video streaming SDK for online monitoring and video calling. The possibilities are endless. A sample project is given below\n\n[Sample project demonstration](https://youtu.be/YAKG4s9OGUA)\n\n[Project source code](https://github.com/angadsharma1016/examinaar.git)",
		"cached_tag_list": "go, linux, docker, terminal",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--U0qhZG1J--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/9kefez0l2gwvj993b42c.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/mutually-exclusive-terminals-on-the-web-4cde",
		"public_reactions_count": 7,
		"processed_html": "\u003cp\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the age of online learning, knowledge can be grasped at a click of a button while enjoying your favourite blend of coffee sitting on your favourite couch. In this era of online distribution of education, mutually exclusive exam rooms are a necessity. We will learn how to make an online shared command line exam room for the same.\u003c/p\u003e\n\n\u003cp\u003eNote that the \u003ca href=\"https://github.com/L04DB4L4NC3R/examinaar\"\u003eproject\u003c/a\u003e which is going to be referred has the following deliverables:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTerminal sessions on the web\u003c/li\u003e\n\u003cli\u003eThe ability to create/delete shell instances of any OS at will\u003c/li\u003e\n\u003cli\u003eFilesystem sharing, yet session based exclusivity\u003c/li\u003e\n\u003cli\u003eThe ability to join/leave multiple sessions at will\u003c/li\u003e\n\u003cli\u003eReal time video chatting while in session\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWithout further ado lets get started on a journey which will take you to the horizons of your browser as well as the zenith of your terminal.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  golang standard net/http library\u003c/li\u003e\n\u003cli\u003e  docker community edition\u003c/li\u003e\n\u003cli\u003e  gotty, go web terminal library\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe basic draft of our application will have 2 way shared terminals like this-\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--A20MmE_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/w34ctkpeptye5k5psbts.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--A20MmE_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/w34ctkpeptye5k5psbts.png\" alt=\"Two exclusive terminals running on the web\" loading=\"lazy\" width=\"768\" height=\"458\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Make sure to install the latest version of golang\u003c/li\u003e\n\u003cli\u003e  Install the latest version of docker CE\u003c/li\u003e\n\u003cli\u003eInstall \u003ca href=\"https://www.tecmint.com/gotty-share-linux-terminal-in-web-browser/\"\u003egoTTY\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstalling go dependencies\u003c/strong\u003e\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade -y\n$ go get github.com/yudai/gotty\n$ tree .\n\n├── bin  \n│   ├── get_dependancies  \n│   └── main  \n├── _config.yml  \n├── controller  \n│   ├── auth.go  \n│   ├── helpers.go  \n│   ├── host.go  \n│   ├── routers.go  \n│   └── user.go  \n├── database.db  \n├── main.go  \n├── model  \n│   └── dbfuncs.go  \n├── README.md  \n└── views  \n    ├── _card.html  \n    ├── host.html  \n    ├── index.html  \n    ├── login.html  \n    ├── _navbar.html  \n    ├── _scripts.html  \n    ├── session.html  \n    ├── signup.html  \n    └── view\\_sessions.html\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eWriting the main.go server file\u003c/strong\u003e\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/1311c6c182138fa8d6c712a4dab3fb58.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eQuick recap. We installed all of the required software. Then we moved on to set up our server and handlers for serving static files. Then we wrote a function for populating templates to make sure our frontend work is fine and dandy.\u003c/p\u003e\n\n\u003cp\u003ePhew! that was a lot! But we have a lot of configuration and setting up done. Now we just have to convert coffee to code and we are good to go. Moving forward, now we are ready to set up the endpoints of our application. We will first start at exposing the API and then we will work on creating a frontend for the same.\u003c/p\u003e\n\n\u003cp\u003eNavigate to \u003cstrong\u003e/controller\u003c/strong\u003e and create 2 files called \u003cstrong\u003ehost.go\u003c/strong\u003e and \u003cstrong\u003erouters.go\u003c/strong\u003e. The former will have all of our major code and the latter will have some configuration to make sure it runs fine, thusly obeying the unspoken law of modularity.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWriting modular structures for linkage\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFor making things easy for us to understand and implement we will be creating a structure called \u003cstrong\u003eHost\u003c/strong\u003e, which holds a template object which we can play with. Then we a \u003cstrong\u003eRegisterRoutes\u003c/strong\u003e method to Host for handling our desired end points\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003erouter.go\u003c/strong\u003e is solely dedicated to joining all of the modular code that we write in package controller and include them in a function which runs when the server runs.\u003c/p\u003e\n\n\u003cp\u003eWill will also include the Startup function in \u003cstrong\u003emain.go\u003c/strong\u003e to start handling the routes we specify\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/6b11fd21e00089498afb7564b12f78ab.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eMaking a frontend\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eEvery project starts with an index.html. Now it is finally time to create our own. Navigate to \u003cstrong\u003e/views\u003c/strong\u003e directory and create \u003cstrong\u003eindex.html\u003c/strong\u003e and \u003cstrong\u003e_scripts.html\u003c/strong\u003e The main aim is creating a form which can give us the following information-\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  image1: Name of the first image/OS the host wants to run\u003c/li\u003e\n\u003cli\u003e  image2: Name of the second image/OS the host wants to run\u003c/li\u003e\n\u003cli\u003e  port1: Port number of the first image\u003c/li\u003e\n\u003cli\u003e  port2: port number of the second image\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOur Index file now looks like this\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MS9nGhxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/g8wg3oia5oyo4oxemzjy.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MS9nGhxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/g8wg3oia5oyo4oxemzjy.png\" alt=\"index.html\" loading=\"lazy\" width=\"768\" height=\"322\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCreating a session\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNow that we have made the form, it is time to make a handler which does the following-\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Take inputs- image1, image2, port1, port2\u003c/li\u003e\n\u003cli\u003e  start docker container image1 on port1 and image2 on port2\u003c/li\u003e\n\u003cli\u003e  exec into the docker container and expose it using goTTY\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003ePost handler for creating session\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe will also write our goroutines to make sessions. Each goroutine runs a container with the specified (posted) image and along the specified (posted) port in interactive mode. Then we pipe that exclusive terminal session onto the web through our trusted goTTY\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/04154b33f171363239bd10770aec3e93.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAnd thus we end our post handler for creating an exclusive session. Now we create a get route to show us the form.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight go\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eh\u003c/span\u003e \u003cspan class=\"n\"\u003eHost\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eservepage\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eResponseWriter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMethod\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodGet\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n                \u003cspan class=\"c\"\u003e// look for our index page and serve it  \u003c/span\u003e\n        \u003cspan class=\"n\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLookup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"index.html\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n            \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e  \n            \u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eWriteHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eStatusNotFound\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e  \n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMethod\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMethodPost\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c\"\u003e// Continue with the post handler\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eQuick recap of what we just did. We created a form in index.html, then we started writing the servepage route that we had defined before. First we handled the POST request, and serialized all of the posted input to a data structure. Then we used that information to write asynchronous goroutines and make then run a docker container of our choice and port in interactive mode. And lastly run a goTTY session on that running docker container. The last thing left on our menu is actually showing the terminals online. So we need to create our \u003cstrong\u003ehost.html\u003c/strong\u003e. See the source code.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHow to run the project\u003c/strong\u003e\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Pull all of the essential docker images you want to run   \u003c/span\u003e\ndocker pull alpine ubuntu fedora\n\n\u003cspan class=\"c\"\u003e# Run the project   \u003c/span\u003e\ngo run main.go\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e  Navigate to localhost:3000/host\u003c/li\u003e\n\u003cli\u003e  Enter the details and you are good to go\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe have reached a stage where we can make and deploy shared terminals on the clouds. The advantage of these sessions are-\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  They are light weight\u003c/li\u003e\n\u003cli\u003e  They follow mutual exclusion\u003c/li\u003e\n\u003cli\u003e  There are no memory leaks into the host system\u003c/li\u003e\n\u003cli\u003e  They is fast and effective\u003c/li\u003e\n\u003cli\u003e  They provides shared address space and at the same time abstraction from the host\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eMoving forward\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThis project was just the beginning. We can do so much more! Creating a seperate user space for viewing and joining sessions. Even including Agora.io video streaming SDK for online monitoring and video calling. The possibilities are endless. A sample project is given below\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://youtu.be/YAKG4s9OGUA\"\u003eSample project demonstration\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/angadsharma1016/examinaar.git\"\u003eProject source code\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "mutually-exclusive-terminals-on-the-web-4cde",
		"social_image": null,
		"title": "Mutually exclusive terminals on the web",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2019-08-18T04:12:07.246Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2019-04-30T10:22:04.706Z",
		"published_at": "2019-04-30T10:22:04.706Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: Challenges of neo4j at the heart of software\ndescription: Introduction\ndate: '2019-04-30T10:22:04.706Z'\ncategories: []\nkeywords: []\nslug: /@angadsharma1016/optimizing-go-neo4j-concurrency-patterns-810dff25f88f\n---\n\n**Introduction**\n\nNeo4j is a noSQL database which stores and represents data in the form of graphs. Each node of the graph has a specific tag which is used to identify the type of node. Edges between two nodes specify the relationship between the two nodes. The best use case of neo4j is in the case of highly embedded relational queries. \n\nNote, you can read my article on [setting up a go-neo4j ecosystem](https://medium.com/@angadsharma1016/optimizing-go-neo4j-concurrency-patterns-810dff25f88f) as a primer.\n\n**Hurdles to adoption**\n\nI started working on one of my biggest projects around last year. Since my learning mechanism is solely involved around using new technologies in real life projects, I was pretty keen on giving graph databases a go. It was then that I came across what came to be the backbone of my project, neo4j. But getting to this point wasn't easy, mainly because of the following hurdles:\n\n* Lack of comprehensive documentation around neo4j drivers in golang (which my project was being written in).\n* Overall write-performace issues relative to SQL databases.\n* Lack of sophisticated indexing mechanisms.\n* Garbage collection pauses.\n\n![Graph story](https://thepracticaldev.s3.amazonaws.com/i/6rs8gyz6hba7b3syzxn8.png)\n\n**Understanding the WHY**\n\nNeo4j is a read friendly database. Which means that it is extremely fast when it comes to reading data. So much so that it paves a path to real time graph use cases. \n\nWhile being read friendly, writes still come at a cost. Mainly because of the following reasons:\n\n* Neo4j follows a master-slave architecture and writes are always done on the master. Even if you try to write on a slave, it will internally be cascaded to the master. When the master dies, a new one is elected automatically. \n\n![Master](https://thepracticaldev.s3.amazonaws.com/i/qipsitci6vyhc65m955s.jpg)\n\n* All data resides on each machine. This is to protect referential integrity. Once data set search queries become larger than the available RAM, the system will slow down dramatically.\n\n* Neo4j is also not optimized for searching. Very much so when compared with technologies such as elasticsearch.\n\n* See the point about garbage collector pauses [here](https://qr.ae/TWrgCn)\n\n\n**Solving some of the problems at the application level**\n\nTo solve the problem of write latency, I made sure that all of the functions I wrote executed concurrently. But this didn't stop the fact that there was still a bottleneck due to the fact that writes are always done on one node. This raised the issue of mutual exclusion.\n\nWhile neo4j does not offer read locks on data, it does so for writes. But the locks are explicit in a lot of driver implementations. So I spent spent a lot of time debugging my code and fishing for errors which caused my bulk writes to crash. I then implemented `mutex locks` in the application layer itself. It was as simple as doing the following:\n\n```go\n// create a new node with given label and participant data struct (FOR COORDINATORS)\nfunc CreateParticipant(e Event, label string, c chan error, mutex *sync.Mutex) {\n\n\tmutex.Lock()\n \n        // Critical section begins\n\n\t_, err := con.ExecNeo(`MATCH(a:EVENT) WHERE a.name=$EventName\n\tCREATE (n:INCHARGE {name:$name, registrationNumber:$registrationNumber,\n\t\temail:$email, phoneNumber:$phoneNumber, gender: $gender})\u003c-[:`+label+`]-(a) `, map[string]interface{}{\n\t\t\"EventName\":          e.Name,\n\t\t\"name\":               e.GetField(label, \"Name\"),\n\t\t\"registrationNumber\": e.GetField(label, \"RegistrationNumber\"),\n\t\t\"email\":              e.GetField(label, \"Email\"),\n\t\t\"phoneNumber\":        e.GetField(label, \"PhoneNumber\"),\n\t\t\"gender\":             e.GetField(label, \"Gender\"),\n\t})\n\tif err != nil {\n\t\tc \u003c- err\n\t\treturn\n\t}\n\n        // Critical section ends\n\n\tmutex.Unlock()\n\n\tlog.Printf(\"Created %s node\", label)\n\tc \u003c- nil\n\treturn\n}\n```\n\nThis gave me the power to execute hundereds of goroutines at once without worrying about mutual exclusion. Granted that this could be achieved at the database level itself, it wasn't obvious at the time. The project timeline required that I followed the *Just make it work* ideology, but got to learn a lot about neo4j in the process.\n\n**Conclusion**\n\nNeo4j, being a relatively newer concept in a world of SQLites and Mongooses, has the potential to be one of the most expressive databases, especially in the budding world of data visualization. While it has its caveats, a lot of them can be handled at the application level itself. While the documentation for some of the driver implementations leave a lot to be desired, in the end, there is nothing that a targetted google search can't solve. ",
		"cached_tag_list": "go, computerscience, neoj",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--CcQusa-a--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/jrqayi1heg6annf2g6u7.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/challenges-of-neo4j-at-the-heart-of-software-2dbi",
		"public_reactions_count": 7,
		"processed_html": "\u003cp\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNeo4j is a noSQL database which stores and represents data in the form of graphs. Each node of the graph has a specific tag which is used to identify the type of node. Edges between two nodes specify the relationship between the two nodes. The best use case of neo4j is in the case of highly embedded relational queries. \u003c/p\u003e\n\n\u003cp\u003eNote, you can read my article on \u003ca href=\"https://medium.com/@angadsharma1016/optimizing-go-neo4j-concurrency-patterns-810dff25f88f\"\u003esetting up a go-neo4j ecosystem\u003c/a\u003e as a primer.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHurdles to adoption\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eI started working on one of my biggest projects around last year. Since my learning mechanism is solely involved around using new technologies in real life projects, I was pretty keen on giving graph databases a go. It was then that I came across what came to be the backbone of my project, neo4j. But getting to this point wasn't easy, mainly because of the following hurdles:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLack of comprehensive documentation around neo4j drivers in golang (which my project was being written in).\u003c/li\u003e\n\u003cli\u003eOverall write-performace issues relative to SQL databases.\u003c/li\u003e\n\u003cli\u003eLack of sophisticated indexing mechanisms.\u003c/li\u003e\n\u003cli\u003eGarbage collection pauses.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--67HkFAF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/6rs8gyz6hba7b3syzxn8.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--67HkFAF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/6rs8gyz6hba7b3syzxn8.png\" alt=\"Graph story\" loading=\"lazy\" width=\"880\" height=\"430\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUnderstanding the WHY\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNeo4j is a read friendly database. Which means that it is extremely fast when it comes to reading data. So much so that it paves a path to real time graph use cases. \u003c/p\u003e\n\n\u003cp\u003eWhile being read friendly, writes still come at a cost. Mainly because of the following reasons:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNeo4j follows a master-slave architecture and writes are always done on the master. Even if you try to write on a slave, it will internally be cascaded to the master. When the master dies, a new one is elected automatically. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dK-qKZCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/qipsitci6vyhc65m955s.jpg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dK-qKZCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/qipsitci6vyhc65m955s.jpg\" alt=\"Master\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAll data resides on each machine. This is to protect referential integrity. Once data set search queries become larger than the available RAM, the system will slow down dramatically.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNeo4j is also not optimized for searching. Very much so when compared with technologies such as elasticsearch.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSee the point about garbage collector pauses \u003ca href=\"https://qr.ae/TWrgCn\"\u003ehere\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eSolving some of the problems at the application level\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eTo solve the problem of write latency, I made sure that all of the functions I wrote executed concurrently. But this didn't stop the fact that there was still a bottleneck due to the fact that writes are always done on one node. This raised the issue of mutual exclusion.\u003c/p\u003e\n\n\u003cp\u003eWhile neo4j does not offer read locks on data, it does so for writes. But the locks are explicit in a lot of driver implementations. So I spent spent a lot of time debugging my code and fishing for errors which caused my bulk writes to crash. I then implemented \u003ccode\u003emutex locks\u003c/code\u003e in the application layer itself. It was as simple as doing the following:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight go\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e// create a new node with given label and participant data struct (FOR COORDINATORS)\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003eCreateParticipant\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e \u003cspan class=\"n\"\u003eEvent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elabel\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"k\"\u003echan\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emutex\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003esync\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMutex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n        \u003cspan class=\"c\"\u003e// Critical section begins\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"n\"\u003econ\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eExecNeo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e`MATCH(a:EVENT) WHERE a.name=$EventName\n    CREATE (n:INCHARGE {name:$name, registrationNumber:$registrationNumber,\n        email:$email, phoneNumber:$phoneNumber, gender: $gender})\u0026lt;-[:`\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"s\"\u003e`]-(a) `\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"k\"\u003einterface\u003c/span\u003e\u003cspan class=\"p\"\u003e{}{\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\"EventName\"\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e          \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e               \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"Name\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\"registrationNumber\"\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"RegistrationNumber\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e              \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"Email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\"phoneNumber\"\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e        \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"PhoneNumber\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\"gender\"\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e             \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetField\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\"Gender\"\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"c\"\u003e// Critical section ends\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003emutex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eUnlock\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003elog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Created %s node\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis gave me the power to execute hundereds of goroutines at once without worrying about mutual exclusion. Granted that this could be achieved at the database level itself, it wasn't obvious at the time. The project timeline required that I followed the \u003cem\u003eJust make it work\u003c/em\u003e ideology, but got to learn a lot about neo4j in the process.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNeo4j, being a relatively newer concept in a world of SQLites and Mongooses, has the potential to be one of the most expressive databases, especially in the budding world of data visualization. While it has its caveats, a lot of them can be handled at the application level itself. While the documentation for some of the driver implementations leave a lot to be desired, in the end, there is nothing that a targetted google search can't solve. \u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "challenges-of-neo4j-at-the-heart-of-software-2dbi",
		"social_image": null,
		"title": "Challenges of neo4j at the heart of software",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2019-08-28T09:48:56.797Z",
		"crossposted_at": null,
		"edited_at": "2020-01-27T11:48:08.695Z",
		"last_comment_at": "2019-08-28T13:59:07.399Z",
		"published_at": "2019-08-28T09:48:56.779Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "\u003e I went on as an observer, not a participant, for I do not think I ever spoke. I wanted to understand the issues under discussion, evaluate the arguments, see the calibre of the men involved\n- Nelson Mandela\n\nFor the longest time in my life, I was an introvert. Always shy and reluctant to speak in public situations. I was raised to believe that everything works out *by-the-book*, so I focussed all of my energy to be the *right* person, rather than an *approachable* person. Now I want you to take the book and toss it in the trash. Life never works out the way you intend to. And if it does then you are a lucky exception.\n \nNow that your book is in the trash. Follow this mantra:\n\n\u003e An oportuniity today, if not taken, is a painful memory tomorrow.\n\nOportunities that come your way will require that you step out of your comfort zone. For introverts, its talking to people, working in teams, articulating your ideas and pitching it in front of a greater audience. This is where *selective extraversion* comes to the rescue.\n\nThe following are some of my learnings along the way:\n\n* As mentioned above: an oportuniity today, if not taken, is a painful memory tomorrow. So if an oportunity invites you on stage, just do it!\n\n* **What is the worst that can happen?** Even if you screw up on stage or in a formal situation, everyone will eventually forget it and you'll gain your rep back.\n\n* **Pick your battles**. You don't have to be an extrovert in every situation. Hence the term *selective* extraversion. \n\n* **Observe**. You cannot add value to a conversation until you know where the partaking members are coming from.\n\n* **Act like you own it**. Whenever you go on stage, act like you own it. Remember, belief is everything, so convince yourself.\n\n* I got this last one from my brother. **When anxious, shout a happy yelp**. This converts all of the anxiousness into adrenaline and energy. Don't believe me? Try it!\n\n\nNow 2 years later, I have taken part in 20+ hackathons, took 10+ seminars, pitched my ideas 30+ times, performed a song on stage 3 times, and just recently, made one Udemy course with 3000+ enrollments (till now).\n\nIt is a FREE course called: [GetGoing, Introduction to Golang](https://udemy.com/course/getgoing). \n\n**You are going to screw up**\n\nNo matter how experienced a person is, they will always screw up in a public situation once or twice. Be it a minor hitch or choking on stage. \n\nI screwed up the second time I went up on stage to give a song performace. I was on the stage with my guitar with 3 other people who were going to sing. My knees were shaking and my fingers were sweaty. I started playing the guitar and soon realized that it was untuned and the *capo* was not on the right *fret*. That performance was a disaster. \n\nThe worst thing that could have happened actually happened. A few weeks later, no one even remembers the performance, let alone the screw up. The crowd memory is very short, take advantage of it. The worst that can happen is not that bad!\n\n**Conclusion**\n\nPublic speaking is a great way to score loads of adrenaline, and rep. Never let an opportunity slip by. Chuck the book down the drain. You make your own rep. No guidelines can do it for you.\n\n`PS`: I am gonna be speaking at the Docker Chennai meetup in September. So if any of you guys are gonna be there, hit me up.",
		"cached_tag_list": "discuss, career, productivity",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 2,
		"description": "I went on as an observer, not a participant, for I do not think I ever spoke. I wanted to understand...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tPEMoBSp--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/2i8baq3tyc0r5h8l4p3j.jpeg",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/selective-extraversion-f1k",
		"public_reactions_count": 6,
		"processed_html": "\u003cblockquote\u003e\n\u003cp\u003eI went on as an observer, not a participant, for I do not think I ever spoke. I wanted to understand the issues under discussion, evaluate the arguments, see the calibre of the men involved\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNelson Mandela\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFor the longest time in my life, I was an introvert. Always shy and reluctant to speak in public situations. I was raised to believe that everything works out \u003cem\u003eby-the-book\u003c/em\u003e, so I focussed all of my energy to be the \u003cem\u003eright\u003c/em\u003e person, rather than an \u003cem\u003eapproachable\u003c/em\u003e person. Now I want you to take the book and toss it in the trash. Life never works out the way you intend to. And if it does then you are a lucky exception.\u003c/p\u003e\n\n\u003cp\u003eNow that your book is in the trash. Follow this mantra:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAn oportuniity today, if not taken, is a painful memory tomorrow.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOportunities that come your way will require that you step out of your comfort zone. For introverts, its talking to people, working in teams, articulating your ideas and pitching it in front of a greater audience. This is where \u003cem\u003eselective extraversion\u003c/em\u003e comes to the rescue.\u003c/p\u003e\n\n\u003cp\u003eThe following are some of my learnings along the way:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAs mentioned above: an oportuniity today, if not taken, is a painful memory tomorrow. So if an oportunity invites you on stage, just do it!\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eWhat is the worst that can happen?\u003c/strong\u003e Even if you screw up on stage or in a formal situation, everyone will eventually forget it and you'll gain your rep back.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePick your battles\u003c/strong\u003e. You don't have to be an extrovert in every situation. Hence the term \u003cem\u003eselective\u003c/em\u003e extraversion. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eObserve\u003c/strong\u003e. You cannot add value to a conversation until you know where the partaking members are coming from.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAct like you own it\u003c/strong\u003e. Whenever you go on stage, act like you own it. Remember, belief is everything, so convince yourself.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eI got this last one from my brother. \u003cstrong\u003eWhen anxious, shout a happy yelp\u003c/strong\u003e. This converts all of the anxiousness into adrenaline and energy. Don't believe me? Try it!\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow 2 years later, I have taken part in 20+ hackathons, took 10+ seminars, pitched my ideas 30+ times, performed a song on stage 3 times, and just recently, made one Udemy course with 3000+ enrollments (till now).\u003c/p\u003e\n\n\u003cp\u003eIt is a FREE course called: \u003ca href=\"https://udemy.com/course/getgoing\"\u003eGetGoing, Introduction to Golang\u003c/a\u003e. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eYou are going to screw up\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNo matter how experienced a person is, they will always screw up in a public situation once or twice. Be it a minor hitch or choking on stage. \u003c/p\u003e\n\n\u003cp\u003eI screwed up the second time I went up on stage to give a song performace. I was on the stage with my guitar with 3 other people who were going to sing. My knees were shaking and my fingers were sweaty. I started playing the guitar and soon realized that it was untuned and the \u003cem\u003ecapo\u003c/em\u003e was not on the right \u003cem\u003efret\u003c/em\u003e. That performance was a disaster. \u003c/p\u003e\n\n\u003cp\u003eThe worst thing that could have happened actually happened. A few weeks later, no one even remembers the performance, let alone the screw up. The crowd memory is very short, take advantage of it. The worst that can happen is not that bad!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003ePublic speaking is a great way to score loads of adrenaline, and rep. Never let an opportunity slip by. Chuck the book down the drain. You make your own rep. No guidelines can do it for you.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ePS\u003c/code\u003e: I am gonna be speaking at the Docker Chennai meetup in September. So if any of you guys are gonna be there, hit me up.\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "selective-extraversion-f1k",
		"social_image": null,
		"title": "Selective Extraversion",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-01-23T13:46:52.844Z",
		"crossposted_at": null,
		"edited_at": "2020-01-24T03:13:08.823Z",
		"last_comment_at": "2020-04-19T06:48:09.711Z",
		"published_at": "2020-01-23T16:00:45.766Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "As a young boy I was always reluctant to do chores around the house. I just felt that doing the same thing again and again everyday was boring. As I grew up, this mentality changed for the better (thank god), and was hilariously replaced by the following quote in my professional life:\n\n\u003e If it takes longer than 30 seconds, automate it.\n\nRecently, I was tasked with creating about 18 repositories for an organization that I maintain for [DSC-VIT](https://github.com/GDGVIT), powered by Google Developers. All of the repositories needed to be created for the projects that we have planned for the first two quarters of 2020. I decided to make a shell script for it and the following are some of the things I learnt in the process.\n\n\n#### Index\n\n* [Modular code in shell :ok_hand:](#importing-functions)\n* [Echo is bad at JSON :poop:](#echo-is-bad-at-json)\n* [Easy arrays in shell :star2:](#arrays-in-shell)\n* [Did my curl succeed? :cyclone:](#checking-if-a-curl-request-succeeded)\n* [GitHub API rate limitation :snail:](#github-api-rate-limitation)\n* [Switch-Case structure in shell :first_quarter_moon:](#switch-case-in-shell)\n* [Cross platform execution :whale:](#cross-platform-execution)\n* [Unofficial bash strict mode :cop:](#unofficial-bash-strict-mode)\n\n\u003cbr\u003e\n\nLook up the code over here:\n\n{% github L04DB4L4NC3R/gitcr %}\n\n\n\u003cbr\u003e\n\n### Importing functions\n\nI wanted modularity in my code right off the bat. This meant breaking down my code into smaller files with smaller functions and then creating one entrypoint (CLI) for their execution. I had functions to `create` repositories in bulk, `delete` and `revert` creation in bulk as well. I also added a function to give out a neat little manual if someone hit `help`.\n\n\n```\n├── functions\n│   ├── config.sh\n│   ├── create.sh\n│   ├── manual.sh\n│   └── revert.sh\n├── gitcr\n├── .env\n├── README.md\n└── repos.txt\n``` \n\nI had to do 2 kinds of imports:\n\n* Importing environment variables\n* Importing functions\n\nBoth of them can be achieved via a simple syntax:\n\n```bash\n# in gitcr\n\n. ./functions/config.sh\n. ./functions/create.sh\n. ./functions/manual.sh\n. ./functions/revert.sh\n```\n\nAll of the functions and exported variables in the included files can then be used directly in the main file. Note that I have used a `.` to import the aforementioned since it is recognized by `sh` shell. You can also use the `source` keyword to include them in *bash* but it is not recognized by *sh*.\n\n\n\u003cbr\u003e\n\n\n### Echo is bad at JSON\n\nI wanted to write the output from every iteration to the console, or a *JSON* file, as specified by the user. The first thought that hit my mind was to use the `echo` command and pipe it out to a file, or console. *echo* is quite bad at that since it is not build for formatting JSON. Instead, I used `jq` for the same. So it looked like this:\n\n\n![jq demo](https://thepracticaldev.s3.amazonaws.com/i/enblxyi42su7k9hf3kjs.png)\n\n\n`jq` took garbage formatting and parsed a completely formatted JSON out of it. This can then be piped to a file at will.\n\n![echo + jq](https://thepracticaldev.s3.amazonaws.com/i/jauard7euyelu68loj0h.png)\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n### Arrays in shell\n\nFor storing the JSON output in each iteration, I used an array. Arrays in shell can be declared and used in the following way:\n\n```bash\nresult = () # an empty array\n\nresult=(\"abcd\") # an array with 0-th index = \"abcd\"\n\necho ${result[0]} # printing out the index\n\nresult[1] = \"defg\" # assigning value to an index\n\necho ${result[@]} # the '@' can be used for returning the whole array\n\nresult[$iterator] = 2 # variables can be used as indices.\n```\n\nNote that memory for arrays can not be pre-allocated in shell.\n\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n### Checking if a curl request succeeded\n\n`curl` command has a `-i` flag which prints out the request details such as the status code returned as well as the message. This can be extracted from the request and be used to check if the request actually succeeded or not. \n\nThe following code returns the first line of information about the curl request. \n\n\n```bash\n$ res=`curl -i -s -XDELETE https://api.github.com/repos/$owner_name/$line -H \"Authorization: token $token\" | head -1 `\n\n$ echo $res\nHTTP/1.1 401 Unauthorized\n```\n\nThe `res` variable can be broken down to get both the HTTP status code of the response, as well as its message, in the following way:\n\n\n```bash\n# To get the status code\n$ code=`echo $res | cut -d\" \" -f2`\n\n$ echo $code\n401\n\n# To get the status code response\n$ status_of_res=`echo $res | cut -d\" \" -f3-5`\n\n$ echo $status_of_res\nUnauthorized\n```\n\n![curl success](https://thepracticaldev.s3.amazonaws.com/i/3tkfr3io5uha0b7gi4fn.png)\n\nNow what happened here? \n\nNotice that the `head -1` command returns the first line of text from any input. We took that first line and we did a split with *space* as a delimiter, using the `cut -d\" \" -f2` command.\n\n`-f2` flag means that we want the second token from the splitted string. Note that this numbering starts from 1 rather than 0. `f3-5` means that we want tokens from 3 to 5, since HTTP status code messages can be more than a word long and the sentence does not have any more words after that. \n\nNow we can use the status code we got to check if the request succeeded. GitHub API gives a *status 204* after a `DELETE` request succeeds, so a simple check would look something like this:\n\n```bash\nif [[ $code -eq 204 ]]\nthen\n    echo \"Request Succeeded\"\nelse \n    echo \"Request Failed\"\nfi\n```\n\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n### GitHub API rate limitation\n\nGitHub API v3 has a rate limitation of about `5000 requests` per authenticated user and 60 requests per hour for unauthenticated users. Whenever a request is sent to the API, it returns the total rate limitation and the amount remaining for the user, in the form of response headers:\n\n\n```\nX-RateLimit-Limit: 5000\nX-RateLimit-Remaining: 4998\n```\n\nSo if you are thinking about a bulk transaction application which uses the GitHub API, read more about rate limitation [here](https://developer.github.com/v3/#rate-limiting).\n\nFor me, adding the validation in the script was easy:\n\n* Read the number of repositories the user wants to create\n* If the number is greater than 5000, then fail\n\nWhich is easily programmable in the following way:\n\n```bash\n# Read number of words in repos.txt\nrepo_count=`wc -w \u003c repos.txt`\nif [ $repo_count -gt $GITHUB_MAX_REQUESTS ]\nthen\n    echo \"You are only allowed 5000 repos\"\n    exit 1\nfi\n```\nA more pragmatic way would be to check the `X-RateLimit-Remaining` header by pinging the GitHub API and then deciding how many repositories can user create, which is also easily doable by text processing curl response headers.\n\n```bash\nremaining=`curl -i -s -XDELETE https://api.github.com/repos/L04DB4L4NC3R/BOGUS_REPO -H \"Authorization: token $token\" | grep X-RateLimit-Remaining | head -1 | cut -d\":\" -f2`\n```\n\nHere, `grep` searches for the *X-RateLimit-Remaining* header, `head -1` takes only the first sentence and `cut -d\":\" -f2` uses a colon delimiter to extract only the number out of the header key-value pair, which is then stored in a variable called `remaining`.\n\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n### Switch Case in shell\n\nSwitch-case statements in shell have a very unique syntax:\n\n```bash\ncli(){\n\tcase $1 in \n\t\tcreate)\n\t\t\tcreate $@\n\t\t\t;;\n\t\trevert)\n\t\t\trevert $@\n\t\t\t;;\n\n\t\t*)\n\t\thelpFunc\n \t\t;;\n\tesac\n}\n```\n\nNotice the terminating word `esac` is actually the opposite of `case`. This syntax was designed in a way to make programming of CLI applications easy. The `)` lexeme is used as a case statement and the `case` keyword is used as a *switch* statement if you compare it to other programming languages. Wildcard `*` has been used to match the `default` case in scenarios where the user enters something that is not handled by the CLI. \n\nThe `create`, `revert` and `helpFunc` are functions. In shell, functions are called without any parenthesis. Arguments can be passed to them by writing them in a space separated format after the function call. Interestingly, the `$@` is used to pass all of the arguments (that we got when we executed the CLI) to the functions that are being called.\n\n\n```bash\n./gitcr create --out=json\n# $@ in the gitcr function = \"./gitcr\" \"create\" \"--out=json\"\n# When passed to the create function, it retains all of the \n# original parameters\n```\n\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n\n### Cross platform execution\n\nOne of the challenges I faced while making this script was to make it \ncross-platform. Docker came to the rescue! You can use a `bash` container, which occupies only *15 MB*.\n\n![docker](https://thepracticaldev.s3.amazonaws.com/i/5res2x6lzc4evxpmp602.png)\n\nThe following steps can be used for a cross-platform CLI job:\n\n* Use a [bash container](https://hub.docker.com/_/bash)\n* Copy all files that are not user defined\n* Build an image and push to [DockerHub](https://hub.docker.com/)\n* During runtime, mount a volume which has user defined files\n* Delete the container after it has completed execution\n\n\nThe Dockerfile looked like this:\n```Dockerfile\nFROM bash\n\nRUN apk update \u0026\u0026 apk add curl \u0026\u0026 apk add jq\n\nRUN mkdir -p /usr/app/cli\n\nWORKDIR /usr/app/cli\n\nCOPY . . \n\nRUN chmod +x gitcr\n```\n\nDuring runtime, the following command can be executed:\n\n```bash\ndocker run --rm --mount type=bind,source=\"{PATH}\",target=/usr/app/cli/ angadsharma1016/gitcr -c \"bash /usr/app/cli/gitcr create\"\n```\n\nWhat happened here?\n\nThis command runs a container based off of a particular image, which has all of the code. During runtime, it takes in user defined files like `.env` and `repos.txt` as a volume mount inside the container and simply runs the CLI. Your system does not need to have bash and other tools installed. \n\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n### Unofficial bash strict mode\n\nAlways start your bash scripts with the following lines:\n\n```bash\nset -euo pipefail\nIFS=$'\\n\\t'\n```\n\nIt means the following things:\n\n* `set -e`: Exit script if any of the commands throw a return code 1\n* `set u`: Any undeclared variable referenced will result in an error\n* `set -o pipefail`: Commands in pipes won't fail silently\n* `IFS`: *Internal Field Separator* controls what bash calls a word\n\nIf followed, the unofficial bash strict mode can save hours of debugging time. Read more it [here](http://redsymbol.net/articles/unofficial-bash-strict-mode/)\n\n\u003cbr\u003e\n\u003cbr\u003e\n\n## Conclusion\n\nOne night of hacking away at my *zsh* and trying to act like I know what I am doing taught me a lot about how to actually write useful scripts that automate a lot of work that you either have to do stat, or will have to do in the near future. It's always better to take some time off the task at hand to actually figure out a better solution to do the said task sustainably in the future. \n\nDon't mind writing code or working on tools that other people have worked on before, as long as it is for your own personal learning (or rolling out a product better than market alternatives). Stay hungry and stay foolish!",
		"cached_tag_list": "git, linux, bash, docker",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 5,
		"description": "As a young boy I was always reluctant to do chores around the house. I just felt that doing the same...",
		"main_image": "https://thepracticaldev.s3.amazonaws.com/i/sjpxueje7lwxngdcy1fm.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/7-things-i-learnt-from-a-script-for-repository-creation-4cbk",
		"public_reactions_count": 74,
		"processed_html": "\u003cp\u003eAs a young boy I was always reluctant to do chores around the house. I just felt that doing the same thing again and again everyday was boring. As I grew up, this mentality changed for the better (thank god), and was hilariously replaced by the following quote in my professional life:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf it takes longer than 30 seconds, automate it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eRecently, I was tasked with creating about 18 repositories for an organization that I maintain for \u003ca href=\"https://github.com/GDGVIT\"\u003eDSC-VIT\u003c/a\u003e, powered by Google Developers. All of the repositories needed to be created for the projects that we have planned for the first two quarters of 2020. I decided to make a shell script for it and the following are some of the things I learnt in the process.\u003c/p\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"index\" href=\"#index\"\u003e\n  \u003c/a\u003e\n  Index\n\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#importing-functions\"\u003eModular code in shell 👌\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#echo-is-bad-at-json\"\u003eEcho is bad at JSON 💩\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#arrays-in-shell\"\u003eEasy arrays in shell 🌟\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#checking-if-a-curl-request-succeeded\"\u003eDid my curl succeed? 🌀\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#github-api-rate-limitation\"\u003eGitHub API rate limitation 🐌\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#switch-case-in-shell\"\u003eSwitch-Case structure in shell 🌓\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cross-platform-execution\"\u003eCross platform execution 🐳\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#unofficial-bash-strict-mode\"\u003eUnofficial bash strict mode 👮\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eLook up the code over here:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/L04DB4L4NC3R\"\u003e\n        L04DB4L4NC3R\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/L04DB4L4NC3R/gitcr\"\u003e\n        gitcr\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A dead simple script to create/delete repos in bulk\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp align=\"center\" dir=\"auto\"\u003e\n    \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/30529572/72942245-f8fee880-3d98-11ea-8821-346c74e55f56.png\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--KgjO9JMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/30529572/72942245-f8fee880-3d98-11ea-8821-346c74e55f56.png\" height=\"20%\" width=\"30%/\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\n    \u003c/p\u003e\n\u003ch2 align=\"center\" dir=\"auto\"\u003e\n GitCR \u003c/h2\u003e\n    \u003ch4 align=\"center\" dir=\"auto\"\u003e\n A dead simple script for bulk creation and deletion of GitHub repositories \u003c/h4\u003e\n\u003ch4 dir=\"auto\"\u003e\n\u003c/h4\u003e\n\u003chr\u003e\n\u003cp dir=\"auto\"\u003eCheck out the blog related to this project: \u003ca href=\"https://kutt.it/gitcr\" rel=\"nofollow\"\u003e7 things I learnt from a script for repository creation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nFunctionalities\u003c/h2\u003e\n\u003cul class=\"contains-task-list\"\u003e\n\u003cli class=\"task-list-item\"\u003e\n Bulk create repositories from a template\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\n Revert creation\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 dir=\"auto\"\u003e\nInstructions to run\u003c/h2\u003e\n\u003ch3 dir=\"auto\"\u003e\nPre-requisites\u003c/h3\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eDocker, or a linux based system with \u003cem\u003ecurl\u003c/em\u003e and \u003cem\u003ejq\u003c/em\u003e installed.\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/settings/tokens\"\u003eGithub personal access token\u003c/a\u003e with write and delete permissions.\u003c/li\u003e\n\u003cli\u003eA \u003ca href=\"https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template\"\u003etemplate repository\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 dir=\"auto\"\u003e\nSetup\u003c/h3\u003e\n\u003cp dir=\"auto\"\u003eYou'll need 2 things to get started:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eA file called \u003ccode\u003e.env\u003c/code\u003e with the following variables. See the  \u003ca href=\"https://github.com/L04DB4L4NC3R/gitcr./.env.sample\"\u003esample\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003eThe second thing that is needed is a \u003ccode\u003erepos.txt\u003c/code\u003e file with the name of the repositories that you want to create. The number of repositories can be anywhere between 1 to 5000, due to the \u003ca href=\"https://developer.github.com/v3/#rate-limiting\"\u003erate limitation\u003c/a\u003e of the GitHub API. eg:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"repo-1\nrepo-2\nrepo-3\nrepo-5000\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003erepo-1\nrepo-2\nrepo-3\n...\nrepo-5000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee a sample \u003ca href=\"https://github.com/L04DB4L4NC3R/gitcr./repos.txt\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003ch3 dir=\"auto\"\u003e\nExecution\u003c/h3\u003e\n\u003cp dir=\"auto\"\u003eTo run the scripts on any platform, replace \u003ccode\u003e{PATH}\u003c/code\u003e…\u003c/p\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/L04DB4L4NC3R/gitcr\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003ch3\u003e\n  \u003ca name=\"importing-functions\" href=\"#importing-functions\"\u003e\n  \u003c/a\u003e\n  Importing functions\n\u003c/h3\u003e\n\n\u003cp\u003eI wanted modularity in my code right off the bat. This meant breaking down my code into smaller files with smaller functions and then creating one entrypoint (CLI) for their execution. I had functions to \u003ccode\u003ecreate\u003c/code\u003e repositories in bulk, \u003ccode\u003edelete\u003c/code\u003e and \u003ccode\u003erevert\u003c/code\u003e creation in bulk as well. I also added a function to give out a neat little manual if someone hit \u003ccode\u003ehelp\u003c/code\u003e.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e├── functions\n│   ├── config.sh\n│   ├── create.sh\n│   ├── manual.sh\n│   └── revert.sh\n├── gitcr\n├── .env\n├── README.md\n└── repos.txt\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eI had to do 2 kinds of imports:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eImporting environment variables\u003c/li\u003e\n\u003cli\u003eImporting functions\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBoth of them can be achieved via a simple syntax:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# in gitcr\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003e.\u003c/span\u003e ./functions/config.sh\n\u003cspan class=\"nb\"\u003e.\u003c/span\u003e ./functions/create.sh\n\u003cspan class=\"nb\"\u003e.\u003c/span\u003e ./functions/manual.sh\n\u003cspan class=\"nb\"\u003e.\u003c/span\u003e ./functions/revert.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAll of the functions and exported variables in the included files can then be used directly in the main file. Note that I have used a \u003ccode\u003e.\u003c/code\u003e to import the aforementioned since it is recognized by \u003ccode\u003esh\u003c/code\u003e shell. You can also use the \u003ccode\u003esource\u003c/code\u003e keyword to include them in \u003cem\u003ebash\u003c/em\u003e but it is not recognized by \u003cem\u003esh\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\n  \u003ca name=\"echo-is-bad-at-json\" href=\"#echo-is-bad-at-json\"\u003e\n  \u003c/a\u003e\n  Echo is bad at JSON\n\u003c/h3\u003e\n\n\u003cp\u003eI wanted to write the output from every iteration to the console, or a \u003cem\u003eJSON\u003c/em\u003e file, as specified by the user. The first thought that hit my mind was to use the \u003ccode\u003eecho\u003c/code\u003e command and pipe it out to a file, or console. \u003cem\u003eecho\u003c/em\u003e is quite bad at that since it is not build for formatting JSON. Instead, I used \u003ccode\u003ejq\u003c/code\u003e for the same. So it looked like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--M1slARsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/enblxyi42su7k9hf3kjs.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--M1slARsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/enblxyi42su7k9hf3kjs.png\" alt=\"jq demo\" loading=\"lazy\" width=\"880\" height=\"328\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ejq\u003c/code\u003e took garbage formatting and parsed a completely formatted JSON out of it. This can then be piped to a file at will.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bk6w3YHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/jauard7euyelu68loj0h.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bk6w3YHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/jauard7euyelu68loj0h.png\" alt=\"echo + jq\" loading=\"lazy\" width=\"880\" height=\"851\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003ch3\u003e\n  \u003ca name=\"arrays-in-shell\" href=\"#arrays-in-shell\"\u003e\n  \u003c/a\u003e\n  Arrays in shell\n\u003c/h3\u003e\n\n\u003cp\u003eFor storing the JSON output in each iteration, I used an array. Arrays in shell can be declared and used in the following way:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003eresult \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"c\"\u003e# an empty array\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003eresult\u003c/span\u003e\u003cspan class=\"o\"\u003e=(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"abcd\"\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"c\"\u003e# an array with 0-th index = \"abcd\"\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e[0]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e \u003cspan class=\"c\"\u003e# printing out the index\u003c/span\u003e\n\nresult[1] \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"defg\"\u003c/span\u003e \u003cspan class=\"c\"\u003e# assigning value to an index\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e[@]\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e \u003cspan class=\"c\"\u003e# the '@' can be used for returning the whole array\u003c/span\u003e\n\nresult[\u003cspan class=\"nv\"\u003e$iterator\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e 2 \u003cspan class=\"c\"\u003e# variables can be used as indices.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNote that memory for arrays can not be pre-allocated in shell.\u003c/p\u003e\n\n\n\u003ch3\u003e\n  \u003ca name=\"checking-if-a-curl-request-succeeded\" href=\"#checking-if-a-curl-request-succeeded\"\u003e\n  \u003c/a\u003e\n  Checking if a curl request succeeded\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003ecurl\u003c/code\u003e command has a \u003ccode\u003e-i\u003c/code\u003e flag which prints out the request details such as the status code returned as well as the message. This can be extracted from the request and be used to check if the request actually succeeded or not. \u003c/p\u003e\n\n\u003cp\u003eThe following code returns the first line of information about the curl request.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ res\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e \u003cspan class=\"nt\"\u003e-XDELETE\u003c/span\u003e https://api.github.com/repos/\u003cspan class=\"nv\"\u003e$owner_name\u003c/span\u003e/\u003cspan class=\"nv\"\u003e$line\u003c/span\u003e \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Authorization: token \u003c/span\u003e\u003cspan class=\"nv\"\u003e$token\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e | \u003cspan class=\"nb\"\u003ehead\u003c/span\u003e \u003cspan class=\"nt\"\u003e-1\u003c/span\u003e \u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$res\u003c/span\u003e\nHTTP/1.1 401 Unauthorized\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eres\u003c/code\u003e variable can be broken down to get both the HTTP status code of the response, as well as its message, in the following way:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# To get the status code\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ code\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$res\u003c/span\u003e | \u003cspan class=\"nb\"\u003ecut\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e\u003cspan class=\"s2\"\u003e\" \"\u003c/span\u003e \u003cspan class=\"nt\"\u003e-f2\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e\n401\n\n\u003cspan class=\"c\"\u003e# To get the status code response\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$ status_of_res\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$res\u003c/span\u003e | \u003cspan class=\"nb\"\u003ecut\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e\u003cspan class=\"s2\"\u003e\" \"\u003c/span\u003e \u003cspan class=\"nt\"\u003e-f3-5\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$status_of_res\u003c/span\u003e\nUnauthorized\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qpb84rhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/3tkfr3io5uha0b7gi4fn.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qpb84rhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/3tkfr3io5uha0b7gi4fn.png\" alt=\"curl success\" loading=\"lazy\" width=\"649\" height=\"396\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNow what happened here? \u003c/p\u003e\n\n\u003cp\u003eNotice that the \u003ccode\u003ehead -1\u003c/code\u003e command returns the first line of text from any input. We took that first line and we did a split with \u003cem\u003espace\u003c/em\u003e as a delimiter, using the \u003ccode\u003ecut -d\" \" -f2\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e-f2\u003c/code\u003e flag means that we want the second token from the splitted string. Note that this numbering starts from 1 rather than 0. \u003ccode\u003ef3-5\u003c/code\u003e means that we want tokens from 3 to 5, since HTTP status code messages can be more than a word long and the sentence does not have any more words after that. \u003c/p\u003e\n\n\u003cp\u003eNow we can use the status code we got to check if the request succeeded. GitHub API gives a \u003cem\u003estatus 204\u003c/em\u003e after a \u003ccode\u003eDELETE\u003c/code\u003e request succeeds, so a simple check would look something like this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$code\u003c/span\u003e \u003cspan class=\"nt\"\u003e-eq\u003c/span\u003e 204 \u003cspan class=\"o\"\u003e]]\u003c/span\u003e\n\u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Request Succeeded\"\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse \n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Request Failed\"\u003c/span\u003e\n\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003ch3\u003e\n  \u003ca name=\"github-api-rate-limitation\" href=\"#github-api-rate-limitation\"\u003e\n  \u003c/a\u003e\n  GitHub API rate limitation\n\u003c/h3\u003e\n\n\u003cp\u003eGitHub API v3 has a rate limitation of about \u003ccode\u003e5000 requests\u003c/code\u003e per authenticated user and 60 requests per hour for unauthenticated users. Whenever a request is sent to the API, it returns the total rate limitation and the amount remaining for the user, in the form of response headers:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eX-RateLimit-Limit: 5000\nX-RateLimit-Remaining: 4998\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eSo if you are thinking about a bulk transaction application which uses the GitHub API, read more about rate limitation \u003ca href=\"https://developer.github.com/v3/#rate-limiting\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor me, adding the validation in the script was easy:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRead the number of repositories the user wants to create\u003c/li\u003e\n\u003cli\u003eIf the number is greater than 5000, then fail\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhich is easily programmable in the following way:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Read number of words in repos.txt\u003c/span\u003e\n\u003cspan class=\"nv\"\u003erepo_count\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"nb\"\u003ewc\u003c/span\u003e \u003cspan class=\"nt\"\u003e-w\u003c/span\u003e \u0026lt; repos.txt\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$repo_count\u003c/span\u003e \u003cspan class=\"nt\"\u003e-gt\u003c/span\u003e \u003cspan class=\"nv\"\u003e$GITHUB_MAX_REQUESTS\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"You are only allowed 5000 repos\"\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e1\n\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eA more pragmatic way would be to check the \u003ccode\u003eX-RateLimit-Remaining\u003c/code\u003e header by pinging the GitHub API and then deciding how many repositories can user create, which is also easily doable by text processing curl response headers.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003eremaining\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-i\u003c/span\u003e \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e \u003cspan class=\"nt\"\u003e-XDELETE\u003c/span\u003e https://api.github.com/repos/L04DB4L4NC3R/BOGUS_REPO \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Authorization: token \u003c/span\u003e\u003cspan class=\"nv\"\u003e$token\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eX-RateLimit-Remaining | \u003cspan class=\"nb\"\u003ehead\u003c/span\u003e \u003cspan class=\"nt\"\u003e-1\u003c/span\u003e | \u003cspan class=\"nb\"\u003ecut\u003c/span\u003e \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e\u003cspan class=\"s2\"\u003e\":\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e-f2\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eHere, \u003ccode\u003egrep\u003c/code\u003e searches for the \u003cem\u003eX-RateLimit-Remaining\u003c/em\u003e header, \u003ccode\u003ehead -1\u003c/code\u003e takes only the first sentence and \u003ccode\u003ecut -d\":\" -f2\u003c/code\u003e uses a colon delimiter to extract only the number out of the header key-value pair, which is then stored in a variable called \u003ccode\u003eremaining\u003c/code\u003e.\u003c/p\u003e\n\n\n\u003ch3\u003e\n  \u003ca name=\"switch-case-in-shell\" href=\"#switch-case-in-shell\"\u003e\n  \u003c/a\u003e\n  Switch Case in shell\n\u003c/h3\u003e\n\n\u003cp\u003eSwitch-case statements in shell have a very unique syntax:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ecli\u003cspan class=\"o\"\u003e(){\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"nv\"\u003e$1\u003c/span\u003e \u003cspan class=\"k\"\u003ein \n        \u003c/span\u003ecreate\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            create \u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e;;\u003c/span\u003e\n        revert\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n            revert \u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e;;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        helpFunc\n        \u003cspan class=\"p\"\u003e;;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eesac\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNotice the terminating word \u003ccode\u003eesac\u003c/code\u003e is actually the opposite of \u003ccode\u003ecase\u003c/code\u003e. This syntax was designed in a way to make programming of CLI applications easy. The \u003ccode\u003e)\u003c/code\u003e lexeme is used as a case statement and the \u003ccode\u003ecase\u003c/code\u003e keyword is used as a \u003cem\u003eswitch\u003c/em\u003e statement if you compare it to other programming languages. Wildcard \u003ccode\u003e*\u003c/code\u003e has been used to match the \u003ccode\u003edefault\u003c/code\u003e case in scenarios where the user enters something that is not handled by the CLI. \u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003erevert\u003c/code\u003e and \u003ccode\u003ehelpFunc\u003c/code\u003e are functions. In shell, functions are called without any parenthesis. Arguments can be passed to them by writing them in a space separated format after the function call. Interestingly, the \u003ccode\u003e$@\u003c/code\u003e is used to pass all of the arguments (that we got when we executed the CLI) to the functions that are being called.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e./gitcr create \u003cspan class=\"nt\"\u003e--out\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ejson\n\u003cspan class=\"c\"\u003e# $@ in the gitcr function = \"./gitcr\" \"create\" \"--out=json\"\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# When passed to the create function, it retains all of the \u003c/span\u003e\n\u003cspan class=\"c\"\u003e# original parameters\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003ch3\u003e\n  \u003ca name=\"cross-platform-execution\" href=\"#cross-platform-execution\"\u003e\n  \u003c/a\u003e\n  Cross platform execution\n\u003c/h3\u003e\n\n\u003cp\u003eOne of the challenges I faced while making this script was to make it \u003cbr\u003e\ncross-platform. Docker came to the rescue! You can use a \u003ccode\u003ebash\u003c/code\u003e container, which occupies only \u003cem\u003e15 MB\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--riJNN5i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/5res2x6lzc4evxpmp602.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--riJNN5i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/5res2x6lzc4evxpmp602.png\" alt=\"docker\" loading=\"lazy\" width=\"490\" height=\"352\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following steps can be used for a cross-platform CLI job:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse a \u003ca href=\"https://hub.docker.com/_/bash\"\u003ebash container\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eCopy all files that are not user defined\u003c/li\u003e\n\u003cli\u003eBuild an image and push to \u003ca href=\"https://hub.docker.com/\"\u003eDockerHub\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eDuring runtime, mount a volume which has user defined files\u003c/li\u003e\n\u003cli\u003eDelete the container after it has completed execution\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe Dockerfile looked like this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight docker\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e bash\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003eapk update \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e apk add curl \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e apk add jq\n\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e /usr/app/cli\n\n\u003cspan class=\"k\"\u003eWORKDIR\u003c/span\u003e\u003cspan class=\"s\"\u003e /usr/app/cli\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e\u003cspan class=\"s\"\u003e . . \u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eRUN \u003c/span\u003e\u003cspan class=\"nb\"\u003echmod\u003c/span\u003e +x gitcr\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eDuring runtime, the following command can be executed:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003edocker run \u003cspan class=\"nt\"\u003e--rm\u003c/span\u003e \u003cspan class=\"nt\"\u003e--mount\u003c/span\u003e \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003ebind\u003c/span\u003e,source\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"{PATH}\"\u003c/span\u003e,target\u003cspan class=\"o\"\u003e=\u003c/span\u003e/usr/app/cli/ angadsharma1016/gitcr \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"bash /usr/app/cli/gitcr create\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eWhat happened here?\u003c/p\u003e\n\n\u003cp\u003eThis command runs a container based off of a particular image, which has all of the code. During runtime, it takes in user defined files like \u003ccode\u003e.env\u003c/code\u003e and \u003ccode\u003erepos.txt\u003c/code\u003e as a volume mount inside the container and simply runs the CLI. Your system does not need to have bash and other tools installed. \u003c/p\u003e\n\n\n\u003ch3\u003e\n  \u003ca name=\"unofficial-bash-strict-mode\" href=\"#unofficial-bash-strict-mode\"\u003e\n  \u003c/a\u003e\n  Unofficial bash strict mode\n\u003c/h3\u003e\n\n\u003cp\u003eAlways start your bash scripts with the following lines:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"nt\"\u003e-euo\u003c/span\u003e pipefail\n\u003cspan class=\"nv\"\u003eIFS\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e$'\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\\t\u003c/span\u003e\u003cspan class=\"s1\"\u003e'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIt means the following things:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eset -e\u003c/code\u003e: Exit script if any of the commands throw a return code 1\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eset u\u003c/code\u003e: Any undeclared variable referenced will result in an error\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eset -o pipefail\u003c/code\u003e: Commands in pipes won't fail silently\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eIFS\u003c/code\u003e: \u003cem\u003eInternal Field Separator\u003c/em\u003e controls what bash calls a word\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf followed, the unofficial bash strict mode can save hours of debugging time. Read more it \u003ca href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\n  \u003ca name=\"conclusion\" href=\"#conclusion\"\u003e\n  \u003c/a\u003e\n  Conclusion\n\u003c/h2\u003e\n\n\u003cp\u003eOne night of hacking away at my \u003cem\u003ezsh\u003c/em\u003e and trying to act like I know what I am doing taught me a lot about how to actually write useful scripts that automate a lot of work that you either have to do stat, or will have to do in the near future. It's always better to take some time off the task at hand to actually figure out a better solution to do the said task sustainably in the future. \u003c/p\u003e\n\n\u003cp\u003eDon't mind writing code or working on tools that other people have worked on before, as long as it is for your own personal learning (or rolling out a product better than market alternatives). Stay hungry and stay foolish!\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "7-things-i-learnt-from-a-script-for-repository-creation-4cbk",
		"social_image": null,
		"title": "8 things I learnt from a script for repository creation",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-02-07T05:33:50.661Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2017-01-01T05:00:00.000Z",
		"published_at": null,
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "Exam time is extremely stressful. Especially when you are spending all of your time preparing your perfect `vim` configuration rather than studying for the math monolith looming over your head. Well now you can do both of the things at once!\n\n\n{% github SpaceVim/SpaceVim %}\n\n\n\n### What I started off with\n\nI started my development journey, like most people do, with a minimal IDE, called [atom](). I soon learnt that [VSCode]() was all of the buzz, and I caught that fad pretty early on. I was amazed at the wide array of extentions that VSCode had to offer. From VCS to advanced debugging tools, and more.\n\n\n### Why I decided to drop VSCode \n\n* I had to depend on the mouse for navigation to an extent, even with vim bindings.\n\n* There was no real feeling of personal satisfaction when everything was handed over in a plate (personal choice).\n\n* I wanted something fast and cheap (on memory, because electronJS). \n\n* I did a lot of development on remote servers, which didn't have VSCode at that time (now we have [VSCodium]().\n\n\n### Journey to the center of vim\n\nDuring the same time, I got interested in DevOps, and so felt a natural pull towards terminal based editors. Emacs felt too intimidating, so the natural course took me to vim.\n\n\nI was amazed at the world of opportunities that vim created for me. From granular customization to fast versatility. I couldn't get enough of setting up my own `.vimrc`. Now at the same time, I had my semester finals (which obviously didn't go too well).\n\nAs my exams ended (along with a part of me), I figured out my perfect build. It included the following vim plugins:\n\n\n* [vim-go](https://github.com/fatih/vim-go.git)\n* [ctrlp.vim](https://github.com/kien/ctrlp.vim.git)\n* [airline](https://github.com/vim-airline/vim-airline.git)\n* [emmet-vim](https://github.com/mattn/emmet-vim.git)\n* [vim-fugitive](https://github.com/tpope/vim-fugitive.git)\n* [nerdtree](https://github.com/scrooloose/nerdtree.git)\n* [vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors.git)\n* [YouCompleteMe](https://github.com/ycm-core/YouCompleteMe.git)\n* [vim-yaml](https://github.com/stephpy/vim-yaml.git)\n* [lightline.vim](https://github.com/itchyny/lightline.vim.git)\n* [pathogen](https://github.com/tpope/vim-pathogen.git)\n\nAnd the following terminal tools (yes, I shifted to `zsh`):\n\n\n* [Oh my zsh](https://github.com/robbyrussell/oh-my-zsh.git)\n* [terminator config](https://www.systutorials.com/docs/linux/man/5-terminator_config/)\n* [zsh plugins](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins)\n* [shell themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n\nSo my environment started looking pretty neat:\n\n![image](https://user-images.githubusercontent.com/30529572/60173214-dd942500-982b-11e9-8741-e867f2bbce70.png)\n\n\n### Scaling the learning curve\n\nI had the perfect setup I wanted for development and operations. It was fast, highly customizable, and intuitive. But still there was something missing. I still hadn't memorized the vim shortcuts, and had a lot of trouble staying away from the mouse while working. Trouble in paradise!\n\nDuring this time, I would occasionally switch between VSCode and vim in order to boost productivity, although it was doing more harm than good. I followed the following guidelines which helped me be 2X more productive in vim that I ever was in VSCode:\n\n* **Restrict yourself**: Unplug your mouse, close all other editors, and no matter how slow you type, keep grinding. I was a back-end intern at [atlan]() during this time and I didn't even install any other editor on my work computer other than vim itself. The first week was tough, but I soon got the hang of it and subsequently became quite productive.\n\n* **Understand rather than memorize**: In vim, all of the key bindings have a reason to be there. Understand the meaning of the commands that you are typing in. Vim will soon sound like a poem to you. For example: `w` means \"word\" in vim and `c` means change. Doing a `c + i + w` over a word in vim essentially means `change in word`. \n\n* **Do what works for you**: Do you want to change the key bindings? Sure, go ahead! Want to change the fonts, tab/spaces? Knock yourself out! Want to change how tiling works in vim? The world is your oyster! In the end it is about productivity above all else. Never be afraid to seek help from others. Vim has a great community and you can learn a lot by simply watching the vim conference screencasts on YouTube.\n\n\n### So why I left vim..\n",
		"cached_tag_list": "vim, linux, productivity, opensource",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Exam time is extremely stressful. Especially when you are spending all of your time preparing your pe...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--lqeNFUOw--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/riftfmczzblersyh0czb.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-spacevim-is-switching-worth-it-2an4-temp-slug-5896568",
		"public_reactions_count": 0,
		"processed_html": "\u003cp\u003eExam time is extremely stressful. Especially when you are spending all of your time preparing your perfect \u003ccode\u003evim\u003c/code\u003e configuration rather than studying for the math monolith looming over your head. Well now you can do both of the things at once!\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/SpaceVim\"\u003e\n        SpaceVim\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/SpaceVim/SpaceVim\"\u003e\n        SpaceVim\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A community-driven modular vim/neovim distribution - The ultimate vimrc\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ca href=\"https://spacevim.org\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/6ee52ffc9db0bd1bd5514f8523a7da1ba319fb40338750f3ffd3159d2e50fc29/68747470733a2f2f737061636576696d2e6f72672f6c6f676f2e706e67\" alt=\"SpaceVim\" data-canonical-src=\"https://spacevim.org/logo.png\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/SpaceVim/SpaceVim/wiki\"\u003eWiki\u003c/a\u003e |\n\u003ca href=\"https://spacevim.org/community/\" rel=\"nofollow\"\u003eCommunity\u003c/a\u003e |\n\u003ca href=\"https://spacevim.org/sponsors/\" rel=\"nofollow\"\u003eSponsors\u003c/a\u003e |\n\u003ca href=\"https://twitter.com/SpaceVim\" rel=\"nofollow\"\u003eTwitter\u003c/a\u003e |\n\u003ca href=\"https://spacevim.org/cn/\" rel=\"nofollow\"\u003e中文官网\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://gitter.im/SpaceVim/SpaceVim\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/91709d5e307c3ba93e82b68082ccdf5a5b9b3b624016ca3505ef2b2973b7dc7f/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f537061636556696d2f537061636556696d3f636f6c6f723d253233363443454141\" alt=\"Gitter\" data-canonical-src=\"https://img.shields.io/gitter/room/SpaceVim/SpaceVim?color=%2364CEAA\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/SpaceVim/SpaceVim/actions/workflows/check.yml?query=branch%3Amaster\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/55059c32eb391c5de0ff0bdac6a9558f0bd709f0b13f4fbd22523c9d9d773573/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f537061636556696d2f537061636556696d2f74657374\" alt=\"build\" data-canonical-src=\"https://img.shields.io/github/workflow/status/SpaceVim/SpaceVim/test\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://codecov.io/gh/SpaceVim/SpaceVim\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/497a82cba0d6f4f484bb45d613e1ab91635a1bf58f03a4009fa9c7b625f5527f/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f537061636556696d2f537061636556696d2e737667\" alt=\"Codecov coverage\" data-canonical-src=\"https://img.shields.io/codecov/c/github/SpaceVim/SpaceVim.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/SpaceVim/SpaceVim/releases\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/5b624ef740d77a1718902cff55fce85a636b56eb0df234acc11bc11055338291/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d322e302e302d2d6465762d3837303046462e737667\" alt=\"Version\" data-canonical-src=\"https://img.shields.io/badge/version-2.0.0--dev-8700FF.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/SpaceVim/SpaceVim/blob/master/LICENSE\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/0b6758422f85bc2599288b346c7de30c6b7b217112c0a877ae4b25a7009722e4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c76332d626c75652e737667\" alt=\"GPLv3 License\" data-canonical-src=\"https://img.shields.io/badge/license-GPLv3-blue.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://hub.docker.com/r/spacevim/spacevim\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/5035a8a8c2521a97147f3e375769f106483a1a8906e39b0b85c3310fb9574b2d/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f737061636576696d2f737061636576696d\" alt=\"Docker Pulls\" data-canonical-src=\"https://img.shields.io/docker/pulls/spacevim/spacevim\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/13142418/148374827-5f7aeaaa-e69b-441e-b872-408b47f4da04.png\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--KHNYqwmp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/13142418/148374827-5f7aeaaa-e69b-441e-b872-408b47f4da04.png\" alt=\"welcome page\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://spacevim.org/\" rel=\"nofollow\"\u003eSpaceVim\u003c/a\u003e is a community-driven modular Vim distribution. It manages collections\nof plugins in layers, which help to collect related packages together to provide IDE-like features.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe last release is \u003ca href=\"https://spacevim.org/SpaceVim-release-v1.9.0/\" rel=\"nofollow\"\u003ev1.9.0\u003c/a\u003e, check out \u003ca href=\"https://github.com/SpaceVim/SpaceVim/wiki/Following-HEAD\"\u003efollowing-HEAD\u003c/a\u003e page for what happened since last release.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eSee the following links below for more information:\u003c/strong\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003ca href=\"https://spacevim.org/quick-start-guide/\" rel=\"nofollow\"\u003eQuick Start Guide\u003c/a\u003e: A simple guide for Beginners.\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://spacevim.org/documentation/\" rel=\"nofollow\"\u003eDocumentation\u003c/a\u003e: The full documentation about using SpaceVim.\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://spacevim.org/layers/\" rel=\"nofollow\"\u003eAvailable Layers\u003c/a\u003e: A list of all available layers included in SpaceVim.\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://spacevim.org/faq/\" rel=\"nofollow\"\u003eFAQ\u003c/a\u003e: The most asked questions about SpaceVim.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 dir=\"auto\"\u003e\nSupport SpaceVim\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eThis project wouldn't exist without all the people who \u003ca href=\"https://github.com/SpaceVim/SpaceVimCONTRIBUTING.md\"\u003econtributed\u003c/a\u003e\nWe are thankful for any contributions from the community.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/SpaceVim/SpaceVim/graphs/contributors\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/ff524ba89784ac66820df6dd8733ae7f153bfda1d52069a24a8aeeb6c2cfaf04/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f737061636576696d2f636f6e7472696275746f72732e7376673f77696474683d38393026627574746f6e3d66616c7365\" data-canonical-src=\"https://opencollective.com/spacevim/contributors.svg?width=890\u0026amp;button=false\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe best way to support SpaceVim is to contribute to it either by reporting bugs, helping the community on the \u003ca href=\"https://gitter.im/SpaceVim/SpaceVim\" rel=\"nofollow\"\u003eGitter Chat\u003c/a\u003e, or sending pull requests.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor more information please check our…\u003c/p\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/SpaceVim/SpaceVim\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003ch3\u003e\n  \u003ca name=\"what-i-started-off-with\" href=\"#what-i-started-off-with\"\u003e\n  \u003c/a\u003e\n  What I started off with\n\u003c/h3\u003e\n\n\u003cp\u003eI started my development journey, like most people do, with a minimal IDE, called \u003ca href=\"\"\u003eatom\u003c/a\u003e. I soon learnt that \u003ca href=\"\"\u003eVSCode\u003c/a\u003e was all of the buzz, and I caught that fad pretty early on. I was amazed at the wide array of extentions that VSCode had to offer. From VCS to advanced debugging tools, and more.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"why-i-decided-to-drop-vscode\" href=\"#why-i-decided-to-drop-vscode\"\u003e\n  \u003c/a\u003e\n  Why I decided to drop VSCode\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eI had to depend on the mouse for navigation to an extent, even with vim bindings.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThere was no real feeling of personal satisfaction when everything was handed over in a plate (personal choice).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eI wanted something fast and cheap (on memory, because electronJS). \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eI did a lot of development on remote servers, which didn't have VSCode at that time (now we have \u003ca href=\"\"\u003eVSCodium\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"journey-to-the-center-of-vim\" href=\"#journey-to-the-center-of-vim\"\u003e\n  \u003c/a\u003e\n  Journey to the center of vim\n\u003c/h3\u003e\n\n\u003cp\u003eDuring the same time, I got interested in DevOps, and so felt a natural pull towards terminal based editors. Emacs felt too intimidating, so the natural course took me to vim.\u003c/p\u003e\n\n\u003cp\u003eI was amazed at the world of opportunities that vim created for me. From granular customization to fast versatility. I couldn't get enough of setting up my own \u003ccode\u003e.vimrc\u003c/code\u003e. Now at the same time, I had my semester finals (which obviously didn't go too well).\u003c/p\u003e\n\n\u003cp\u003eAs my exams ended (along with a part of me), I figured out my perfect build. It included the following vim plugins:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/fatih/vim-go.git\"\u003evim-go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kien/ctrlp.vim.git\"\u003ectrlp.vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vim-airline/vim-airline.git\"\u003eairline\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mattn/emmet-vim.git\"\u003eemmet-vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tpope/vim-fugitive.git\"\u003evim-fugitive\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/scrooloose/nerdtree.git\"\u003enerdtree\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/terryma/vim-multiple-cursors.git\"\u003evim-multiple-cursors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ycm-core/YouCompleteMe.git\"\u003eYouCompleteMe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/stephpy/vim-yaml.git\"\u003evim-yaml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/itchyny/lightline.vim.git\"\u003elightline.vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tpope/vim-pathogen.git\"\u003epathogen\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd the following terminal tools (yes, I shifted to \u003ccode\u003ezsh\u003c/code\u003e):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh.git\"\u003eOh my zsh\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.systutorials.com/docs/linux/man/5-terminator_config/\"\u003eterminator config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\"\u003ezsh plugins\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\"\u003eshell themes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo my environment started looking pretty neat:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--r1R_rR3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/30529572/60173214-dd942500-982b-11e9-8741-e867f2bbce70.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--r1R_rR3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/30529572/60173214-dd942500-982b-11e9-8741-e867f2bbce70.png\" alt=\"image\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"scaling-the-learning-curve\" href=\"#scaling-the-learning-curve\"\u003e\n  \u003c/a\u003e\n  Scaling the learning curve\n\u003c/h3\u003e\n\n\u003cp\u003eI had the perfect setup I wanted for development and operations. It was fast, highly customizable, and intuitive. But still there was something missing. I still hadn't memorized the vim shortcuts, and had a lot of trouble staying away from the mouse while working. Trouble in paradise!\u003c/p\u003e\n\n\u003cp\u003eDuring this time, I would occasionally switch between VSCode and vim in order to boost productivity, although it was doing more harm than good. I followed the following guidelines which helped me be 2X more productive in vim that I ever was in VSCode:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eRestrict yourself\u003c/strong\u003e: Unplug your mouse, close all other editors, and no matter how slow you type, keep grinding. I was a back-end intern at \u003ca href=\"\"\u003eatlan\u003c/a\u003e during this time and I didn't even install any other editor on my work computer other than vim itself. The first week was tough, but I soon got the hang of it and subsequently became quite productive.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eUnderstand rather than memorize\u003c/strong\u003e: In vim, all of the key bindings have a reason to be there. Understand the meaning of the commands that you are typing in. Vim will soon sound like a poem to you. For example: \u003ccode\u003ew\u003c/code\u003e means \"word\" in vim and \u003ccode\u003ec\u003c/code\u003e means change. Doing a \u003ccode\u003ec + i + w\u003c/code\u003e over a word in vim essentially means \u003ccode\u003echange in word\u003c/code\u003e. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eDo what works for you\u003c/strong\u003e: Do you want to change the key bindings? Sure, go ahead! Want to change the fonts, tab/spaces? Knock yourself out! Want to change how tiling works in vim? The world is your oyster! In the end it is about productivity above all else. Never be afraid to seek help from others. Vim has a great community and you can learn a lot by simply watching the vim conference screencasts on YouTube.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"so-why-i-left-vim\" href=\"#so-why-i-left-vim\"\u003e\n  \u003c/a\u003e\n  So why I left vim..\n\u003c/h3\u003e\n\n",
		"published": false,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-spacevim-is-switching-worth-it-2an4-temp-slug-5896568",
		"social_image": null,
		"title": "VSCode to SpaceVim: A Journey",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-04T03:58:35.725Z",
		"crossposted_at": null,
		"edited_at": "2020-04-15T10:21:04.579Z",
		"last_comment_at": "2020-09-23T17:26:24.320Z",
		"published_at": "2020-04-04T07:06:34.352Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "\u003e Linux has definitely made a lot of sense even in a purely materialistic sense.\n\u003e - Linus Torvalds\n\nIn a world where existing software design practices led to monolithic mayhem, especially in the case of kernels and operating systems, the Linux community came up with software designed like a castle built out of lego. \n\nTo me, the best part of Linux is its unique form of _simple complexity_ and _complex simplicity_ in the form of customizability. Everything about Linux is modular and user-centric. The cogs work together like a well-oiled machine. It never ceases to amazes me. \n\nThe Linux desktop environment is one such pluggable GUI layer in a vast expanse of sedimentation. It feels like a system that truly cares about the freedom of its users. Like a hive mind with individuality. This is what has motivated me to do a series of \"window manager hopping\".\n\nA typical Linux desktop is composed of the following moving parts:\n\n* [Display Manager](#display-manager)\n* [Window System](#window-system)\n* [Window Manager](#window-manager) \n* [Desktop Environment](#desktop-environment)\n\nA typical hierarchy looks like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/oojld2xuel4fa4272ktj.png)\n\nBefore getting into each and every component, let us look at what a linux system looks like without any graphical user interface. \n\nWhen a linux machine is booted, it spawns 8 *ttys* by default. TTY essentially means a terminal console without any GUI. You can access these consoles by pressing `\u003cCtrl\u003e + \u003cAlt\u003e + [1-8]`. For example, pressing `\u003cCtrl\u003e + \u003cAlt\u003e + 1` will show the following screen:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/79kyltkcuoh10e0xafjc.png)\n\nThe 7th tty actually loads the GUI with the **display manager** which we will get to in the next section. \n\n---\n\n### Display Manager\n\nA display manager (also called login manager) is loaded after the end of the boot procedure in linux. It loads up an authentication screen, much like telnet, which prompts for the username and password. Its primary function is to handle authentication, and manage user session. It also loads the window system configured for the machine and it does so by running a **.xsession** script, which is used to setup initial clients (we will get to what an X Client is in the following section).\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/4y5jx2fczcxumeu5yzv7.jpg)\n\nSome examples include **lightdm**, which comes out of the shelf for many linux systems and is easily one of the most versatile display managers out there. Some others include **gdm**, which is the display manager for gnome, and **xdm** for X11 (which we will get to shortly). \n\nThe best part about a display manager is that you don't have to roll with the one which is pre-installed on your system. Running a new *DM* is as easy as running the following commands:\n\n```\nsudo systemctl disable gdm\nsudo apt install lightdm\nsudo systemctl enable lightdm\n```\n\nThe second best part about a *DM* is its customizability. Anything can be customized, from the colour to the greeter screen. For example, to customize a lightdm login manager, you need to edit `/etc/lightdm/lightdm.conf`. \n\nTo see your default display manager, simply run the following command:\n\n```\ncat /etc/X11/default-display-manager\n```\n\n---\n\n### Window System\n\nA window system is the heart and soul of GUI in linux. It determines what needs to be drawn on the screen and how. In this particular blog, we are going to be talking about the most popular window system: **X Window System**, also called **X** or **X11**, which is the name I am going to use henceforth. \n\nX11 uses a network approach to GUI in linux. It consists of the following elements:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/4uxt4xt8uij4v6z2hsqh.png)\n\n* `X Server`: It is a program that interacts with the hardware and controls display to draw boxes and buttons. Each X Server is made for a specific video card (it has hardware dependency). Note that X11 has a flipped view of the client-server architecture. Typically a server runs remotely in such an architecture, but in X11 the server actually runs on the host machine.\n\n* `X Client`: It is a program which uses the X Server to display itself on a specific screen, eg: xclock, xterm, xcalc. The best part about X11, which revolutionized how people think about GUI, is that the X Client and Server do not need to be on the same machine. What it essentially means is that I can send commands from my machine to display a particular program in a different machine, and vice versa. How cool is that!\n\n* `Window Manager`: We will get to *WMs* in the next section.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/m1r6frr7nw17gtpnjar4.GIF)\n\nBoth the X Client and the X Server speak a common tongue, and communicate to each other using the X protocol. The connection string looks something like this:\n\n```\nhostname:displaynumber:screennumber\n```\n\n* `Host Name`: Name of the physically connected machine (display). If this part is left empty, then it defaults to the current machine. Host name can be a machine's node name, IP address, or blank.\n\n* `Display Number`: There might be a lot of displays connected to a particular device. This field specifies which display to connect to.\n\n* `Screen Number`: Every single monitor has multiple windows. This field represents which window to display to.  \n\nThis connection string is stored in `DISPLAY` environment variable in linux, and to view which display you are outputting to, simply run the following command:\n\n```\necho $DISPLAY\n```\n\nTo start the GUI on a minimalist *tty*, simply run the following command in the terminal:\n\n```\nstartx\n```\nThis command is part of the `xinit` tool which specializes in initializing X11. If you don't already have it, you can always run the following command to install it:\n\n```\nsudo apt install xinit\n``` \n\n--- \n\n### Window Manager\n\nA window manager is a special client application which controls the geometry, appearance, coordinates and graphical properties of X display. It is also responsible for re-shuffling and re-sizing windows in a stack. Some of the popular window managers are: dwm, i3, herbstluftwm, awesome, openbox etc. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/nuiy52p82wj87kjtbgac.jpg)\n\nA window manager also provides client side decorations, such as title-bars, buttons etc. Note that a lot of *gtk* applications have inbuilt client side decorations, and thus do not need window managers (eg: firefox, gedit). \n\nThe linux community has developed a lot of standalone *WMs* over the years. More and more are leaving full desktop environments and shifting to window managers for the following reasons:\n\n* Less bloated, and packed with the bare essentials\n* Faster and hence more productive\n* Highly customizable \n\nSwitching window managers is as easy as executing the following commands:\n\n```\nsudo apt install dwm\necho \"exec dwm\" \u003e ~/.xsession\n```\n\nAs mentioned earlier, the display manager runs the `.xsession` script. Adding `exec dwm` command in the aforementioned script indicated the *DM* to run the dwm window manager immediately after login. \n\n---\n\n### Desktop Environment\n\nA desktop environment can easily be called a superset of a window manager. In fact it is a bundled GUI which has a lot of features in addition to a *WM*, including wallpapers, toolbar, icons and desktop widgets. It is a full fledged graphic user interface. Some examples include gnome, XFCE, KDE etc. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/mb41j4yzw0u6xef5jdo2.png)\n\n---\n\n### Conclusion\n\nThis blog was a deep dive into how Window Systems and Managers work, and how you see the GUI that you have grown to love. In the subsequent parts of the series, I will be trying out various window managers and talking about the following:\n\n* *WM* Features\n* Installation and set up\n* Functionality in action\n* Verdict\n\nIf you want me to include some additional study metrics or want to suggest a window manager, do comment. Stay tuned for the upcoming parts :v:. \n",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 37,
		"description": "Linux has definitely made a lot of sense even in a purely materialistic sense.   Linus Torvalds    I...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/od5ure9kbixnt95o7do7.jpg",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/the-linux-desktop-deep-dive-1jh3",
		"public_reactions_count": 515,
		"processed_html": "\u003cblockquote\u003e\n\u003cp\u003eLinux has definitely made a lot of sense even in a purely materialistic sense.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLinus Torvalds\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn a world where existing software design practices led to monolithic mayhem, especially in the case of kernels and operating systems, the Linux community came up with software designed like a castle built out of lego. \u003c/p\u003e\n\n\u003cp\u003eTo me, the best part of Linux is its unique form of \u003cem\u003esimple complexity\u003c/em\u003e and \u003cem\u003ecomplex simplicity\u003c/em\u003e in the form of customizability. Everything about Linux is modular and user-centric. The cogs work together like a well-oiled machine. It never ceases to amazes me. \u003c/p\u003e\n\n\u003cp\u003eThe Linux desktop environment is one such pluggable GUI layer in a vast expanse of sedimentation. It feels like a system that truly cares about the freedom of its users. Like a hive mind with individuality. This is what has motivated me to do a series of \"window manager hopping\".\u003c/p\u003e\n\n\u003cp\u003eA typical Linux desktop is composed of the following moving parts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#display-manager\"\u003eDisplay Manager\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#window-system\"\u003eWindow System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#window-manager\"\u003eWindow Manager\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#desktop-environment\"\u003eDesktop Environment\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA typical hierarchy looks like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--m_UTERHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oojld2xuel4fa4272ktj.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--m_UTERHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oojld2xuel4fa4272ktj.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"571\" height=\"351\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eBefore getting into each and every component, let us look at what a linux system looks like without any graphical user interface. \u003c/p\u003e\n\n\u003cp\u003eWhen a linux machine is booted, it spawns 8 \u003cem\u003ettys\u003c/em\u003e by default. TTY essentially means a terminal console without any GUI. You can access these consoles by pressing \u003ccode\u003e\u0026lt;Ctrl\u0026gt; + \u0026lt;Alt\u0026gt; + [1-8]\u003c/code\u003e. For example, pressing \u003ccode\u003e\u0026lt;Ctrl\u0026gt; + \u0026lt;Alt\u0026gt; + 1\u003c/code\u003e will show the following screen:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tHE1LV0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/79kyltkcuoh10e0xafjc.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tHE1LV0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/79kyltkcuoh10e0xafjc.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"800\" height=\"593\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe 7th tty actually loads the GUI with the \u003cstrong\u003edisplay manager\u003c/strong\u003e which we will get to in the next section. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"display-manager\" href=\"#display-manager\"\u003e\n  \u003c/a\u003e\n  Display Manager\n\u003c/h3\u003e\n\n\u003cp\u003eA display manager (also called login manager) is loaded after the end of the boot procedure in linux. It loads up an authentication screen, much like telnet, which prompts for the username and password. Its primary function is to handle authentication, and manage user session. It also loads the window system configured for the machine and it does so by running a \u003cstrong\u003e.xsession\u003c/strong\u003e script, which is used to setup initial clients (we will get to what an X Client is in the following section).\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--24jh3G_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4y5jx2fczcxumeu5yzv7.jpg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--24jh3G_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4y5jx2fczcxumeu5yzv7.jpg\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSome examples include \u003cstrong\u003elightdm\u003c/strong\u003e, which comes out of the shelf for many linux systems and is easily one of the most versatile display managers out there. Some others include \u003cstrong\u003egdm\u003c/strong\u003e, which is the display manager for gnome, and \u003cstrong\u003exdm\u003c/strong\u003e for X11 (which we will get to shortly). \u003c/p\u003e\n\n\u003cp\u003eThe best part about a display manager is that you don't have to roll with the one which is pre-installed on your system. Running a new \u003cem\u003eDM\u003c/em\u003e is as easy as running the following commands:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esudo systemctl disable gdm\nsudo apt install lightdm\nsudo systemctl enable lightdm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe second best part about a \u003cem\u003eDM\u003c/em\u003e is its customizability. Anything can be customized, from the colour to the greeter screen. For example, to customize a lightdm login manager, you need to edit \u003ccode\u003e/etc/lightdm/lightdm.conf\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eTo see your default display manager, simply run the following command:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ecat /etc/X11/default-display-manager\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"window-system\" href=\"#window-system\"\u003e\n  \u003c/a\u003e\n  Window System\n\u003c/h3\u003e\n\n\u003cp\u003eA window system is the heart and soul of GUI in linux. It determines what needs to be drawn on the screen and how. In this particular blog, we are going to be talking about the most popular window system: \u003cstrong\u003eX Window System\u003c/strong\u003e, also called \u003cstrong\u003eX\u003c/strong\u003e or \u003cstrong\u003eX11\u003c/strong\u003e, which is the name I am going to use henceforth. \u003c/p\u003e\n\n\u003cp\u003eX11 uses a network approach to GUI in linux. It consists of the following elements:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SavwmSAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4uxt4xt8uij4v6z2hsqh.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SavwmSAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4uxt4xt8uij4v6z2hsqh.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"220\" height=\"371\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eX Server\u003c/code\u003e: It is a program that interacts with the hardware and controls display to draw boxes and buttons. Each X Server is made for a specific video card (it has hardware dependency). Note that X11 has a flipped view of the client-server architecture. Typically a server runs remotely in such an architecture, but in X11 the server actually runs on the host machine.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eX Client\u003c/code\u003e: It is a program which uses the X Server to display itself on a specific screen, eg: xclock, xterm, xcalc. The best part about X11, which revolutionized how people think about GUI, is that the X Client and Server do not need to be on the same machine. What it essentially means is that I can send commands from my machine to display a particular program in a different machine, and vice versa. How cool is that!\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eWindow Manager\u003c/code\u003e: We will get to \u003cem\u003eWMs\u003c/em\u003e in the next section.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yuePAKs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m1r6frr7nw17gtpnjar4.GIF\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yuePAKs_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m1r6frr7nw17gtpnjar4.GIF\" alt=\"Alt Text\" loading=\"lazy\" width=\"385\" height=\"304\" data-animated=\"true\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eBoth the X Client and the X Server speak a common tongue, and communicate to each other using the X protocol. The connection string looks something like this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehostname:displaynumber:screennumber\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eHost Name\u003c/code\u003e: Name of the physically connected machine (display). If this part is left empty, then it defaults to the current machine. Host name can be a machine's node name, IP address, or blank.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eDisplay Number\u003c/code\u003e: There might be a lot of displays connected to a particular device. This field specifies which display to connect to.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eScreen Number\u003c/code\u003e: Every single monitor has multiple windows. This field represents which window to display to.  \u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis connection string is stored in \u003ccode\u003eDISPLAY\u003c/code\u003e environment variable in linux, and to view which display you are outputting to, simply run the following command:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eecho $DISPLAY\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eTo start the GUI on a minimalist \u003cem\u003etty\u003c/em\u003e, simply run the following command in the terminal:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estartx\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis command is part of the \u003ccode\u003exinit\u003c/code\u003e tool which specializes in initializing X11. If you don't already have it, you can always run the following command to install it:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esudo apt install xinit\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"window-manager\" href=\"#window-manager\"\u003e\n  \u003c/a\u003e\n  Window Manager\n\u003c/h3\u003e\n\n\u003cp\u003eA window manager is a special client application which controls the geometry, appearance, coordinates and graphical properties of X display. It is also responsible for re-shuffling and re-sizing windows in a stack. Some of the popular window managers are: dwm, i3, herbstluftwm, awesome, openbox etc. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ID1e19Du--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nuiy52p82wj87kjtbgac.jpg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ID1e19Du--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nuiy52p82wj87kjtbgac.jpg\" alt=\"Alt Text\" loading=\"lazy\" width=\"720\" height=\"375\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eA window manager also provides client side decorations, such as title-bars, buttons etc. Note that a lot of \u003cem\u003egtk\u003c/em\u003e applications have inbuilt client side decorations, and thus do not need window managers (eg: firefox, gedit). \u003c/p\u003e\n\n\u003cp\u003eThe linux community has developed a lot of standalone \u003cem\u003eWMs\u003c/em\u003e over the years. More and more are leaving full desktop environments and shifting to window managers for the following reasons:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLess bloated, and packed with the bare essentials\u003c/li\u003e\n\u003cli\u003eFaster and hence more productive\u003c/li\u003e\n\u003cli\u003eHighly customizable \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSwitching window managers is as easy as executing the following commands:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esudo apt install dwm\necho \"exec dwm\" \u0026gt; ~/.xsession\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAs mentioned earlier, the display manager runs the \u003ccode\u003e.xsession\u003c/code\u003e script. Adding \u003ccode\u003eexec dwm\u003c/code\u003e command in the aforementioned script indicated the \u003cem\u003eDM\u003c/em\u003e to run the dwm window manager immediately after login. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"desktop-environment\" href=\"#desktop-environment\"\u003e\n  \u003c/a\u003e\n  Desktop Environment\n\u003c/h3\u003e\n\n\u003cp\u003eA desktop environment can easily be called a superset of a window manager. In fact it is a bundled GUI which has a lot of features in addition to a \u003cem\u003eWM\u003c/em\u003e, including wallpapers, toolbar, icons and desktop widgets. It is a full fledged graphic user interface. Some examples include gnome, XFCE, KDE etc. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iTTOyktI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mb41j4yzw0u6xef5jdo2.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iTTOyktI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mb41j4yzw0u6xef5jdo2.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"473\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"conclusion\" href=\"#conclusion\"\u003e\n  \u003c/a\u003e\n  Conclusion\n\u003c/h3\u003e\n\n\u003cp\u003eThis blog was a deep dive into how Window Systems and Managers work, and how you see the GUI that you have grown to love. In the subsequent parts of the series, I will be trying out various window managers and talking about the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eWM\u003c/em\u003e Features\u003c/li\u003e\n\u003cli\u003eInstallation and set up\u003c/li\u003e\n\u003cli\u003eFunctionality in action\u003c/li\u003e\n\u003cli\u003eVerdict\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you want me to include some additional study metrics or want to suggest a window manager, do comment. Stay tuned for the upcoming parts ✌️. \u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "the-linux-desktop-deep-dive-1jh3",
		"social_image": null,
		"title": "The Linux Desktop Deep Dive",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-04T07:12:30.265Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-09-01T15:31:44.345Z",
		"published_at": "2020-04-05T12:28:16.786Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "Herbs.....what? How do you even begin to pronounce this window manager? After some digging, it is apparently pronounced as the following: *herbs + laugh + umm*. And this is the version that makes the most sense! As to why it is named so:\n\n\u003e I liked the name of the e-mail client wanderlust. Unfortunately I am a happy mutt user, so I needed an other application with a similar name.\n\u003e - the creator of herbstluftwm\n\nNevertheless, herbstluftwm is one of the easier window managers to get started with. The following is an index to help you navigate this blog easier:\n\n* [Features](#features)\n* [Setting up](#setting-up)\n* [Getting started](#getting-started)\n* [Tags](#tags)\n* [Windows](#windows)\n* [Herbstclient](#herbstclient)\n* [Configuration](#configuration)\n* [Verdict](#verdict)\n* [References](#references)\n\n---\n\n### Features\n\n* It is made for X11.\n* The layout is based on splitting frames to sub-frames.\n* Each screen (workspace) is called a tag, which has a unique identifier. Switching between tags is seamless.\n* It can be configured during runtime. Which means that any customization made does not require the service to be restarted.\n* *herbstclient* is the frontend for herbstluftwm, which can be used to issue commands to the server during runtime.\n\nAccording to the herbstluftwm wiki, it functions in the following way:\n\n\n```\n                 startx\n                   | f/e\n                   V\n              ~/.xinitrc\n                   | f/e or exec\n    IPC-Call       V\n    .- - - -\u003e herbstluftwm           __________________\n  .\"            /     \\             | Symbol | Meaning |\n  .            /       \\            |--------+---------|\n  .       f/e /         \\ f/e       |  A     | A forks |\n  .          /           \\          |  | f/e | and     |\n  .         V             V         |  V     | execs   |\n  .     autostart       xterm       |  B     | into B  |\n  .         |             |         |________|_________|\n  .     f/e |             | f/e\n  .         V             V\n   --  herbstclient     $SHELL\n\n```\n\nIn the [last blog](https://dev.to/l04db4l4nc3r/the-linux-desktop-deep-dive-1jh3), we understood that `startx` loads the display manager, which in turn loads the *.xsession* and *.xinitrc* scripts to configure the X Client, which is herbstluftwm in this case. When started, it runs the `~/.config/herbstluftwm/autostart` script to load all of the configurations.\n\n\n---\n\n### Setting Up\n\nHerbstluftwm is very easily to install, and will most likely have an installation candidate for your distribution. \n\n```\nsudo apt install herbstluftwm\n```\nTo run it, simple add the following line in your `~/.xsession` file:\n\n```\nexec herbstluftwm\n```\n\nLogout and log back in again, and boom! You are good to go.\n\n---\n\n### Getting Started\n\nHerbstluftwm then gives us access to spawn terminals using the default `\u003cAlt\u003e + \u003cEnter\u003e` command. \n\nWhen we do that for the first time, the screen looks something like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/4chlpdvnd9r5ifscdhid.png) \n\n---\n\n### Tags\n\nNotice that the top bar has a few numbers, starting from 1 to 9. These numbers are tags (workspaces) that we can switch between. To do so, simply hit `\u003cAlt\u003e + [1-9]`. For example `\u003cAlt\u003e + 6` will take me to the 6th tag. Note that whatever was running on the previous tag keeps on running there as usual. The highlighted numbers indicate that there is something running on those tags.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/sa5cqrd0bwwnagu003xb.png)\n\n---\n\n### Windows\n\nHerbstluftwm uses a lot of vim bindings for navigation. Here are some of the default key bindings for splitting windows and navigating:\n\n| Default key binding | Action performed |\n|:-------------------:|:----------------:|\n| `\u003cAlt\u003e + o`| Split window horizontally |\n| `\u003cAlt\u003e + u`| Split window vertically |\n| `\u003cAlt\u003e + [h/j/k/l]`| Move left-right-up an down windows |\n| `\u003cAlt\u003e + r`| Terminate current window |\n| `\u003cAlt\u003e + \u003cShift\u003e + c`| Terminate the process running in the current window |\n| `\u003cAlt\u003e + \u003cCtrl\u003e + [h/j/k/l]`| Resize the window |\n| `\u003cAlt\u003e + \u003cShift\u003e + q`| Logout |\n| `\u003cAlt\u003e + \u003cShift\u003e + r`| Re-load configuration |\n| `\u003cAlt\u003e + \u003cShift\u003e + [1-9]` | Re-locate the current window to another tag |\n\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/2ub3uhra4xaxlrdiqcl9.png)\n\nHere the default super (called a modifier in herbstluftwm, or Mod) `\u003cAlt\u003e` can be changed by editing the configuration.\n\n---\n\n### Herbstclient\n\nThe only way to communicate with herbstluftwm is by using herbstclient, which is a command line utility for inter-process communication with the *WM* server. To see the list of available commands, run:\n\n```\nherbstclient --help\n```\n\nIt is a very powerful tool. In fact, the `autostart` file we mentioned earlier, has a lot of key bindings mapped to herbstclient commands. A simple example of how we can use herbstclient is:\n\n```\nherbstclient spawn firefox\n```\n\nThis command will talk to the herbstluftwm backend to launch an instance of firefox in the current tag. \n\nTo learn more about how to use the client, go to the [tutorial](https://herbstluftwm.org/tutorial.html#client).\n\n---\n\n### Configuration\n\nAll of the herbstluftwm configuration lies in `~/.config/herbstluftwm/autostart`. This file can be edited for some of the following functionalities:\n\n* Adding keybindings.\n* Configuring colours and themes.\n* Changing the modifier key (\u003cAlt\u003e by default).\n* Configuring titlebar, borders, frame width etc.\n\nAnd much much more. A simple example is the following:\n\n```\nhc keybind $MOD-b spawn firefox\nhc keybind $MOD-n spawn nautilus\n```\nHere, `hc` is an alias for herbstclient, and $Mod is \u003cAlt\u003e. This configuration essentially enables me to spin up firefox on hitting `\u003cAlt\u003e + b` and the file manager nautilus on hitting `\u003cAlt\u003e + n`.\n\nThe best part about herbstluftwm is that after changing the configuration, you don't have to logout to re-compile the program. Simply pressing `\u003cAlt\u003e + \u003cShift\u003e + r` will reload the configuration with the changes made!\n\n---\n\n### Verdict\n\nHerbstluftwm is very easy to get started with. It has the capability to load the configuration during runtime, has a sophisticated client, and is extremely fast due to minimalism. I would recommend it to anyone who is getting started with window managers.\n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: :heart: :heart: |\n| Learning curve (lesser is better)| :heart: :heart: |\n| Productivity | :heart: :heart: :heart: |\n| Fun | :heart: :heart: :heart: :heart: |\n\n---\n\n### References\n\n* [Tutorial](https://herbstluftwm.org/tutorial.html)\n* [Official Website](https://herbstluftwm.org/)",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 10,
		"description": "Herbs.....what? How do you even begin to pronounce this window manager? After some digging, it is app...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/ks36wotkultqmuyt7mw9.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/herbstluftwm-a-dead-simple-window-manager-48ao",
		"public_reactions_count": 66,
		"processed_html": "\u003cp\u003eHerbs.....what? How do you even begin to pronounce this window manager? After some digging, it is apparently pronounced as the following: \u003cem\u003eherbs + laugh + umm\u003c/em\u003e. And this is the version that makes the most sense! As to why it is named so:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI liked the name of the e-mail client wanderlust. Unfortunately I am a happy mutt user, so I needed an other application with a similar name.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe creator of herbstluftwm\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNevertheless, herbstluftwm is one of the easier window managers to get started with. The following is an index to help you navigate this blog easier:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up\"\u003eSetting up\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-started\"\u003eGetting started\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tags\"\u003eTags\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#windows\"\u003eWindows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#herbstclient\"\u003eHerbstclient\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verdict\"\u003eVerdict\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt is made for X11.\u003c/li\u003e\n\u003cli\u003eThe layout is based on splitting frames to sub-frames.\u003c/li\u003e\n\u003cli\u003eEach screen (workspace) is called a tag, which has a unique identifier. Switching between tags is seamless.\u003c/li\u003e\n\u003cli\u003eIt can be configured during runtime. Which means that any customization made does not require the service to be restarted.\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eherbstclient\u003c/em\u003e is the frontend for herbstluftwm, which can be used to issue commands to the server during runtime.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAccording to the herbstluftwm wiki, it functions in the following way:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e                 startx\n                   | f/e\n                   V\n              ~/.xinitrc\n                   | f/e or exec\n    IPC-Call       V\n    .- - - -\u0026gt; herbstluftwm           __________________\n  .\"            /     \\             | Symbol | Meaning |\n  .            /       \\            |--------+---------|\n  .       f/e /         \\ f/e       |  A     | A forks |\n  .          /           \\          |  | f/e | and     |\n  .         V             V         |  V     | execs   |\n  .     autostart       xterm       |  B     | into B  |\n  .         |             |         |________|_________|\n  .     f/e |             | f/e\n  .         V             V\n   --  herbstclient     $SHELL\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIn the \u003ca href=\"https://dev.to/l04db4l4nc3r/the-linux-desktop-deep-dive-1jh3\"\u003elast blog\u003c/a\u003e, we understood that \u003ccode\u003estartx\u003c/code\u003e loads the display manager, which in turn loads the \u003cem\u003e.xsession\u003c/em\u003e and \u003cem\u003e.xinitrc\u003c/em\u003e scripts to configure the X Client, which is herbstluftwm in this case. When started, it runs the \u003ccode\u003e~/.config/herbstluftwm/autostart\u003c/code\u003e script to load all of the configurations.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"setting-up\" href=\"#setting-up\"\u003e\n  \u003c/a\u003e\n  Setting Up\n\u003c/h3\u003e\n\n\u003cp\u003eHerbstluftwm is very easily to install, and will most likely have an installation candidate for your distribution.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esudo apt install herbstluftwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eTo run it, simple add the following line in your \u003ccode\u003e~/.xsession\u003c/code\u003e file:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eexec herbstluftwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eLogout and log back in again, and boom! You are good to go.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"getting-started\" href=\"#getting-started\"\u003e\n  \u003c/a\u003e\n  Getting Started\n\u003c/h3\u003e\n\n\u003cp\u003eHerbstluftwm then gives us access to spawn terminals using the default \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e command. \u003c/p\u003e\n\n\u003cp\u003eWhen we do that for the first time, the screen looks something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--x4LZfeWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4chlpdvnd9r5ifscdhid.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--x4LZfeWa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4chlpdvnd9r5ifscdhid.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"547\"\u003e\u003c/a\u003e \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"tags\" href=\"#tags\"\u003e\n  \u003c/a\u003e\n  Tags\n\u003c/h3\u003e\n\n\u003cp\u003eNotice that the top bar has a few numbers, starting from 1 to 9. These numbers are tags (workspaces) that we can switch between. To do so, simply hit \u003ccode\u003e\u0026lt;Alt\u0026gt; + [1-9]\u003c/code\u003e. For example \u003ccode\u003e\u0026lt;Alt\u0026gt; + 6\u003c/code\u003e will take me to the 6th tag. Note that whatever was running on the previous tag keeps on running there as usual. The highlighted numbers indicate that there is something running on those tags.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sD_gm0Ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sa5cqrd0bwwnagu003xb.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sD_gm0Ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sa5cqrd0bwwnagu003xb.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"151\" height=\"21\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"windows\" href=\"#windows\"\u003e\n  \u003c/a\u003e\n  Windows\n\u003c/h3\u003e\n\n\u003cp\u003eHerbstluftwm uses a lot of vim bindings for navigation. Here are some of the default key bindings for splitting windows and navigating:\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDefault key binding\u003c/th\u003e\n\u003cth\u003eAction performed\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + o\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSplit window horizontally\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + u\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSplit window vertically\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + [h/j/k/l]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eMove left-right-up an down windows\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + r\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTerminate current window\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + c\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTerminate the process running in the current window\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Ctrl\u0026gt; + [h/j/k/l]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eResize the window\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + q\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eLogout\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + r\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRe-load configuration\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + [1-9]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRe-locate the current window to another tag\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kECI7vUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ub3uhra4xaxlrdiqcl9.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kECI7vUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2ub3uhra4xaxlrdiqcl9.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHere the default super (called a modifier in herbstluftwm, or Mod) \u003ccode\u003e\u0026lt;Alt\u0026gt;\u003c/code\u003e can be changed by editing the configuration.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"herbstclient\" href=\"#herbstclient\"\u003e\n  \u003c/a\u003e\n  Herbstclient\n\u003c/h3\u003e\n\n\u003cp\u003eThe only way to communicate with herbstluftwm is by using herbstclient, which is a command line utility for inter-process communication with the \u003cem\u003eWM\u003c/em\u003e server. To see the list of available commands, run:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eherbstclient --help\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIt is a very powerful tool. In fact, the \u003ccode\u003eautostart\u003c/code\u003e file we mentioned earlier, has a lot of key bindings mapped to herbstclient commands. A simple example of how we can use herbstclient is:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eherbstclient spawn firefox\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis command will talk to the herbstluftwm backend to launch an instance of firefox in the current tag. \u003c/p\u003e\n\n\u003cp\u003eTo learn more about how to use the client, go to the \u003ca href=\"https://herbstluftwm.org/tutorial.html#client\"\u003etutorial\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"configuration\" href=\"#configuration\"\u003e\n  \u003c/a\u003e\n  Configuration\n\u003c/h3\u003e\n\n\u003cp\u003eAll of the herbstluftwm configuration lies in \u003ccode\u003e~/.config/herbstluftwm/autostart\u003c/code\u003e. This file can be edited for some of the following functionalities:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdding keybindings.\u003c/li\u003e\n\u003cli\u003eConfiguring colours and themes.\u003c/li\u003e\n\u003cli\u003eChanging the modifier key ( by default).\u003c/li\u003e\n\u003cli\u003eConfiguring titlebar, borders, frame width etc.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd much much more. A simple example is the following:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehc keybind $MOD-b spawn firefox\nhc keybind $MOD-n spawn nautilus\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eHere, \u003ccode\u003ehc\u003c/code\u003e is an alias for herbstclient, and $Mod is . This configuration essentially enables me to spin up firefox on hitting \u003ccode\u003e\u0026lt;Alt\u0026gt; + b\u003c/code\u003e and the file manager nautilus on hitting \u003ccode\u003e\u0026lt;Alt\u0026gt; + n\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe best part about herbstluftwm is that after changing the configuration, you don't have to logout to re-compile the program. Simply pressing \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + r\u003c/code\u003e will reload the configuration with the changes made!\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h3\u003e\n\n\u003cp\u003eHerbstluftwm is very easy to get started with. It has the capability to load the configuration during runtime, has a sophisticated client, and is extremely fast due to minimalism. I would recommend it to anyone who is getting started with window managers.\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://herbstluftwm.org/tutorial.html\"\u003eTutorial\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://herbstluftwm.org/\"\u003eOfficial Website\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "herbstluftwm-a-dead-simple-window-manager-48ao",
		"social_image": null,
		"title": "Herbstluftwm: A Dead Simple Window Manager",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-04T15:26:56.270Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-04-11T04:31:49.135Z",
		"published_at": "2020-04-06T14:33:37.450Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "\u003e It has become appallingly obvious that our technology has exceeded our humanity.\n\u003e    — Albert Einstein\n\nEver since the culmination of the 21st century, computers are becoming more aware and humans substantially ignorant. That machine in your palm, the mobile phone, contains more computational power than an entire auditorium of machinery could fit in the early 20th century. \n\nBeing born in the late 1990s, I have been a front-seat witness to this boom in computation. My first computer had 4 GB of RAM back in the day. Now my mobile phone alone has an 8 gig RAM chip. Humans are reduced to lazy couch sleuths living in a bubble of tools that we have taken for granted. \n\nThe famous [Moore's law](https://en.wikipedia.org/wiki/Moore%27s_law):\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/71210fuf7p0g7vmo88ah.png)\n\nSadly the rise of computation has taken a perverse toll on the developer community. Do you know that an average program written in python is 2 to 10 times slower than a program written in any other compiled language (let us say C++). This is because people have simply started neglecting the time and space complexity of the algorithms they write as well as dependencies they bear in their code. No one cares about a code running 10 times slower if it yields a result in 0.04 seconds instead of 0.004 seconds. \n\n---\n\n### The Suckless Philosophy\n\n\u003e Extreme computational capability ushers in an era of complacency in code, leading to unnecessary bloating. \n\nThe [suckless community](https://suckless.org) is a group of like-minded people with the aim of creating software that is:\n\n* Simple, clear and frugal.\n* Minimalistic in nature to avoid bloating.\n* Simple to understand and contribute to.\n\nSuckless focuses their tools around the elites of the computer science domain, because the community believes that the aforementioned niche often gets ignored when a bloated tool tries to fit the majority. Thus working with suckless tools isn't always easy. Some of their most popular work includes the following:\n\n* `dwm`: Dynamic window manager.\n* `st`: A simple terminal.\n* `surf`: A highly minimalist web browser.\n\n---\n\n### Is suckless a hater community?\n\nLet us take an example. The suckless community has the following things to say about GCC:\n\n\u003e GCC is the virus which has spread into nearly every Linux distribution and has added its language extensions to be not easily replacable. As of 2016 it is now written in C++ and so complete suck. Why can't a compiler just be a simple binary doing its work instead of adding path dependencies deep into the system?\n\nA lot of people view suckless as an extremist community, who openly and rather blatantly bash other people's software in order to try and promote their own vision of how the software can *suck less*. Although a lot of their arguments can be backed up by credible evidence. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/8umqcme21w0bmw91iqjb.jpg)\n\nI was randomly browsing online when I came across this great article: [contempt culture](https://blog.aurynn.com/2015/12/16-contempt-culture) which changed my whole view about verbal extremism in the developer community, and I have since started seeing suckless as an elite community who are just trying to make better software. \n\nI would love to read your views about the suckless community and their tools. Also, I was contemplating whether to do a series on suckless tools. Let me know if you are interested :)",
		"cached_tag_list": "linux, opensource, discuss",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 5,
		"description": "It has become appallingly obvious that our technology has exceeded our humanity.    — Albert Einstei...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/om5fub5o8iydz6vlhgcm.jpg",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/what-is-suckless-all-about-4hp",
		"public_reactions_count": 14,
		"processed_html": "\u003cblockquote\u003e\n\u003cp\u003eIt has become appallingly obvious that our technology has exceeded our humanity.\u003cbr\u003e\n   — Albert Einstein\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eEver since the culmination of the 21st century, computers are becoming more aware and humans substantially ignorant. That machine in your palm, the mobile phone, contains more computational power than an entire auditorium of machinery could fit in the early 20th century. \u003c/p\u003e\n\n\u003cp\u003eBeing born in the late 1990s, I have been a front-seat witness to this boom in computation. My first computer had 4 GB of RAM back in the day. Now my mobile phone alone has an 8 gig RAM chip. Humans are reduced to lazy couch sleuths living in a bubble of tools that we have taken for granted. \u003c/p\u003e\n\n\u003cp\u003eThe famous \u003ca href=\"https://en.wikipedia.org/wiki/Moore%27s_law\"\u003eMoore's law\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7Yg7wUjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71210fuf7p0g7vmo88ah.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7Yg7wUjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71210fuf7p0g7vmo88ah.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"476\" height=\"381\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSadly the rise of computation has taken a perverse toll on the developer community. Do you know that an average program written in python is 2 to 10 times slower than a program written in any other compiled language (let us say C++). This is because people have simply started neglecting the time and space complexity of the algorithms they write as well as dependencies they bear in their code. No one cares about a code running 10 times slower if it yields a result in 0.04 seconds instead of 0.004 seconds. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"the-suckless-philosophy\" href=\"#the-suckless-philosophy\"\u003e\n  \u003c/a\u003e\n  The Suckless Philosophy\n\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eExtreme computational capability ushers in an era of complacency in code, leading to unnecessary bloating. \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://suckless.org\"\u003esuckless community\u003c/a\u003e is a group of like-minded people with the aim of creating software that is:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSimple, clear and frugal.\u003c/li\u003e\n\u003cli\u003eMinimalistic in nature to avoid bloating.\u003c/li\u003e\n\u003cli\u003eSimple to understand and contribute to.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSuckless focuses their tools around the elites of the computer science domain, because the community believes that the aforementioned niche often gets ignored when a bloated tool tries to fit the majority. Thus working with suckless tools isn't always easy. Some of their most popular work includes the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003edwm\u003c/code\u003e: Dynamic window manager.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003est\u003c/code\u003e: A simple terminal.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esurf\u003c/code\u003e: A highly minimalist web browser.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"is-suckless-a-hater-community\" href=\"#is-suckless-a-hater-community\"\u003e\n  \u003c/a\u003e\n  Is suckless a hater community?\n\u003c/h3\u003e\n\n\u003cp\u003eLet us take an example. The suckless community has the following things to say about GCC:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eGCC is the virus which has spread into nearly every Linux distribution and has added its language extensions to be not easily replacable. As of 2016 it is now written in C++ and so complete suck. Why can't a compiler just be a simple binary doing its work instead of adding path dependencies deep into the system?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA lot of people view suckless as an extremist community, who openly and rather blatantly bash other people's software in order to try and promote their own vision of how the software can \u003cem\u003esuck less\u003c/em\u003e. Although a lot of their arguments can be backed up by credible evidence. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--W6b0kAl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8umqcme21w0bmw91iqjb.jpg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--W6b0kAl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8umqcme21w0bmw91iqjb.jpg\" alt=\"Alt Text\" loading=\"lazy\" width=\"409\" height=\"598\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eI was randomly browsing online when I came across this great article: \u003ca href=\"https://blog.aurynn.com/2015/12/16-contempt-culture\"\u003econtempt culture\u003c/a\u003e which changed my whole view about verbal extremism in the developer community, and I have since started seeing suckless as an elite community who are just trying to make better software. \u003c/p\u003e\n\n\u003cp\u003eI would love to read your views about the suckless community and their tools. Also, I was contemplating whether to do a series on suckless tools. Let me know if you are interested :)\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "what-is-suckless-all-about-4hp",
		"social_image": null,
		"title": "What is suckless all about?",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-05T07:48:25.427Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-12-21T02:46:14.229Z",
		"published_at": "2020-04-07T11:34:24.237Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "Dwm stands for *Dynamic Window Manager*. It is a minimalist tiling window manager designed specifically for X11. It is designed to be much smaller, faster and simpler than its alternatives. \n\nThe Suckless community claims that dwm's code is never intended to exceed 2000 SLOC (source lines of code). For those of you who are not familiar with the suckless philosophy, check out my blog on the same:\n\n{% link https://dev.to/l04db4l4nc3r/what-is-suckless-all-about-4hp %}\n\nDwm, like other suckless tools, is meant for the *elitist*, and suckless makes sure of that. There is no binary distribution of dwm. It is just a source file which you have to compile manually to get started. Customization requires editing the source directly and building it from scratch (which is easier than it looks, up ahead). \n\n* [Features](#features)\n* [Setting up](#setting-up)\n* [Getting started](#getting-started)\n* [Tags](#tags)\n* [Windows](#windows)\n* [Dmenu](#dmenu)\n* [Configuration and patching](#configuration-and-patching) \n  * [The dwm source](#the-dwm-source)\n  * [Changing keybindings](#changing-keybindings)\n  * [Installing patches](#installing-patches)\n* [Verdict](#verdict)\n* [References](#references)\n\n---\n\n### Features\n\n* Dwm is only a single binary, and its source code is intended to never exceed 2000 SLOC.\n\n* Customization is done by editing the source code, which is very easy to understand.\n\n* It uses a stack based system for managing windows, where the *top* of the stack is the master and the other windows are slaves.\n\n* It is extremely fast and packed with bare essentials. Additional layouts and functionalities can be added by patching, as is the suckless anti-bloat philosophy. \n\n---\n\n### Setting Up\n\nExecute the following commands to get started with dwm:\n\n```sh\n# clone the source repository\ngit clone git://git.suckless.org/dwm\n\n# enter the directory\ncd dwm\n\n# run a clean installation\nmake clean install\n```\n\nAnd you are good to go. As of Q1 2020, dwm 6.2 is the latest version. Now simply add the following line in your `~/.xinitrc`:\n\n```sh\nexec dwm\n```\n\nNow that you are all set, logout and log back in again. Once you do, you will see a blank screen with numbers on top. The screen is going to have your wallpaper on it by default. Something like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/hvrsvoibnjff21bdfw01.png)\n\n\n\n---\n\n### Getting Started\n\nTo spin up a terminal in dwm, just press the following: `\u003cAlt\u003e + \u003cshift\u003e + \u003cEnter\u003e`. If it doesn't work then checkout the [changing keybindings](#changing-keybindings) section where I talk about remapping the key bindings and customizing which terminal should open up. \n\nIf you keep on opening terminals up then you will notice that the focus shifts to the newest terminal in the stack. A stack is a LIFO (last in first out) data structure. Dwm makes sure that the most attention goes to the recently opened program. You can choose between a lot of different layouts from dwm patches. The one I like to use is [centeredmaster](https://dwm.suckless.org/patches/centeredmaster/), which keeps the master terminal in the center of the screen.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/itbd2r3wn3eugbr1fagf.png)\n\nIf you want more than one master then you can even promote and demote master panes. `\u003cAlt\u003e + i` is used to promote the master and `\u003cAlt\u003e + d` is used for demoting it. Here is as example of two windows selected as master:\n \n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/n2qvz4feapaot2pnsqp4.png)\n\n\n---\n\n### Tags\n\nNotice that the top bar has a few numbers, starting from 1 to 9. These numbers are tags (workspaces) that we can switch between. To do so, simply hit `\u003cAlt\u003e + [1-9]`. For example `\u003cAlt\u003e + 6` will take me to the 6th tag. Note that whatever was running on the previous tag keeps on running there as usual. The highlighted numbers indicate that there is something running on those tags.\n\nYou can move windows from to and from one or more tags. For example, for moving a window in tag 1 to tag 9, press the following commands in tag 1: `\u003cAlt\u003e + \u003cShift\u003e + 9`. \n\nTo view all of the windows running in all of the tags at once, press `\u003cAlt\u003e + 0`. Tags are a very powerful way to switch between programs and view multiple programs at once. \n\n---\n\n### Windows\n\nDwm is feature rich when it comes to managing windows, and has a lot of solutions to complex problems such as fixing a tag on all screens, promoting windows to master and demoting them to slaves.\n\n| Default key binding | Action performed |\n|:-------------------:|:----------------:|\n| `\u003cAlt\u003e + [h/j/k/l]`| Move left-right-up an down windows |\n| `\u003cAlt\u003e + r`| Terminate current window |\n| `\u003cAlt\u003e + \u003cShift\u003e + c`| Terminate the process running in the current window | \n| `\u003cAlt\u003e + \u003cShift\u003e + q`| Logout |\n| `\u003cAlt\u003e + \u003cShift\u003e + [1-9]` | Re-locate the current window to another tag |\n| `\u003cAlt\u003e + \u003cShift\u003e + 0` | To fix the current tag on all tags |\n| `\u003cAlt\u003e + p` | To spin up [dmenu](#dmenu) |\n| `\u003cAlt\u003e + i` | Promoting current window to master |\n| `\u003cAlt\u003e + d` | Demoting current window to slave |\n\n\nThe default super (called a modifier in dwm, or Mod), `\u003cAlt\u003e` can be changed by editing the configuration.\n\n---\n\n### Dmenu\n\nDmenu is a toolbar menu which can be used for easy access of programs. Simply press `\u003cAlt\u003e + p` to activate the menu, then type in the name of the program you want to execute. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/bgf4oet4aqwjgudujitv.png)\n\nNote that you do not have to have dwm to get dmenu. You can independently install it either by building it from source, or running the following command:\n\n```\nsudo apt install dmenu\n```\n\nI started off with dmenu along with herbstluftwm, but now I use dmenu in very single window manager that I use.\n\nYou can even pass in arguments to programs using dmenu. Simply press spacebar after writing the name of the program you want to execute, then subsequently write the arguments that you want to pass in to the program.\n\n---\n\n### Configuration and Patching\n\nConfiguring and patching dwm might be difficult for beginners. I will try to make it as simple as I can by taking two examples:\n\n* Changing the default keybinding of the terminal.\n* Installing [centeredmaster](https://dwm.suckless.org/patches/centeredmaster/) layout patch.\n\n---\n\n#### The Dwm Source\n\nUsing your terminal, go to whichever folder you have cloned dwm in and type `ls`.\n\nYou may notice three configuration files in the directory. `config.mk` contains the build configuration. You won't have to touch it in the best case scenario. \n\n`config.h` and `config.def.h` are the files that you will need to edit when you are configuring dwm. I suggest making the configuration changes on a different branch:\n\n```\ngit checkout -b patches\n```\n\nOnce you are on a different branch, open the Makefile and edit clean recipe to add the following line of code in it:\n\n```\nrm config.h\n```\n\nThis will make sure that whenever you are configuring a patch, you won't have to make changes in both `config.h` as well as `config.def.h`. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3447dplff0092rlco0au.png)\n\nNow whenever you make a change in the `config.def.h`, simply run `make clean install` for re-building dwm from scratch. Then logout and log back in again for the changes to take effect. Dwm requires its source to be rebuilt every time there is a configuration change, which is unlike other window managers like herbstluftwm and i3, where you can simply reload the configuration at runtime.\n\n---\n\n#### Changing Keybindings\n\nOpen the `config.def.h` in vim.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/16gmz9rfyx8xl6aza003.png)\n\n\nThe `Key_key` array stores all of the keybindings. The modifier key (\u003cAlt\u003e by default) is named `MODKEY`. Shift is called `ShiftMask`. All other keys are prefixed by `XK_`. For example, if I am talking about the \"i\" key then I will write `XK_i`. If I am talking about \u003cEnter\u003e then I will write `XK_Return`. \n\nNow let us look at line 3, where the keybinding for opening up a terminal is defined. By default, this line is the following:\n\n```\n/* modifier            key       function        argument */\nMODKEY|ShiftMask     XK_Return    spawn         {.v = termcmd}\n```\nIt means that for `spawning` a terminal, you would have to hit `\u003cAlt\u003e + \u003cShift\u003e + \u003cEnter\u003e`. You can already see in the screenshot above, that I have removed `ShiftMask` from this line. So for opening up the terminal I simply do `\u003cAlt\u003e + \u003cEnter\u003e`. \n\nIn this way, by changing the modifier or keys, you can define custom keybindings. You can even add lines here to define some of your own keybindings. \n\nNow by default dwm uses `st` (simple terminal) when someone hits the keybindings for opening the terminal up. That is why your terminal might not open up the first time you hit the default key binding for doing so (if st is not installed). However this can easily be changed to suit the terminal of your choice by simply editing the argument `termcmd` definition. Since I use `terminator`, I have changed it like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/bjjl3c5zfkun5lpjhnrt.png)\n\nNow for the changes to take effect, simply compile the code again by running the following commands, log back in, and you are good to go:\n\n```\nmake clean install\n```\n\n---\n\n#### Installing patches\n\nIn this example, I will be installing the [centeredmaster](https://dwm.suckless.org/patches/centeredmaster/) patch. Download its source code and place it in the dwm directory. \n\nPatches in dwm are tagged commit diffs in the upstream repository of the version control system. Therefore, for apply patches, you have to use git:\n\n```\ngit apply dwm-centeredmaster-6.1.diff\n```\n\nOnce you do that, it will make changes in the dwm source code. Simply commit after doing so. Once the patch is successfully applied, build dwm again by running `make clean install`, logout and log back in again to see the changes in effect.\n\nTo activate `centeredmaster`, hit `\u003cAlt\u003e + u`. This way patches and different layouts can be installed for dwm. \n\n\n---\n\n### Verdict\n\nDwm is an easy to use but hard to configure window manager, especially for beginners. It has a lot of useful patches which feel like they should've been shipped dwm source itself. The main drawback is the need to compile the source and log back in again after a change in configuration. Except for that, dwm is a really fun to use window manager. It is extremely fast, feature rich, and powerful. \n\nNow some of the patches in dwm might not work out of the box. This is primarily due to the fact that you might have a version which is not yet supported by the patch. But the developer community is always doing changes on those patches. All in all, patching your own dwm configuration is a rewarding process.\n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: |\n| Learning curve (lesser is better)| :heart: :heart: :heart: :heart: |\n| Productivity | :heart: :heart: :heart: :heart: |\n| Fun | :heart: :heart: :heart: :heart: :heart: |\n\n---\n\n### References\n\n* [Suckless Philosophy](https://dev.to/l04db4l4nc3r/what-is-suckless-all-about-4hp)\n* [Official Website](https://dwm.suckless.org/)\n* [List of Patches](https://dwm.suckless.org/patches/)",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 5,
		"description": "Dwm stands for Dynamic Window Manager. It is a minimalist tiling window manager designed specifically...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/ojr5tt2ix60zi0r9v13m.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji",
		"public_reactions_count": 34,
		"processed_html": "\u003cp\u003eDwm stands for \u003cem\u003eDynamic Window Manager\u003c/em\u003e. It is a minimalist tiling window manager designed specifically for X11. It is designed to be much smaller, faster and simpler than its alternatives. \u003c/p\u003e\n\n\u003cp\u003eThe Suckless community claims that dwm's code is never intended to exceed 2000 SLOC (source lines of code). For those of you who are not familiar with the suckless philosophy, check out my blog on the same:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag__link\"\u003e\n  \u003ca href=\"/l04db4l4nc3r\" class=\"ltag__link__link\"\u003e\n    \u003cdiv class=\"ltag__link__pic\"\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Llv5B6bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---Q54OzKD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197603/a4320666-6350-4843-b37e-07bcfa168f55.png\" alt=\"l04db4l4nc3r\" loading=\"lazy\"\u003e\n    \u003c/div\u003e\n  \u003c/a\u003e\n  \u003ca href=\"/l04db4l4nc3r/what-is-suckless-all-about-4hp\" class=\"ltag__link__link\"\u003e\n    \u003cdiv class=\"ltag__link__content\"\u003e\n      \u003ch2\u003eWhat is suckless all about?\u003c/h2\u003e\n      \u003ch3\u003eAngad Sharma ・ Apr 6 '20 ・ 3 min read\u003c/h3\u003e\n      \u003cdiv class=\"ltag__link__taglist\"\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#linux\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#opensource\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#discuss\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eDwm, like other suckless tools, is meant for the \u003cem\u003eelitist\u003c/em\u003e, and suckless makes sure of that. There is no binary distribution of dwm. It is just a source file which you have to compile manually to get started. Customization requires editing the source directly and building it from scratch (which is easier than it looks, up ahead). \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up\"\u003eSetting up\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-started\"\u003eGetting started\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tags\"\u003eTags\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#windows\"\u003eWindows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#dmenu\"\u003eDmenu\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#configuration-and-patching\"\u003eConfiguration and patching\u003c/a\u003e \n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#the-dwm-source\"\u003eThe dwm source\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#changing-keybindings\"\u003eChanging keybindings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#installing-patches\"\u003eInstalling patches\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verdict\"\u003eVerdict\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eDwm is only a single binary, and its source code is intended to never exceed 2000 SLOC.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCustomization is done by editing the source code, which is very easy to understand.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt uses a stack based system for managing windows, where the \u003cem\u003etop\u003c/em\u003e of the stack is the master and the other windows are slaves.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt is extremely fast and packed with bare essentials. Additional layouts and functionalities can be added by patching, as is the suckless anti-bloat philosophy. \u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"setting-up\" href=\"#setting-up\"\u003e\n  \u003c/a\u003e\n  Setting Up\n\u003c/h3\u003e\n\n\u003cp\u003eExecute the following commands to get started with dwm:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# clone the source repository\u003c/span\u003e\ngit clone git://git.suckless.org/dwm\n\n\u003cspan class=\"c\"\u003e# enter the directory\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecd \u003c/span\u003edwm\n\n\u003cspan class=\"c\"\u003e# run a clean installation\u003c/span\u003e\nmake clean \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAnd you are good to go. As of Q1 2020, dwm 6.2 is the latest version. Now simply add the following line in your \u003ccode\u003e~/.xinitrc\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eexec \u003c/span\u003edwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNow that you are all set, logout and log back in again. Once you do, you will see a blank screen with numbers on top. The screen is going to have your wallpaper on it by default. Something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vshUVtZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvrsvoibnjff21bdfw01.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vshUVtZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvrsvoibnjff21bdfw01.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"getting-started\" href=\"#getting-started\"\u003e\n  \u003c/a\u003e\n  Getting Started\n\u003c/h3\u003e\n\n\u003cp\u003eTo spin up a terminal in dwm, just press the following: \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;shift\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e. If it doesn't work then checkout the \u003ca href=\"#changing-keybindings\"\u003echanging keybindings\u003c/a\u003e section where I talk about remapping the key bindings and customizing which terminal should open up. \u003c/p\u003e\n\n\u003cp\u003eIf you keep on opening terminals up then you will notice that the focus shifts to the newest terminal in the stack. A stack is a LIFO (last in first out) data structure. Dwm makes sure that the most attention goes to the recently opened program. You can choose between a lot of different layouts from dwm patches. The one I like to use is \u003ca href=\"https://dwm.suckless.org/patches/centeredmaster/\"\u003ecenteredmaster\u003c/a\u003e, which keeps the master terminal in the center of the screen.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4xbDu2-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/itbd2r3wn3eugbr1fagf.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4xbDu2-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/itbd2r3wn3eugbr1fagf.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you want more than one master then you can even promote and demote master panes. \u003ccode\u003e\u0026lt;Alt\u0026gt; + i\u003c/code\u003e is used to promote the master and \u003ccode\u003e\u0026lt;Alt\u0026gt; + d\u003c/code\u003e is used for demoting it. Here is as example of two windows selected as master:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cSDFkVDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n2qvz4feapaot2pnsqp4.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cSDFkVDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n2qvz4feapaot2pnsqp4.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"tags\" href=\"#tags\"\u003e\n  \u003c/a\u003e\n  Tags\n\u003c/h3\u003e\n\n\u003cp\u003eNotice that the top bar has a few numbers, starting from 1 to 9. These numbers are tags (workspaces) that we can switch between. To do so, simply hit \u003ccode\u003e\u0026lt;Alt\u0026gt; + [1-9]\u003c/code\u003e. For example \u003ccode\u003e\u0026lt;Alt\u0026gt; + 6\u003c/code\u003e will take me to the 6th tag. Note that whatever was running on the previous tag keeps on running there as usual. The highlighted numbers indicate that there is something running on those tags.\u003c/p\u003e\n\n\u003cp\u003eYou can move windows from to and from one or more tags. For example, for moving a window in tag 1 to tag 9, press the following commands in tag 1: \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + 9\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eTo view all of the windows running in all of the tags at once, press \u003ccode\u003e\u0026lt;Alt\u0026gt; + 0\u003c/code\u003e. Tags are a very powerful way to switch between programs and view multiple programs at once. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"windows\" href=\"#windows\"\u003e\n  \u003c/a\u003e\n  Windows\n\u003c/h3\u003e\n\n\u003cp\u003eDwm is feature rich when it comes to managing windows, and has a lot of solutions to complex problems such as fixing a tag on all screens, promoting windows to master and demoting them to slaves.\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDefault key binding\u003c/th\u003e\n\u003cth\u003eAction performed\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + [h/j/k/l]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eMove left-right-up an down windows\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + r\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTerminate current window\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + c\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTerminate the process running in the current window\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + q\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eLogout\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + [1-9]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRe-locate the current window to another tag\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + 0\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTo fix the current tag on all tags\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + p\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTo spin up \u003ca href=\"#dmenu\"\u003edmenu\u003c/a\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + i\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePromoting current window to master\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + d\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eDemoting current window to slave\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003cp\u003eThe default super (called a modifier in dwm, or Mod), \u003ccode\u003e\u0026lt;Alt\u0026gt;\u003c/code\u003e can be changed by editing the configuration.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"dmenu\" href=\"#dmenu\"\u003e\n  \u003c/a\u003e\n  Dmenu\n\u003c/h3\u003e\n\n\u003cp\u003eDmenu is a toolbar menu which can be used for easy access of programs. Simply press \u003ccode\u003e\u0026lt;Alt\u0026gt; + p\u003c/code\u003e to activate the menu, then type in the name of the program you want to execute. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2dt2IgWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bgf4oet4aqwjgudujitv.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2dt2IgWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bgf4oet4aqwjgudujitv.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"16\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNote that you do not have to have dwm to get dmenu. You can independently install it either by building it from source, or running the following command:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esudo apt install dmenu\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eI started off with dmenu along with herbstluftwm, but now I use dmenu in very single window manager that I use.\u003c/p\u003e\n\n\u003cp\u003eYou can even pass in arguments to programs using dmenu. Simply press spacebar after writing the name of the program you want to execute, then subsequently write the arguments that you want to pass in to the program.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"configuration-and-patching\" href=\"#configuration-and-patching\"\u003e\n  \u003c/a\u003e\n  Configuration and Patching\n\u003c/h3\u003e\n\n\u003cp\u003eConfiguring and patching dwm might be difficult for beginners. I will try to make it as simple as I can by taking two examples:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eChanging the default keybinding of the terminal.\u003c/li\u003e\n\u003cli\u003eInstalling \u003ca href=\"https://dwm.suckless.org/patches/centeredmaster/\"\u003ecenteredmaster\u003c/a\u003e layout patch.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"the-dwm-source\" href=\"#the-dwm-source\"\u003e\n  \u003c/a\u003e\n  The Dwm Source\n\u003c/h4\u003e\n\n\u003cp\u003eUsing your terminal, go to whichever folder you have cloned dwm in and type \u003ccode\u003els\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may notice three configuration files in the directory. \u003ccode\u003econfig.mk\u003c/code\u003e contains the build configuration. You won't have to touch it in the best case scenario. \u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003econfig.h\u003c/code\u003e and \u003ccode\u003econfig.def.h\u003c/code\u003e are the files that you will need to edit when you are configuring dwm. I suggest making the configuration changes on a different branch:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egit checkout -b patches\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eOnce you are on a different branch, open the Makefile and edit clean recipe to add the following line of code in it:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003erm config.h\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis will make sure that whenever you are configuring a patch, you won't have to make changes in both \u003ccode\u003econfig.h\u003c/code\u003e as well as \u003ccode\u003econfig.def.h\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3Xtim4U---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3447dplff0092rlco0au.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3Xtim4U---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3447dplff0092rlco0au.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"744\" height=\"100\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNow whenever you make a change in the \u003ccode\u003econfig.def.h\u003c/code\u003e, simply run \u003ccode\u003emake clean install\u003c/code\u003e for re-building dwm from scratch. Then logout and log back in again for the changes to take effect. Dwm requires its source to be rebuilt every time there is a configuration change, which is unlike other window managers like herbstluftwm and i3, where you can simply reload the configuration at runtime.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"changing-keybindings\" href=\"#changing-keybindings\"\u003e\n  \u003c/a\u003e\n  Changing Keybindings\n\u003c/h4\u003e\n\n\u003cp\u003eOpen the \u003ccode\u003econfig.def.h\u003c/code\u003e in vim.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pZ_FAUBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16gmz9rfyx8xl6aza003.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pZ_FAUBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16gmz9rfyx8xl6aza003.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"720\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eKey_key\u003c/code\u003e array stores all of the keybindings. The modifier key ( by default) is named \u003ccode\u003eMODKEY\u003c/code\u003e. Shift is called \u003ccode\u003eShiftMask\u003c/code\u003e. All other keys are prefixed by \u003ccode\u003eXK_\u003c/code\u003e. For example, if I am talking about the \"i\" key then I will write \u003ccode\u003eXK_i\u003c/code\u003e. If I am talking about  then I will write \u003ccode\u003eXK_Return\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eNow let us look at line 3, where the keybinding for opening up a terminal is defined. By default, this line is the following:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/* modifier            key       function        argument */\nMODKEY|ShiftMask     XK_Return    spawn         {.v = termcmd}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIt means that for \u003ccode\u003espawning\u003c/code\u003e a terminal, you would have to hit \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e. You can already see in the screenshot above, that I have removed \u003ccode\u003eShiftMask\u003c/code\u003e from this line. So for opening up the terminal I simply do \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eIn this way, by changing the modifier or keys, you can define custom keybindings. You can even add lines here to define some of your own keybindings. \u003c/p\u003e\n\n\u003cp\u003eNow by default dwm uses \u003ccode\u003est\u003c/code\u003e (simple terminal) when someone hits the keybindings for opening the terminal up. That is why your terminal might not open up the first time you hit the default key binding for doing so (if st is not installed). However this can easily be changed to suit the terminal of your choice by simply editing the argument \u003ccode\u003etermcmd\u003c/code\u003e definition. Since I use \u003ccode\u003eterminator\u003c/code\u003e, I have changed it like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JfBDR9Q1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bjjl3c5zfkun5lpjhnrt.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JfBDR9Q1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bjjl3c5zfkun5lpjhnrt.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"664\" height=\"28\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNow for the changes to take effect, simply compile the code again by running the following commands, log back in, and you are good to go:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emake clean install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"installing-patches\" href=\"#installing-patches\"\u003e\n  \u003c/a\u003e\n  Installing patches\n\u003c/h4\u003e\n\n\u003cp\u003eIn this example, I will be installing the \u003ca href=\"https://dwm.suckless.org/patches/centeredmaster/\"\u003ecenteredmaster\u003c/a\u003e patch. Download its source code and place it in the dwm directory. \u003c/p\u003e\n\n\u003cp\u003ePatches in dwm are tagged commit diffs in the upstream repository of the version control system. Therefore, for apply patches, you have to use git:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egit apply dwm-centeredmaster-6.1.diff\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eOnce you do that, it will make changes in the dwm source code. Simply commit after doing so. Once the patch is successfully applied, build dwm again by running \u003ccode\u003emake clean install\u003c/code\u003e, logout and log back in again to see the changes in effect.\u003c/p\u003e\n\n\u003cp\u003eTo activate \u003ccode\u003ecenteredmaster\u003c/code\u003e, hit \u003ccode\u003e\u0026lt;Alt\u0026gt; + u\u003c/code\u003e. This way patches and different layouts can be installed for dwm. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h3\u003e\n\n\u003cp\u003eDwm is an easy to use but hard to configure window manager, especially for beginners. It has a lot of useful patches which feel like they should've been shipped dwm source itself. The main drawback is the need to compile the source and log back in again after a change in configuration. Except for that, dwm is a really fun to use window manager. It is extremely fast, feature rich, and powerful. \u003c/p\u003e\n\n\u003cp\u003eNow some of the patches in dwm might not work out of the box. This is primarily due to the fact that you might have a version which is not yet supported by the patch. But the developer community is always doing changes on those patches. All in all, patching your own dwm configuration is a rewarding process.\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/l04db4l4nc3r/what-is-suckless-all-about-4hp\"\u003eSuckless Philosophy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dwm.suckless.org/\"\u003eOfficial Website\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dwm.suckless.org/patches/\"\u003eList of Patches\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "dwm-the-suckless-window-manager-1ji",
		"social_image": null,
		"title": "Dwm: The Suckless Window Manager",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-05T14:57:05.399Z",
		"crossposted_at": null,
		"edited_at": "2020-04-09T15:40:11.111Z",
		"last_comment_at": "2022-05-05T12:49:14.543Z",
		"published_at": "2020-04-09T15:34:11.775Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "One of the most popular tiling window managers out there, i3 is written from scratch. The developers claim that it is targeted towards advanced users, but it is certainly easy to use and configure. More so than its suckless alternative. Primarily due to its beautiful and well maintained documentation (some of the best docs I have ever seen for window managers), as well as an advanced user community who regularly chip in to make sure things keep running smooth.\n\nI3 is written from scratch\n\n* [Features](#features)\n* [Setting up](#setting-up)\n* [Getting started](#getting-started)\n* [Workspaces](#workspaces)\n* [Windows](#windows)\n* [Modes of operation](#modes-of-operation)\n  * [Splitv mode](#splitv-mode)\n  * [Splith mode](#splith-mode)\n  * [Stack mode](#stack-mode)\n  * [Tabbed mode](#tabbed-mode)\n* [Configuration](#configuration)\n  * [Changing Keybindings](#changing-keybindings)\n  * [Configuring The Status Bar](#configuring-the-status-bar)\n* [I3-gaps](#i3-gaps)\n* [Verdict](#verdict)\n* [References](#references)\n\n---\n\n### Features\n\n* I3 uses the tree data structure for storing window references.\n* It has different *modes* of operation. Which we will see in the upcoming sections.\n* I3 assigns each workspace to a virtual monitor, thus implementing multi-monitor functionality correctly.\n* It can be configured during runtime. Which means that any customization made does not require the service to be restarted.\n* It uses the asynchronous XCB library instead of the old, synchronous XLIB.\n\nCheck out the I3 guidelines on their [official website](https://i3wm.org/)\n\nOne thing to note is the following statement clearly mentioned on their official website:\n\n\u003e The usual elitism amongst minimal window managers: Don’t be bloated, don’t be fancy (simple borders are the most decoration we want to have).\nHowever, we do not enforce unnecessary limits such as a maximum amount of source lines of code. If it needs to be a bit bigger, it will be. \n\nNow I don't know about you guys but I think this is targeted at [dwm](https://dev.to/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji) for enforcing a 2000 SLOC limit on their development. But it is for you guys to decide :)\n\n\n---\n\n### Setting Up\n\nI3 is available for the following distributions. In addition, you can download the debian release, or just the tarball as well.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/46u7qn6wjjqld64p0i3r.png)\n\nThe easiest way to get started (on debian based systems) is this:\n\n```\nsudo apt install i3\n```\nTo run it, simple add the following line in your `~/.xsession` file:\n\n```\nexec i3\n```\n\nLogout and log back in again, and boom! You are good to go.\n\n---\n\n### Getting Started\n\nThe first time you run i3, since you will not have a configuration template at `~/.config/i3/config`, i3 will run the **i3-config-wizard**. Which will prompt you to generate a configuration automatically:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/rtj22jwqejdoavkwja2d.png)\n\nOnce you do that, you will be greeted by your wallpaper, with a thin status bat at the bottom. Yes, i3 status bar is at the bottom by default. But this can of course easily be configured.\n\nThe default modifier in i3 is `\u003cAlt\u003e`. To spawn a terminal, press `\u003cAlt\u003e + \u003cEnter\u003e`. \n\nWhen we do that for the first time, the screen looks something like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/wf1wit6pnvty3l275lam.png)\n\n---\n\n### Workspaces\n\nIn i3, the status bar shows the number of active workspaces. I3 gives you 10 workspaces that we can switch between. To do so, simply hit `\u003cAlt\u003e + [1-9]` for the first 9 and additionally `\u003cAlt\u003e + 0` for the 10th workspace. For example `\u003cAlt\u003e + 6` will take you to the 6th workspace. Note that whatever was running on the previous workspace keeps on running there as usual.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/8ppveu8hs4g59yh4pmkq.png)\n\n---\n\n### Windows\n\ni3 uses vim bindings for movement. The only difference is that instead of using `h|j|k|l` for movement, it shifts the bindings one key to the right and instead uses `j|k|l|;`. \n\n| Default key binding | Action performed |\n|:-------------------:|:----------------:|\n| `\u003cAlt\u003e + v` | Split window vertically on the next spawn |\n| `\u003cAlt\u003e + h`| Split window horizontally on the next spawn |\n| `\u003cAlt\u003e + [j/k/l/;]`| Move left-right-up an down windows |\n| `\u003cAlt\u003e + e`| Toggle horizontal and vertical |\n| `\u003cAlt\u003e + d`| Open dmenu |\n| `\u003cAlt\u003e + \u003cShift\u003e + q`| Quit the currently running window |\n| `\u003cAlt\u003e + \u003cShift\u003e + r`| Re-load configuration |\n| `\u003cAlt\u003e + \u003cShift\u003e + [1-9]` | Re-locate the current window to another wprkspace |\n| `\u003cAlt\u003e + \u003cShift\u003e + 0` | Re-locate the current window the tenth wprkspace |\n| `\u003cAlt\u003e + s`| Turn on stacking mode (explained in the next section) |\n| `\u003cAlt\u003e + w`| Turn on tabbed mode (explained in the next section) |\n\n\n---\n\n### Modes of Operation\n\nAs mentioned earlier, i3 uses the tree data structure for storing window references in workspaces. Traversing through these windows is just like tree traversal. Now you have different modes of operation, and each mode tweaks the layout, but all in all it is just a tree data structure underneath. For example, in the given window split pane, the tree will look like the following:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/wjfhlkpm61land4h1pay.png)\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/i6neluoygavqslpn483k.png)\n\n---\n\n#### Splitv Mode\n\nThis mode is used for spawning windows which are vertically split. To activate this mode, simple press `\u003cAlt\u003e + v`. After this mode being activated, when you spawn programs next, either using shortcuts or dmenu, they will be vertically split.\n\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/771habbjj89lkv8vu0de.png)\n\n---\n\n#### Splith Mode\n\nThis mode is used for spawning windows which are horizontally split. To activate this mode, simple press `\u003cAlt\u003e + h`. After this mode being activated, when you spawn programs next, either using shortcuts or dmenu, they will be horizontally split.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/yzqnlmvglwdqkgt3wqmc.png)\n\n\n`Note`: You can switch between horizontally and vertically split panes using `\u003cAlt\u003e + e` toggle\n\n---\n\n#### Stack Mode\n\nStack mode will place each and every tab on top of each other like a stack. Note that it is not actually a stack internally, but only visually so. To activate stack mode press `\u003cAlt\u003e + s`.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/s3l6g8g2csgh3whdb865.png)\n\n---\n\n#### Tabbed Mode\n\nTabbed mode is exactly like the stack mode, the only difference being that it visually places the windows as tabs (the kind you might see on a browser). To activate it, press `\u003cAlt\u003e + w`.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/adcllk01uczfrd8woq7g.png)\n\n---\n\n\n### Configuration\n\nThe i3 configuration lies in `~/.config/i3/config` file. It uses an easy to use syntax for defining parameters. All of which are well documented on i3's official user manual. In this blog, we will be configuring our status bar as well as changing some key bindings to get started. In the [next section](#i3-gaps) we will learn how to add gaps between windows in i3. \n\nSee the full configuration tutorial for i3 [here](https://i3wm.org/docs/4.12/userguide.html#configuring).\n\n---\n\n#### Changing Keybindings\n\nIn i3 configuration, keybindings are defined by the `bindsym` keyword, and the modifier (`\u003cAlt\u003e` by default) is defined by `$mod`. \n\nNow I am a long time vim user, so I am used to the vim's usual movement keys (h|j|k|l). In i3 everything is shifted to the left. Now let us try to change that. Find the following lines in the configuration:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/m499duiip8hdsp5212pp.png)\n\nAnd change it to use h|j|k|l instead of j|k|l|;. For the configuration to take effect, save the file and hit `\u003cAlt\u003e + \u003cShift\u003e +r` for live reload. You will now see the following prompt on top:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/8huuuext2x9chndq6si0.png)\n\nWhoa whoa! This wasn't supposed to happen right? I3 throws an error in the form of a red status line whenever there is an error in the configuration. So you will always get to know where you went wrong. How convenient is that! Just a quick show at the error log will make you realize that you cannot bind `\u003cAlt\u003e + h` for moving left since it is already bound (for splith mode). To get rid of this error, just change the binding for splith mode like the following, and you should be good to go! Hit `\u003cAlt\u003e + \u003cShift\u003e + r` after making the change, and voila.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/gxpwpcs2mx88g2swcx77.png)\n\n---\n\n#### Configuring the Status Bar\n\nThe bar at the bottom of your screen is called the status bar, or simply **i3bar**. It supports very low as well as high level customization, including:\n\n* Changing aesthetics (color, font, opacity). \n* Adding custom configuration\n* Adding custom commands to be executed and shown on the i3bar\n\nA full set of supported variables and customization can be viewed [here](https://i3wm.org/docs/4.12/userguide.html#_configuring_i3bar).\n\nThe following is my configuration, which I have added at the bottom of my `~/.config/i3/config` file:\n\n\n```\n# CSS-like element selector\nbar {\n        # For the default i3 status bar information\n        status_command i3status\n\n        # The nproc command will be executed and the result will be \n        # shown on the right side of the i3bar. You can add custom shell\n        # scripts here (after exec)\n        status_command exec /usr/bin/nproc\n\n        # The next two lines are for the font that I am using\n        font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1\n        font pango:DejaVu Sans Mono 14\n\n        # I want by i3bar to be at the top rather than the bottom\n        position top\n        \n        # The next section is for the i3bar colors and transparency\n        # i3bar uses the RGBA format for color specification where the A\n        # is for the opacity (which is optional). \n        # The RGBA string will be hexadecimal; so #[__][__][__][__]\n        i3bar_command i3bar --transparency\n        colors {\n            # RGBA format\n            # The fourth option accounts for the opacity \n            background #844685aa\n            statusline #ffffffdd\n            separator #ffffffdd\n        }\n}\n\n```\n\nAfter saving the configuration and refreshing i3, the bar looks like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/z4dowy0jj41pgzaw0wiq.png)\n\n---\n\n### I3 gaps\n\nI3-gaps is a fork of I3 which adds additional functionality such as configuring gaps between windows. The best part about i3-gaps is that it is always kept up to date with the upstream, so any new update in i3 will also be reflected in i3-gaps. Check out the official repository here:\n\n{% github https://github.com/Airblader/i3 %}\n\nNow i3 has PPAs for Ubuntu and AUR's for Arch. If you want to build it from source, for other distributions, [this](https://gist.github.com/boreycutts/6417980039760d9d9dac0dd2148d4783) gist will get you started on it. \n\nOnce you install it, you are good to go. Add the following lines (in the same config file) for configuring gaps between your windows:\n\n\n```\n# only works if i3-gaps is installed\n# a window selector should be there\nfor_window [class=\"^.*\"] border pixel 2\n\n# defining inner and outer window gaps\ngaps inner 10\ngaps outer 10\n```\n\nSave and reload, and you are good to go. I3-gaps also has a smart gaps feature, where gaps can be turned on and off in a particular workspace in certain scenarios. I recommend checking out the official repository for the same. \n\n---\n\n\n\n### Verdict\n\nI3 is free of bloat, and is very easy to learn. Even though it might be more complex than simpler alternatives like herbstluftwm, but learning it is easier due to the excellent documentation which makes for a fun exploration. I recommend everyone to try out i3. \n\nThe developers at i3 took a rather radical approach, building this wm from scratch, using a tree data structure. But the more I read up about i3, the more I see how well they have utilized this idea. I3 is not the best wm by far, but it is certainly one of the better ones. \n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: :heart: :heart: |\n| Learning curve (lesser is better)| :heart: |\n| Productivity | :heart: :heart: :heart: :heart: |\n| Fun | :heart: :heart: :heart: |\n\n---\n\n### References\n\n* [I3 user guide](https://i3wm.org/docs/userguide.html)",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 9,
		"description": "One of the most popular tiling window managers out there, i3 is written from scratch. The developers...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/qe42wqr0i4a0wkxb9j0k.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/i3-the-improved-tiling-window-manager-42k7",
		"public_reactions_count": 58,
		"processed_html": "\u003cp\u003eOne of the most popular tiling window managers out there, i3 is written from scratch. The developers claim that it is targeted towards advanced users, but it is certainly easy to use and configure. More so than its suckless alternative. Primarily due to its beautiful and well maintained documentation (some of the best docs I have ever seen for window managers), as well as an advanced user community who regularly chip in to make sure things keep running smooth.\u003c/p\u003e\n\n\u003cp\u003eI3 is written from scratch\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up\"\u003eSetting up\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-started\"\u003eGetting started\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#workspaces\"\u003eWorkspaces\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#windows\"\u003eWindows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#modes-of-operation\"\u003eModes of operation\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#splitv-mode\"\u003eSplitv mode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#splith-mode\"\u003eSplith mode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#stack-mode\"\u003eStack mode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tabbed-mode\"\u003eTabbed mode\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#changing-keybindings\"\u003eChanging Keybindings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuring-the-status-bar\"\u003eConfiguring The Status Bar\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#i3-gaps\"\u003eI3-gaps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verdict\"\u003eVerdict\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eI3 uses the tree data structure for storing window references.\u003c/li\u003e\n\u003cli\u003eIt has different \u003cem\u003emodes\u003c/em\u003e of operation. Which we will see in the upcoming sections.\u003c/li\u003e\n\u003cli\u003eI3 assigns each workspace to a virtual monitor, thus implementing multi-monitor functionality correctly.\u003c/li\u003e\n\u003cli\u003eIt can be configured during runtime. Which means that any customization made does not require the service to be restarted.\u003c/li\u003e\n\u003cli\u003eIt uses the asynchronous XCB library instead of the old, synchronous XLIB.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eCheck out the I3 guidelines on their \u003ca href=\"https://i3wm.org/\"\u003eofficial website\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOne thing to note is the following statement clearly mentioned on their official website:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe usual elitism amongst minimal window managers: Don’t be bloated, don’t be fancy (simple borders are the most decoration we want to have).\u003cbr\u003e\nHowever, we do not enforce unnecessary limits such as a maximum amount of source lines of code. If it needs to be a bit bigger, it will be. \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNow I don't know about you guys but I think this is targeted at \u003ca href=\"https://dev.to/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji\"\u003edwm\u003c/a\u003e for enforcing a 2000 SLOC limit on their development. But it is for you guys to decide :)\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"setting-up\" href=\"#setting-up\"\u003e\n  \u003c/a\u003e\n  Setting Up\n\u003c/h3\u003e\n\n\u003cp\u003eI3 is available for the following distributions. In addition, you can download the debian release, or just the tarball as well.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qRjK8lXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/46u7qn6wjjqld64p0i3r.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qRjK8lXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/46u7qn6wjjqld64p0i3r.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"372\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe easiest way to get started (on debian based systems) is this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esudo apt install i3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eTo run it, simple add the following line in your \u003ccode\u003e~/.xsession\u003c/code\u003e file:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eexec i3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eLogout and log back in again, and boom! You are good to go.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"getting-started\" href=\"#getting-started\"\u003e\n  \u003c/a\u003e\n  Getting Started\n\u003c/h3\u003e\n\n\u003cp\u003eThe first time you run i3, since you will not have a configuration template at \u003ccode\u003e~/.config/i3/config\u003c/code\u003e, i3 will run the \u003cstrong\u003ei3-config-wizard\u003c/strong\u003e. Which will prompt you to generate a configuration automatically:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gsdnA2zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rtj22jwqejdoavkwja2d.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gsdnA2zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rtj22jwqejdoavkwja2d.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"316\" height=\"231\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you do that, you will be greeted by your wallpaper, with a thin status bat at the bottom. Yes, i3 status bar is at the bottom by default. But this can of course easily be configured.\u003c/p\u003e\n\n\u003cp\u003eThe default modifier in i3 is \u003ccode\u003e\u0026lt;Alt\u0026gt;\u003c/code\u003e. To spawn a terminal, press \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eWhen we do that for the first time, the screen looks something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WoAOZdWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wf1wit6pnvty3l275lam.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WoAOZdWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wf1wit6pnvty3l275lam.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"workspaces\" href=\"#workspaces\"\u003e\n  \u003c/a\u003e\n  Workspaces\n\u003c/h3\u003e\n\n\u003cp\u003eIn i3, the status bar shows the number of active workspaces. I3 gives you 10 workspaces that we can switch between. To do so, simply hit \u003ccode\u003e\u0026lt;Alt\u0026gt; + [1-9]\u003c/code\u003e for the first 9 and additionally \u003ccode\u003e\u0026lt;Alt\u0026gt; + 0\u003c/code\u003e for the 10th workspace. For example \u003ccode\u003e\u0026lt;Alt\u0026gt; + 6\u003c/code\u003e will take you to the 6th workspace. Note that whatever was running on the previous workspace keeps on running there as usual.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1F5_qYEq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8ppveu8hs4g59yh4pmkq.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1F5_qYEq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8ppveu8hs4g59yh4pmkq.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"17\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"windows\" href=\"#windows\"\u003e\n  \u003c/a\u003e\n  Windows\n\u003c/h3\u003e\n\n\u003cp\u003ei3 uses vim bindings for movement. The only difference is that instead of using \u003ccode\u003eh|j|k|l\u003c/code\u003e for movement, it shifts the bindings one key to the right and instead uses \u003ccode\u003ej|k|l|;\u003c/code\u003e. \u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eDefault key binding\u003c/th\u003e\n\u003cth\u003eAction performed\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + v\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSplit window vertically on the next spawn\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + h\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSplit window horizontally on the next spawn\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + [j/k/l/;]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eMove left-right-up an down windows\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + e\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eToggle horizontal and vertical\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + d\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eOpen dmenu\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + q\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eQuit the currently running window\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + r\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRe-load configuration\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + [1-9]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRe-locate the current window to another wprkspace\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + 0\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRe-locate the current window the tenth wprkspace\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + s\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTurn on stacking mode (explained in the next section)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e\u0026lt;Alt\u0026gt; + w\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTurn on tabbed mode (explained in the next section)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"modes-of-operation\" href=\"#modes-of-operation\"\u003e\n  \u003c/a\u003e\n  Modes of Operation\n\u003c/h3\u003e\n\n\u003cp\u003eAs mentioned earlier, i3 uses the tree data structure for storing window references in workspaces. Traversing through these windows is just like tree traversal. Now you have different modes of operation, and each mode tweaks the layout, but all in all it is just a tree data structure underneath. For example, in the given window split pane, the tree will look like the following:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FnR0pgE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wjfhlkpm61land4h1pay.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FnR0pgE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wjfhlkpm61land4h1pay.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NWy6ucar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i6neluoygavqslpn483k.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NWy6ucar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i6neluoygavqslpn483k.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"300\" height=\"173\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"splitv-mode\" href=\"#splitv-mode\"\u003e\n  \u003c/a\u003e\n  Splitv Mode\n\u003c/h4\u003e\n\n\u003cp\u003eThis mode is used for spawning windows which are vertically split. To activate this mode, simple press \u003ccode\u003e\u0026lt;Alt\u0026gt; + v\u003c/code\u003e. After this mode being activated, when you spawn programs next, either using shortcuts or dmenu, they will be vertically split.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FxsY1QGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/771habbjj89lkv8vu0de.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FxsY1QGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/771habbjj89lkv8vu0de.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"splith-mode\" href=\"#splith-mode\"\u003e\n  \u003c/a\u003e\n  Splith Mode\n\u003c/h4\u003e\n\n\u003cp\u003eThis mode is used for spawning windows which are horizontally split. To activate this mode, simple press \u003ccode\u003e\u0026lt;Alt\u0026gt; + h\u003c/code\u003e. After this mode being activated, when you spawn programs next, either using shortcuts or dmenu, they will be horizontally split.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--auJipmAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yzqnlmvglwdqkgt3wqmc.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--auJipmAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yzqnlmvglwdqkgt3wqmc.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eNote\u003c/code\u003e: You can switch between horizontally and vertically split panes using \u003ccode\u003e\u0026lt;Alt\u0026gt; + e\u003c/code\u003e toggle\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"stack-mode\" href=\"#stack-mode\"\u003e\n  \u003c/a\u003e\n  Stack Mode\n\u003c/h4\u003e\n\n\u003cp\u003eStack mode will place each and every tab on top of each other like a stack. Note that it is not actually a stack internally, but only visually so. To activate stack mode press \u003ccode\u003e\u0026lt;Alt\u0026gt; + s\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rCDq2h2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s3l6g8g2csgh3whdb865.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--rCDq2h2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s3l6g8g2csgh3whdb865.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"tabbed-mode\" href=\"#tabbed-mode\"\u003e\n  \u003c/a\u003e\n  Tabbed Mode\n\u003c/h4\u003e\n\n\u003cp\u003eTabbed mode is exactly like the stack mode, the only difference being that it visually places the windows as tabs (the kind you might see on a browser). To activate it, press \u003ccode\u003e\u0026lt;Alt\u0026gt; + w\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uji9KhGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/adcllk01uczfrd8woq7g.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uji9KhGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/adcllk01uczfrd8woq7g.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"configuration\" href=\"#configuration\"\u003e\n  \u003c/a\u003e\n  Configuration\n\u003c/h3\u003e\n\n\u003cp\u003eThe i3 configuration lies in \u003ccode\u003e~/.config/i3/config\u003c/code\u003e file. It uses an easy to use syntax for defining parameters. All of which are well documented on i3's official user manual. In this blog, we will be configuring our status bar as well as changing some key bindings to get started. In the \u003ca href=\"#i3-gaps\"\u003enext section\u003c/a\u003e we will learn how to add gaps between windows in i3. \u003c/p\u003e\n\n\u003cp\u003eSee the full configuration tutorial for i3 \u003ca href=\"https://i3wm.org/docs/4.12/userguide.html#configuring\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"changing-keybindings\" href=\"#changing-keybindings\"\u003e\n  \u003c/a\u003e\n  Changing Keybindings\n\u003c/h4\u003e\n\n\u003cp\u003eIn i3 configuration, keybindings are defined by the \u003ccode\u003ebindsym\u003c/code\u003e keyword, and the modifier (\u003ccode\u003e\u0026lt;Alt\u0026gt;\u003c/code\u003e by default) is defined by \u003ccode\u003e$mod\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eNow I am a long time vim user, so I am used to the vim's usual movement keys (h|j|k|l). In i3 everything is shifted to the left. Now let us try to change that. Find the following lines in the configuration:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wo0kk2gP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m499duiip8hdsp5212pp.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wo0kk2gP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m499duiip8hdsp5212pp.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"367\" height=\"142\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd change it to use h|j|k|l instead of j|k|l|;. For the configuration to take effect, save the file and hit \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; +r\u003c/code\u003e for live reload. You will now see the following prompt on top:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k5EETlwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8huuuext2x9chndq6si0.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k5EETlwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8huuuext2x9chndq6si0.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"38\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWhoa whoa! This wasn't supposed to happen right? I3 throws an error in the form of a red status line whenever there is an error in the configuration. So you will always get to know where you went wrong. How convenient is that! Just a quick show at the error log will make you realize that you cannot bind \u003ccode\u003e\u0026lt;Alt\u0026gt; + h\u003c/code\u003e for moving left since it is already bound (for splith mode). To get rid of this error, just change the binding for splith mode like the following, and you should be good to go! Hit \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + r\u003c/code\u003e after making the change, and voila.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_QnAmAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gxpwpcs2mx88g2swcx77.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z_QnAmAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gxpwpcs2mx88g2swcx77.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"357\" height=\"175\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"configuring-the-status-bar\" href=\"#configuring-the-status-bar\"\u003e\n  \u003c/a\u003e\n  Configuring the Status Bar\n\u003c/h4\u003e\n\n\u003cp\u003eThe bar at the bottom of your screen is called the status bar, or simply \u003cstrong\u003ei3bar\u003c/strong\u003e. It supports very low as well as high level customization, including:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eChanging aesthetics (color, font, opacity). \u003c/li\u003e\n\u003cli\u003eAdding custom configuration\u003c/li\u003e\n\u003cli\u003eAdding custom commands to be executed and shown on the i3bar\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA full set of supported variables and customization can be viewed \u003ca href=\"https://i3wm.org/docs/4.12/userguide.html#_configuring_i3bar\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe following is my configuration, which I have added at the bottom of my \u003ccode\u003e~/.config/i3/config\u003c/code\u003e file:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e# CSS-like element selector\nbar {\n        # For the default i3 status bar information\n        status_command i3status\n\n        # The nproc command will be executed and the result will be \n        # shown on the right side of the i3bar. You can add custom shell\n        # scripts here (after exec)\n        status_command exec /usr/bin/nproc\n\n        # The next two lines are for the font that I am using\n        font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1\n        font pango:DejaVu Sans Mono 14\n\n        # I want by i3bar to be at the top rather than the bottom\n        position top\n\n        # The next section is for the i3bar colors and transparency\n        # i3bar uses the RGBA format for color specification where the A\n        # is for the opacity (which is optional). \n        # The RGBA string will be hexadecimal; so #[__][__][__][__]\n        i3bar_command i3bar --transparency\n        colors {\n            # RGBA format\n            # The fourth option accounts for the opacity \n            background #844685aa\n            statusline #ffffffdd\n            separator #ffffffdd\n        }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAfter saving the configuration and refreshing i3, the bar looks like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--swmv4sTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z4dowy0jj41pgzaw0wiq.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--swmv4sTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z4dowy0jj41pgzaw0wiq.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"15\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"i3-gaps\" href=\"#i3-gaps\"\u003e\n  \u003c/a\u003e\n  I3 gaps\n\u003c/h3\u003e\n\n\u003cp\u003eI3-gaps is a fork of I3 which adds additional functionality such as configuring gaps between windows. The best part about i3-gaps is that it is always kept up to date with the upstream, so any new update in i3 will also be reflected in i3-gaps. Check out the official repository here:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/Airblader\"\u003e\n        Airblader\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/Airblader/i3\"\u003e\n        i3\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A fork of the i3 window manager with gaps and some other features\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/Airblader/i3/actions/workflows/main.yml\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hy_5-KmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Airblader/i3/actions/workflows/main.yml/badge.svg\" alt=\"Build Status\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/Airblader/i3/issues\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/0c5a9f2eb337813fd794929286d3a191c196a77151093fe4b63c60c3f52c49ae/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f416972626c616465722f69332e737667\" alt=\"Issues\" data-canonical-src=\"https://img.shields.io/github/issues/Airblader/i3.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/Airblader/i3/network\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/07f9c9c74a4d945ab17c5d243eba99a1c784f683f7141bbff097ab9787922c3d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f416972626c616465722f69332e737667\" alt=\"Forks\" data-canonical-src=\"https://img.shields.io/github/forks/Airblader/i3.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/Airblader/i3/stargazers\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/fb892ba62600bb4d821476e607c8d804b6aa877b586bdc93a2f8b433ec013f94/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f416972626c616465722f69332e737667\" alt=\"Stars\" data-canonical-src=\"https://img.shields.io/github/stars/Airblader/i3.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch1 dir=\"auto\"\u003e\ni3-gaps\u003c/h1\u003e\n\u003ch2 dir=\"auto\"\u003e\nWhat is i3-gaps?\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003ei3-gaps is a fork of \u003ca href=\"https://www.i3wm.org\" rel=\"nofollow\"\u003ei3wm\u003c/a\u003e, a tiling window manager for X11. It is kept up to date with upstream, adding a few additional features such as gaps between windows (see below for a complete list).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/fbda655d3966bfbcc93ae0f37f5cc54b0dd286345d1f1cd84e2f5cea410c6106/687474703a2f2f692e696d6775722e636f6d2f7938735a45366f2e6a7067\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/fbda655d3966bfbcc93ae0f37f5cc54b0dd286345d1f1cd84e2f5cea410c6106/687474703a2f2f692e696d6775722e636f6d2f7938735a45366f2e6a7067\" alt=\"i3\" data-canonical-src=\"http://i.imgur.com/y8sZE6o.jpg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nHow do I install i3-gaps?\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003ePlease refer to the \u003ca href=\"https://github.com/Airblader/i3/wiki/installation\"\u003ewiki\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nWhere can I get help?\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eFor bug reports or feature requests regarding i3-gaps specifically, open an issue on \u003ca href=\"https://www.github.com/Airblader/i3\"\u003eGitHub\u003c/a\u003e. If your issue is with core i3 functionality, please report it \u003ca href=\"https://www.github.com/i3/i3\"\u003eupstream\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor support \u0026amp; all other kinds of questions, you can ask your question on \u003ca href=\"https://github.com/i3/i3/discussions\"\u003eGitHub Discussions\u003c/a\u003e.\u003c/p\u003e\n\u003ch1 dir=\"auto\"\u003e\nFeatures\u003c/h1\u003e\n\u003ch2 dir=\"auto\"\u003e\ni3\u003c/h2\u003e\n\u003ch3 dir=\"auto\"\u003e\ngaps\u003c/h3\u003e\n\u003cp dir=\"auto\"\u003e\u003cem\u003eNote:\u003c/em\u003e In order to use gaps you need to disable window titlebars. This can be done by adding the following line to your config.\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"# You can also use any non-zero value if you'd like to have a border\nfor_window [class=\u0026quot;.*\u0026quot;] border pixel 0\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003e# You can also use any non-zero value if you'd like to have a border\nfor_window [class=\".*\"] border pixel 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eGaps…\u003c/p\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/Airblader/i3\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNow i3 has PPAs for Ubuntu and AUR's for Arch. If you want to build it from source, for other distributions, \u003ca href=\"https://gist.github.com/boreycutts/6417980039760d9d9dac0dd2148d4783\"\u003ethis\u003c/a\u003e gist will get you started on it. \u003c/p\u003e\n\n\u003cp\u003eOnce you install it, you are good to go. Add the following lines (in the same config file) for configuring gaps between your windows:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e# only works if i3-gaps is installed\n# a window selector should be there\nfor_window [class=\"^.*\"] border pixel 2\n\n# defining inner and outer window gaps\ngaps inner 10\ngaps outer 10\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eSave and reload, and you are good to go. I3-gaps also has a smart gaps feature, where gaps can be turned on and off in a particular workspace in certain scenarios. I recommend checking out the official repository for the same. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h3\u003e\n\n\u003cp\u003eI3 is free of bloat, and is very easy to learn. Even though it might be more complex than simpler alternatives like herbstluftwm, but learning it is easier due to the excellent documentation which makes for a fun exploration. I recommend everyone to try out i3. \u003c/p\u003e\n\n\u003cp\u003eThe developers at i3 took a rather radical approach, building this wm from scratch, using a tree data structure. But the more I read up about i3, the more I see how well they have utilized this idea. I3 is not the best wm by far, but it is certainly one of the better ones. \u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://i3wm.org/docs/userguide.html\"\u003eI3 user guide\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "i3-the-improved-tiling-window-manager-42k7",
		"social_image": null,
		"title": "I3: The Improved Tiling Window Manager",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-10T16:25:18.541Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2021-09-08T06:54:38.539Z",
		"published_at": "2020-04-11T04:26:06.964Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "Awesome, or *awesomewm*, is a window manager which comes with a lot of features, right out of the box. It is written in the Lua programming language (almost), but configuring it does not require a lot of knowledge about the same. It is ideal for people starting out with window managers due to the fact that it is shipped with a lot of useful functionality which you would otherwise have to configure separately.\n\n\n* [Features](#features)\n* [Setting up](#setting-up)\n* [Getting started](#getting-started)\n* [Tags](#tags)\n* [Layouts](#layouts)\n* [Configuration](#configuration)\n   * [Changing default keybindings](#changing-default-keybindings)\n   * [Adding/removing layouts](#adding-and-removing-layouts)\n   * [Adding startup processes](#adding-startup-processes)\n   * [Adding useless gaps between windows](#adding-useless-gaps)\n* [Verdict](#verdict)\n* [References](#references)\n\n---\n\n### Features\n\n* Awesomewm is very stable, fast and with a small codebase and footprint.\n* It uses tags instead of workspaces: windows can be placed on several tags and displayed at the same time.\n* It can be configured during runtime. Which means that any customization made does not require the service to be restarted.\n* It uses the asynchronous XCB library instead of the old, synchronous XLIB.\n* It comes with a very comprehensive application menu as well as a run menu. \n\n\n\n---\n\n### Setting Up\n\nAwesomewm is available on most source repositories. In addition, you can download the release and build it from source.\n\n{% github https://github.com/awesomeWM/awesome %}\n\nThe easiest way to get started (on debian based systems) is this:\n\n```sh\nsudo apt install awesome\n```\nTo run it, simple add the following line in your `~/.xsession` file:\n\n```\nexec awesome\n```\n\nLogout and log back in again, and boom! You are good to go.\n\n---\n\n### Getting Started\n\nWhen you login, awesomewm already has a default wallpaper set. Along with 9 tags on the menubar. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/g2mpwn6qfzpgrc39zxfr.png)\n\nThe default modifier in awesomewm is `\u003cWin\u003e`. To spawn a terminal, press `\u003cWin\u003e + \u003cEnter\u003e`. To get a list of all shortcuts, awesomewm provides a comprehensive cheat-sheet. Just press `\u003cWin\u003e + s` to view it. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/kwmwkdi8rcnw32qqafhb.png)\n\nTo activate the application menu simply click on the top left corner of the menu bar, or right click anywhere. You will be greeted with something like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/d2ysdz6u3iokqcgvsiye.png)\n\nThis menu can be used as a quick launcher, and even be configured to hold items which you want. In addition, `\u003cWin\u003e + r` can be used for spawning a run menu on the menubar. But I prefer dmenu instead.\n\n---\n\n### Tags\n\nIn awesomewm, the status bar shows the number of active tags. Awesome gives you 9 tags that we can switch between. To do so, simply hit `\u003cWin\u003e + [1-9]`. For example `\u003cWin\u003e + 6` will take you to the 6th workspace. Note that whatever was running on the previous workspace keeps on running there as usual.\n\nTo shift a currently running window to another tag, simply press `\u003cWin\u003e + \u003cShift\u003e + [1-9]`.\n\n---\n\n### Layouts\n\nIn awesomewm, movement between windows is done using `\u003cWin\u003e + j|k` and window resizing is done using `\u003cWin\u003e + h|l`.\n\nAwesome offers different layouts per tag, which can be viewed on the left top corner of the menu bar and can be changed by clicking on the same:\n\n \t\nCornernew: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornernew.png) \t\nCornetnww: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornernww.png) \t\nCornerser: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornersew.png) \t\nCornersww: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornersww.png) \t\nDwindlew: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/dwindlew.png) \t\nFairhw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fairhw.png) \t\nFairvw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fairvw.png) \t\nFloatingw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/floatingw.png) \t\nFullscreenw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fullscreenw.png) \t\nMagnifierw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/magnifierw.png) \t\nMaxw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/maxw.png) \t\nSpiralw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/spiralw.png) \t\nTilebottomw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tilebottomw.png)\t\nTileleftw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tileleftw.png) \t\nTiletopw: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tiletopw.png)\nTilww: ![Alt Text](https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tilew.png)\n\n\n\n---\n\n\n### Configuration\n\nThe awesome configuration lies in `$XDG_CONFIG_HOME/awesome/rc.lua` file. For example: `/etc/xdg/awesome/rc.lua`. By default awesomewm looks at the `~/.config/awesome/rc.lua` file if it can find it. If it can't then it defaults to the aforementioned configuration. \n\nTo edit it, simply run the following command for getting started:\n\n```sh\ncp /etc/xdg/awesome/rc.lua ~/.config/awesome/\nvim ~/.config/awesome/rc.lua\n```\n\nAfter making any changes in `rc.lua`, awesomewm can be reloaded by pressing `\u003cWin\u003e + \u003cCtrl\u003e + r`. In addition, the awesome-client can also be used for the same: \n\n```sh\necho 'awesome.restart()' | awesome-client\n```\n\nIn this blog, we will be configuring the following things:\n\n* [Changing default keybindings](#changing-default-keybindings)\n* [Adding/removing layouts](#adding-and-removing-layouts)\n* [Adding useless gaps between windows](#adding-useless-gaps)\n* [Adding startup processes](#adding-startup-processes)\n\n\n---\n\n#### Changing Default Keybindings\n\nThe configuration file, `rc.lua`, contains a *globalkeys* option which is a table that stores keybindings.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/gkzcowbyex77tkb7gqug.png)\n\nThe first section stores the modifier keys, eg: `{modkey,}`,  `{modkey, \"Shift\"}` or `{modkey, \"Control\"}`. The second part can be used to add keys to be pressed along with the modifier, and the third part is the function to be performed when the particular binding is pressed. \n\nEach keybinding is a part of a group and a description can be provided to go along with them. Adding a keybinding is as simple as copy-pasting the above binding and changing it with respect to what action you want to perform. For example, the following binding spawns firefox whenever I press `modkey + b`: \n\n```lua\nawful.key({modkey, }, \"b\", awful.spawn(\"firefox\"))\n```\n\n---\n\n#### Adding Startup Processes\n\nYou can spawn processes or applications easily by using the following commands in `rc.lua`. To open these applications on startup, simply add the commands at the bottom of the configuration:\n\n```lua\n-- spawning a program\nawful.spawn(\"firefox\")\n\n-- running a script inside a shell\nawful.spawn.with_shell(\"launch.sh\")\n\n-- setting wallpaper using nitrogen\nawful.spawn.with_shell(\"nitrogen --set-scaled /usr/share/backgrounds/crysis.jpg\")\n```\n\n---\n\n#### Adding and Removing Layouts\n\nLain is a library which provides a lot of useful commands for configuring widgets, adding layouts and other useful tweaks. Follow the repository to see how to use lain to its fullest:\n\n{% github https://github.com/lcpz/lain %}\n\nLet us get started by importing lain in our `rc.lua`:\n\n```lua\nlocal lain = require(\"lain\")\n```\n\nTo add a layout, namely [centerwork](https://github.com/lcpz/lain/wiki/Layouts#centerwork), defined by lain, simply go to the `awful.layout.layouts` section and add `lain.layout.centerwork`. Other layouts can be removed from here, if you want to. The order of the layouts matter!\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/zsk8a92li9wvmco1hift.png)\n\n\n---\n\n#### Adding Useless Gaps\n\nUseless gaps refers to the space between windows that can be added for aesthetic purposes. For example: \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/20bs2uv80znh75e4cema.png)\n\n\nThese gaps can be configured at runtime by adding the following keybindings to *globalkeys*:\n\n```lua\nawful.key({ modkey, \"Control\" }, \"=\", function () lain.util.useless_gaps_resize(1) end),\n\nawful.key({ modkey, \"Control\" }, \"-\", function () lain.util.useless_gaps_resize(-1) end),\n```\n\nThese commands will resize the gaps by a factor of 1 pixel every time we press `modkey + Control + =|-`. \n\n---\n\n\n### Verdict\n\nEven though configuring awesomewm is not as easy as i3, it offers a lot of things right out of the box and is easy to get started with. Lua configuration is slightly challenging when it comes to adding additional libraries and trying to keep the code modular but there is a very supportive community and third party libraries for the same. \n\nAwesome is a solid window manager for both beginners and experts, and I highly recommend it for both. \n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: |\n| Learning curve (lesser is better)| :heart: :heart: :heart: |\n| Productivity | :heart: :heart: :heart: :heart: |\n| Fun | :heart: :heart: |\n\n---\n\n### References\n\n* [Official Website](https://awesomewm.org/)",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 10,
		"description": "Awesome, or awesomewm, is a window manager which comes with a lot of features, right out of the box....",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/oghr6plxpkyqrhzlsbvi.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/awesome-a-versatile-window-manager-4km2",
		"public_reactions_count": 53,
		"processed_html": "\u003cp\u003eAwesome, or \u003cem\u003eawesomewm\u003c/em\u003e, is a window manager which comes with a lot of features, right out of the box. It is written in the Lua programming language (almost), but configuring it does not require a lot of knowledge about the same. It is ideal for people starting out with window managers due to the fact that it is shipped with a lot of useful functionality which you would otherwise have to configure separately.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up\"\u003eSetting up\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-started\"\u003eGetting started\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tags\"\u003eTags\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#layouts\"\u003eLayouts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#changing-default-keybindings\"\u003eChanging default keybindings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#adding-and-removing-layouts\"\u003eAdding/removing layouts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#adding-startup-processes\"\u003eAdding startup processes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#adding-useless-gaps\"\u003eAdding useless gaps between windows\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verdict\"\u003eVerdict\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eAwesomewm is very stable, fast and with a small codebase and footprint.\u003c/li\u003e\n\u003cli\u003eIt uses tags instead of workspaces: windows can be placed on several tags and displayed at the same time.\u003c/li\u003e\n\u003cli\u003eIt can be configured during runtime. Which means that any customization made does not require the service to be restarted.\u003c/li\u003e\n\u003cli\u003eIt uses the asynchronous XCB library instead of the old, synchronous XLIB.\u003c/li\u003e\n\u003cli\u003eIt comes with a very comprehensive application menu as well as a run menu. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"setting-up\" href=\"#setting-up\"\u003e\n  \u003c/a\u003e\n  Setting Up\n\u003c/h3\u003e\n\n\u003cp\u003eAwesomewm is available on most source repositories. In addition, you can download the release and build it from source.\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/awesomeWM\"\u003e\n        awesomeWM\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/awesomeWM/awesome\"\u003e\n        awesome\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      awesome window manager\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\nReadme\u003c/h1\u003e\n\u003ch2 dir=\"auto\"\u003e\nAbout Awesome\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eAwesome is a highly configurable, next generation framework window manager for X.\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nBuilding and installation\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eAfter extracting the dist tarball or cloning the repository, run:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-shell notranslate position-relative overflow-auto js-code-highlight\" data-snippet-clipboard-copy-content=\"make\nsudo make install\"\u003e\n\u003cpre\u003emake\nsudo make install\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis will\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003ecreate a build directory at \u003ccode\u003e./build\u003c/code\u003e,\u003c/li\u003e\n\u003cli\u003erun \u003ccode\u003ecmake\u003c/code\u003e,\u003c/li\u003e\n\u003cli\u003ebuild Awesome and\u003c/li\u003e\n\u003cli\u003einstall it to the default prefix path \u003ccode\u003e/usr/local\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003eAlternatively to the above, you can generate a \u003ccode\u003e.deb\u003c/code\u003e or \u003ccode\u003e.rpm\u003c/code\u003e package, for easy installation management:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-shell notranslate position-relative overflow-auto js-code-highlight\" data-snippet-clipboard-copy-content=\"make package\nsudo dpkg -i awesome-x.y.z.deb\n# or\nsudo rpm -Uvh awesome-x.y.z.rpm\"\u003e\n\u003cpre\u003emake package\nsudo dpkg -i awesome-x.y.z.deb\n\u003cspan class=\"pl-c\"\u003e\u003cspan class=\"pl-c\"\u003e#\u003c/span\u003e or\u003c/span\u003e\nsudo rpm -Uvh awesome-x.y.z.rpm\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003ch3 dir=\"auto\"\u003e\nAdvanced options and testing\u003c/h3\u003e\n\u003cp dir=\"auto\"\u003eA full list of dependencies, more advanced build options, as well as instructions on how to use the test suite can be found \u003ca href=\"https://awesomewm.org/apidoc/documentation/10-building-and-testing.md.html\" rel=\"nofollow\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 dir=\"auto\"\u003e\nInstalling current git master as a package receipts\u003c/h3\u003e\n\u003ch4 dir=\"auto\"\u003e\nArch Linux AUR\u003c/h4\u003e\n\u003cdiv class=\"highlight highlight-source-shell notranslate position-relative overflow-auto js-code-highlight\" data-snippet-clipboard-copy-content=\"sudo pacman -S --needed base-devel git\ngit clone https://aur.archlinux.org/awesome-git.git\ncd awesome-git\nmakepkg -fsri\"\u003e\n\u003cpre\u003esudo pacman -S --needed base-devel git\ngit clone https://aur.archlinux.org/awesome-git.git\n\u003cspan class=\"pl-c1\"\u003ecd\u003c/span\u003e awesome-git\nmakepkg -fsri\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003ch4 dir=\"auto\"\u003e\nDebian-based\u003c/h4\u003e\n\u003cdiv class=\"highlight highlight-source-shell notranslate position-relative overflow-auto js-code-highlight\" data-snippet-clipboard-copy-content=\"sudo apt build-dep awesome\ngit clone https://github.com/awesomewm/awesome\ncd awesome\nmake package\nsudo apt install *.deb\"\u003e\n\u003cpre\u003esudo apt build-dep awesome\ngit clone https://github.com/awesomewm/awesome\n\u003cspan class=\"pl-c1\"\u003ecd\u003c/span\u003e awesome\nmake package\nsudo\u003c/pre\u003e…\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/awesomeWM/awesome\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThe easiest way to get started (on debian based systems) is this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003eawesome\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eTo run it, simple add the following line in your \u003ccode\u003e~/.xsession\u003c/code\u003e file:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eexec awesome\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eLogout and log back in again, and boom! You are good to go.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"getting-started\" href=\"#getting-started\"\u003e\n  \u003c/a\u003e\n  Getting Started\n\u003c/h3\u003e\n\n\u003cp\u003eWhen you login, awesomewm already has a default wallpaper set. Along with 9 tags on the menubar. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jr5EkY1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2mpwn6qfzpgrc39zxfr.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--jr5EkY1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2mpwn6qfzpgrc39zxfr.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"550\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe default modifier in awesomewm is \u003ccode\u003e\u0026lt;Win\u0026gt;\u003c/code\u003e. To spawn a terminal, press \u003ccode\u003e\u0026lt;Win\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e. To get a list of all shortcuts, awesomewm provides a comprehensive cheat-sheet. Just press \u003ccode\u003e\u0026lt;Win\u0026gt; + s\u003c/code\u003e to view it. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xozRmdEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwmwkdi8rcnw32qqafhb.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xozRmdEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kwmwkdi8rcnw32qqafhb.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"800\" height=\"600\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eTo activate the application menu simply click on the top left corner of the menu bar, or right click anywhere. You will be greeted with something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uaWj5_uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d2ysdz6u3iokqcgvsiye.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uaWj5_uo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d2ysdz6u3iokqcgvsiye.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"529\" height=\"361\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThis menu can be used as a quick launcher, and even be configured to hold items which you want. In addition, \u003ccode\u003e\u0026lt;Win\u0026gt; + r\u003c/code\u003e can be used for spawning a run menu on the menubar. But I prefer dmenu instead.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"tags\" href=\"#tags\"\u003e\n  \u003c/a\u003e\n  Tags\n\u003c/h3\u003e\n\n\u003cp\u003eIn awesomewm, the status bar shows the number of active tags. Awesome gives you 9 tags that we can switch between. To do so, simply hit \u003ccode\u003e\u0026lt;Win\u0026gt; + [1-9]\u003c/code\u003e. For example \u003ccode\u003e\u0026lt;Win\u0026gt; + 6\u003c/code\u003e will take you to the 6th workspace. Note that whatever was running on the previous workspace keeps on running there as usual.\u003c/p\u003e\n\n\u003cp\u003eTo shift a currently running window to another tag, simply press \u003ccode\u003e\u0026lt;Win\u0026gt; + \u0026lt;Shift\u0026gt; + [1-9]\u003c/code\u003e.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"layouts\" href=\"#layouts\"\u003e\n  \u003c/a\u003e\n  Layouts\n\u003c/h3\u003e\n\n\u003cp\u003eIn awesomewm, movement between windows is done using \u003ccode\u003e\u0026lt;Win\u0026gt; + j|k\u003c/code\u003e and window resizing is done using \u003ccode\u003e\u0026lt;Win\u0026gt; + h|l\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAwesome offers different layouts per tag, which can be viewed on the left top corner of the menu bar and can be changed by clicking on the same:\u003c/p\u003e\n\n\u003cp\u003eCornernew: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NI-TgHvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornernew.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NI-TgHvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornernew.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nCornetnww: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--H2DV8iAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornernww.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--H2DV8iAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornernww.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nCornerser: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bNVn6r1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornersew.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bNVn6r1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornersew.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nCornersww: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DdnjOvk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornersww.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DdnjOvk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/cornersww.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nDwindlew: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s---SPwKG5g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/dwindlew.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s---SPwKG5g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/dwindlew.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nFairhw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8Is4jxrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fairhw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8Is4jxrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fairhw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nFairvw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--u2--doMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fairvw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--u2--doMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fairvw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nFloatingw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lGtxzMov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/floatingw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lGtxzMov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/floatingw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nFullscreenw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JKKlbZw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fullscreenw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JKKlbZw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/fullscreenw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nMagnifierw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0wiO0yyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/magnifierw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0wiO0yyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/magnifierw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nMaxw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NFD8rUi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/maxw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NFD8rUi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/maxw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nSpiralw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ig8LHqqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/spiralw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ig8LHqqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/spiralw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nTilebottomw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--F6YnCbH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tilebottomw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--F6YnCbH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tilebottomw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nTileleftw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CVq_MtfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tileleftw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CVq_MtfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tileleftw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\nTiletopw: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_N4_nsrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tiletopw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_N4_nsrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tiletopw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003cbr\u003e\nTilww: \u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R21yWUj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tilew.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R21yWUj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/awesomeWM/awesome/raw/master/themes/default/layouts/tilew.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"64\" height=\"64\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"configuration\" href=\"#configuration\"\u003e\n  \u003c/a\u003e\n  Configuration\n\u003c/h3\u003e\n\n\u003cp\u003eThe awesome configuration lies in \u003ccode\u003e$XDG_CONFIG_HOME/awesome/rc.lua\u003c/code\u003e file. For example: \u003ccode\u003e/etc/xdg/awesome/rc.lua\u003c/code\u003e. By default awesomewm looks at the \u003ccode\u003e~/.config/awesome/rc.lua\u003c/code\u003e file if it can find it. If it can't then it defaults to the aforementioned configuration. \u003c/p\u003e\n\n\u003cp\u003eTo edit it, simply run the following command for getting started:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e /etc/xdg/awesome/rc.lua ~/.config/awesome/\nvim ~/.config/awesome/rc.lua\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAfter making any changes in \u003ccode\u003erc.lua\u003c/code\u003e, awesomewm can be reloaded by pressing \u003ccode\u003e\u0026lt;Win\u0026gt; + \u0026lt;Ctrl\u0026gt; + r\u003c/code\u003e. In addition, the awesome-client can also be used for the same:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e'awesome.restart()'\u003c/span\u003e | awesome-client\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eIn this blog, we will be configuring the following things:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#changing-default-keybindings\"\u003eChanging default keybindings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#adding-and-removing-layouts\"\u003eAdding/removing layouts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#adding-useless-gaps\"\u003eAdding useless gaps between windows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#adding-startup-processes\"\u003eAdding startup processes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"changing-default-keybindings\" href=\"#changing-default-keybindings\"\u003e\n  \u003c/a\u003e\n  Changing Default Keybindings\n\u003c/h4\u003e\n\n\u003cp\u003eThe configuration file, \u003ccode\u003erc.lua\u003c/code\u003e, contains a \u003cem\u003eglobalkeys\u003c/em\u003e option which is a table that stores keybindings.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ow6cFufN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gkzcowbyex77tkb7gqug.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ow6cFufN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gkzcowbyex77tkb7gqug.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"581\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe first section stores the modifier keys, eg: \u003ccode\u003e{modkey,}\u003c/code\u003e,  \u003ccode\u003e{modkey, \"Shift\"}\u003c/code\u003e or \u003ccode\u003e{modkey, \"Control\"}\u003c/code\u003e. The second part can be used to add keys to be pressed along with the modifier, and the third part is the function to be performed when the particular binding is pressed. \u003c/p\u003e\n\n\u003cp\u003eEach keybinding is a part of a group and a description can be provided to go along with them. Adding a keybinding is as simple as copy-pasting the above binding and changing it with respect to what action you want to perform. For example, the following binding spawns firefox whenever I press \u003ccode\u003emodkey + b\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight lua\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eawful\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\u003cspan class=\"n\"\u003emodkey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"b\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eawful\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espawn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"firefox\"\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"adding-startup-processes\" href=\"#adding-startup-processes\"\u003e\n  \u003c/a\u003e\n  Adding Startup Processes\n\u003c/h4\u003e\n\n\u003cp\u003eYou can spawn processes or applications easily by using the following commands in \u003ccode\u003erc.lua\u003c/code\u003e. To open these applications on startup, simply add the commands at the bottom of the configuration:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight lua\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e-- spawning a program\u003c/span\u003e\n\u003cspan class=\"n\"\u003eawful\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espawn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"firefox\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- running a script inside a shell\u003c/span\u003e\n\u003cspan class=\"n\"\u003eawful\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espawn\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_shell\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"launch.sh\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- setting wallpaper using nitrogen\u003c/span\u003e\n\u003cspan class=\"n\"\u003eawful\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003espawn\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewith_shell\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"nitrogen --set-scaled /usr/share/backgrounds/crysis.jpg\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"adding-and-removing-layouts\" href=\"#adding-and-removing-layouts\"\u003e\n  \u003c/a\u003e\n  Adding and Removing Layouts\n\u003c/h4\u003e\n\n\u003cp\u003eLain is a library which provides a lot of useful commands for configuring widgets, adding layouts and other useful tweaks. Follow the repository to see how to use lain to its fullest:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/lcpz\"\u003e\n        lcpz\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/lcpz/lain\"\u003e\n        lain\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      Awesome WM complements\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"rst\" data-path=\"README.rst\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\nLain\u003c/h1\u003e\n\u003ch2 id=\"user-content-layouts-widgets-and-utilities-for-awesome-wm-4-x\" dir=\"auto\"\u003e\nLayouts, widgets and utilities for Awesome WM 4.x\u003c/h2\u003e\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable frame=\"void\" rules=\"none\"\u003e\n\u003ctbody valign=\"top\"\u003e\n\u003ctr\u003e\n\u003cth\u003eAuthor:\u003c/th\u003e\n\u003ctd\u003eLuca CPZ\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003cth\u003eVersion:\u003c/th\u003e\n\u003ctd\u003egit\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003cth\u003eLicense:\u003c/th\u003e\n\u003ctd\u003e\u003ca href=\"http://www.gnu.org/licenses/gpl-2.0.html\" rel=\"nofollow\"\u003eGNU-GPL2\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003cth\u003eSource:\u003c/th\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/lcpz/lain\"\u003ehttps://github.com/lcpz/lain\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\u003ch2 dir=\"auto\"\u003e\nDescription\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eSuccessor of \u003ca href=\"https://github.com/vain/awesome-vain\"\u003eawesome-vain\u003c/a\u003e, this module provides alternative layouts, asynchronous widgets and utility functions for \u003ca href=\"https://github.com/awesomeWM/awesome\"\u003eAwesome\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nContributions\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eConstructive criticism and suggestions are welcome.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you want to create a pull request, make sure that:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eYour code fits with the general style of the module. In particular, you should use the same indentation pattern that the code uses, and also avoid adding space at the ends of lines.\u003c/li\u003e\n\u003cli\u003eYour code its easy to understand, maintainable, and modularized. You should also avoid code duplication wherever possible by adding functions to or using \u003ca href=\"https://github.com/lcpz/lain/blob/master/helpers.lua\"\u003elain.helpers\u003c/a\u003e. If something is unclear, or you can not write it in such a way that it will be clear, explain it with a comment.\u003c/li\u003e\n\u003cli\u003eYou test your changes before submitting to make sure that your code works and…\u003c/li\u003e\n\u003c/ul\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/lcpz/lain\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eLet us get started by importing lain in our \u003ccode\u003erc.lua\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight lua\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elocal\u003c/span\u003e \u003cspan class=\"n\"\u003elain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"lain\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eTo add a layout, namely \u003ca href=\"https://github.com/lcpz/lain/wiki/Layouts#centerwork\"\u003ecenterwork\u003c/a\u003e, defined by lain, simply go to the \u003ccode\u003eawful.layout.layouts\u003c/code\u003e section and add \u003ccode\u003elain.layout.centerwork\u003c/code\u003e. Other layouts can be removed from here, if you want to. The order of the layouts matter!\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_IunQzqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zsk8a92li9wvmco1hift.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_IunQzqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zsk8a92li9wvmco1hift.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"523\" height=\"477\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"adding-useless-gaps\" href=\"#adding-useless-gaps\"\u003e\n  \u003c/a\u003e\n  Adding Useless Gaps\n\u003c/h4\u003e\n\n\u003cp\u003eUseless gaps refers to the space between windows that can be added for aesthetic purposes. For example: \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ENnhCwRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/20bs2uv80znh75e4cema.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ENnhCwRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/20bs2uv80znh75e4cema.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThese gaps can be configured at runtime by adding the following keybindings to \u003cem\u003eglobalkeys\u003c/em\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight lua\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eawful\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"n\"\u003emodkey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Control\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"=\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003elain\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euseless_gaps_resize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eawful\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"n\"\u003emodkey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Control\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"-\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"n\"\u003elain\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eutil\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euseless_gaps_resize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThese commands will resize the gaps by a factor of 1 pixel every time we press \u003ccode\u003emodkey + Control + =|-\u003c/code\u003e. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h3\u003e\n\n\u003cp\u003eEven though configuring awesomewm is not as easy as i3, it offers a lot of things right out of the box and is easy to get started with. Lua configuration is slightly challenging when it comes to adding additional libraries and trying to keep the code modular but there is a very supportive community and third party libraries for the same. \u003c/p\u003e\n\n\u003cp\u003eAwesome is a solid window manager for both beginners and experts, and I highly recommend it for both. \u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://awesomewm.org/\"\u003eOfficial Website\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "awesome-a-versatile-window-manager-4km2",
		"social_image": null,
		"title": "Awesome: A Versatile Window Manager",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-11T02:26:04.568Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-06-15T17:15:21.048Z",
		"published_at": "2020-04-15T10:22:14.548Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "Compositors are a very important part of the aesthetics of any linux desktop environment. In this blog, we will be looking at the following:\n\n* [What are Compositors](#what-are-compositors)\n* [How Compositors Work](#how-compositors-work)\n* [When to use a Compositor](#when-to-use-a-compositor)\n* [When NOT to use a Compositor](#when-not-to-use-a-compositor)\n* [The Compton Compositor](#compton)\n* [The Picom Compositor](#picom)\n* [Configuring the Compositor](#configuring-the-compositor)\n* [Useful Links](#useful-links)\n\n---\n\n### What are Compositors\n\nA compositor is a software which interacts with the window system as well as graphics in linux to produce:\n\n* Transparency in windows\n* Transition animations\n* Drop shadows around windows which give them a 3D effect\n* V sync: Waits for the display to update before updating the display\n\nWith compositor:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/2t30r5vqbamlg0zp1ltd.png)\n\nWithout compositor:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/64y2sjq4fq10id6cwu6n.png)\n\nAs you can see, using compositors in a linux desktop environment adds flavour to the aesthetics. Now let us see how they work.\n\n---\n\n### How Compositors Work\n\n\u003e The compositer causes an entire sub-tree of a window hierarchy to be rendered to an off-screen buffer. Applications can then take the contents of that buffer and do whatever they like. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/7ejh54l4srsx6pxdmrlq.png)\n\nThe off-screen buffer can be automatically merged into the parent window or merged by external programs, called compositing managers. Maintaining a buffer like this makes it easy to add additional frames during a window state change, such as fade-in and fade-out animations. Each frame of each running application goes through the compositor.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/i3trco1aa9hv3cg53ehg.png)\n\n---\n\n### When to use a Compositor\n\nA compositor should be used if there is a need of transparency, transition animations, v-sync and similar aesthetic features. Note that most desktop environments (like gnome) come with their own integrated compositors. Even some window managers like Compiz, Enlightenment, KWin, Marco, Metacity, Muffin, Mutter, Xfwm, do compositing on their own.\n\nYou would need to install a compositor separately if you are using a minimalistic desktop environment of window manager such as dwm, i3 or awesome. In such a case, since the environment is bare-bones (in the order of 1 to 5 megabytes), it is not shipped with a compositor off the shelf. In such cases, compositors like *compton* or *picom* can be used.\n\n---\n\n### When NOT to use a Compositor\n\nThe mechanism behind a compositor revolves around maintaining an off-screen buffer and passing that around different windows. While this might add a lot of effects to your window manager or desktop environment, it is NOT ideal during gaming, where it causes latency. \n\nWhile gaming, not using a compositor might lead to the lack of v-sync (unless you turn v-sync on in-game) and a lot of screen tearing, but it does away with latency between frames. I would recommend turning the compositor off while gaming. The drawbacks can be avoided if hardware V-sync is used, but it requires altering the X11 config for synchronization at a graphics driver level. Specifically, enabling the **ForceFullCompositionPipeline** option for use with nvidia graphics (and **TearFree** option in the case of Intel) . In such a case, the compositor would not have to be turned off while gaming since v-sync will be offloaded to the graphics driver instead of the compositor itself. This would of course require the v-sync in the compositor to be turned off.\n\n--- \n\n### Compton\n\nCompton is a light weight and standalone compositor for the X Window System. It is a fork of the *xcompmgr-dana* compositor, which in turn is a fork of the *xcompmgr* compositor.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/4ockleu4txe7ds0ugwfm.png)\n\nIn addition to xcompmgr-dana, it supports the OpenGL backend, as well as colored drop-shadows. It can be easily installed for your distribution using official repos. For debain it can be installed like this:\n\n```sh\n# install comption\nsudo apt install compton\n\n# run compton in the background\ncompton \u0026\n```\n\nCompton can be added as a startup script for the window manager of your choice.\n\n---\n\n### Picom\n\nAlthough compton is a pretty solid standalone compositor for X11 but sadly it is not regularly maintained anymore. Picom is an active fork of compton which aims to battle the code complexity of compton in order to draw more developers into contributing to the project.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/5gjftrz0u12rs9bjc5nf.png)\n\nFor getting started with picom, I recommend building it from source. For debain based systems, the following dependancies need to be installed and subsequently, the following commands can be used to build picom:\n\n```sh\n# Debian specific command. The next few commands are for all distros\nsudo apt install libxext-dev libxcb1-dev libxcb-damage0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-randr0-dev libxcb-composite0-dev libxcb-image0-dev libxcb-present-dev libxcb-xinerama0-dev libxcb-glx0-dev libpixman-1-dev libdbus-1-dev libconfig-dev libgl1-mesa-dev  libpcre2-dev  libevdev-dev uthash-dev libev-dev libx11-xcb-dev\n\n# clone the project and go into it\ngit clone https://github.com/yshui/picom \u0026\u0026 cd picom\n\n# Use the meson build system (written in python), to make a ninja build \nmeson --buildtype=release . build\n\n# Use the ninja build file to proceed\nninja -C build\n\n# Copy the resultant binary into PATH\ncp build/src /usr/local/bin\n\n# Run picom in the background (this command can be added to the autostart)\npicom \u0026 \n```\n\n---\n\n### Configuring the Compositor\n\nCompositors like compton and picom are highly configurable. From customized colored drop shadows, to the amount of transparency can be set both globally, and for certain windows in specific.\n\nA sample config for picom can be found in `/etc/xdg/picom.conf`. [Here](https://github.com/yshui/picom/blob/next/picom.sample.conf) is a copy of the same. To get started, simply copy the configuration to `~/.config/picom/picom.conf`.\n\n```sh\ncp /etc/xdg/picom.conf ~/.config/picom/\nvim ~/.config/picom/picom.conf\n```\n\nAll of the available options are mentioned in the comments. After making a change, simply edit the configuration and save. The compositor will reload automatically. \n\nTo add a compositor to your window manager, simply put the following line in your `~/.xsession`:\n\n```sh\n# Start compositor in the background\npicom \u0026 # or compton \u0026 (in case you want to use compton)\n\n# Execute window manager\nexec awesome\n```\n\n---\n\n### Useful Links\n\n{% github https://github.com/yshui/picom %}\n\n{% github https://github.com/chjj/compton %}\n\n[Picom Configuration](https://wiki.archlinux.org/index.php/Picom#Configuration)\n\n[Offloading V-sync to the nvidia graphics](https://wiki.archlinux.org/index.php/NVIDIA/Troubleshooting#Avoid_screen_tearing)",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 3,
		"description": "Compositors are a very important part of the aesthetics of any linux desktop environment. In this blo...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/j7lww4t7wdnl66gzxcu4.jpg",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/compositors-in-linux-1hhb",
		"public_reactions_count": 43,
		"processed_html": "\u003cp\u003eCompositors are a very important part of the aesthetics of any linux desktop environment. In this blog, we will be looking at the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#what-are-compositors\"\u003eWhat are Compositors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#how-compositors-work\"\u003eHow Compositors Work\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#when-to-use-a-compositor\"\u003eWhen to use a Compositor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#when-not-to-use-a-compositor\"\u003eWhen NOT to use a Compositor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#compton\"\u003eThe Compton Compositor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#picom\"\u003eThe Picom Compositor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuring-the-compositor\"\u003eConfiguring the Compositor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#useful-links\"\u003eUseful Links\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"what-are-compositors\" href=\"#what-are-compositors\"\u003e\n  \u003c/a\u003e\n  What are Compositors\n\u003c/h3\u003e\n\n\u003cp\u003eA compositor is a software which interacts with the window system as well as graphics in linux to produce:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTransparency in windows\u003c/li\u003e\n\u003cli\u003eTransition animations\u003c/li\u003e\n\u003cli\u003eDrop shadows around windows which give them a 3D effect\u003c/li\u003e\n\u003cli\u003eV sync: Waits for the display to update before updating the display\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith compositor:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MzgFCyCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2t30r5vqbamlg0zp1ltd.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MzgFCyCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2t30r5vqbamlg0zp1ltd.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"427\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWithout compositor:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PCfmETpS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64y2sjq4fq10id6cwu6n.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PCfmETpS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64y2sjq4fq10id6cwu6n.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"425\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAs you can see, using compositors in a linux desktop environment adds flavour to the aesthetics. Now let us see how they work.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"how-compositors-work\" href=\"#how-compositors-work\"\u003e\n  \u003c/a\u003e\n  How Compositors Work\n\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe compositer causes an entire sub-tree of a window hierarchy to be rendered to an off-screen buffer. Applications can then take the contents of that buffer and do whatever they like. \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OCGs90cH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ejh54l4srsx6pxdmrlq.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OCGs90cH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ejh54l4srsx6pxdmrlq.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"435\" height=\"460\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe off-screen buffer can be automatically merged into the parent window or merged by external programs, called compositing managers. Maintaining a buffer like this makes it easy to add additional frames during a window state change, such as fade-in and fade-out animations. Each frame of each running application goes through the compositor.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ApaA_zba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i3trco1aa9hv3cg53ehg.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ApaA_zba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i3trco1aa9hv3cg53ehg.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"762\" height=\"519\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"when-to-use-a-compositor\" href=\"#when-to-use-a-compositor\"\u003e\n  \u003c/a\u003e\n  When to use a Compositor\n\u003c/h3\u003e\n\n\u003cp\u003eA compositor should be used if there is a need of transparency, transition animations, v-sync and similar aesthetic features. Note that most desktop environments (like gnome) come with their own integrated compositors. Even some window managers like Compiz, Enlightenment, KWin, Marco, Metacity, Muffin, Mutter, Xfwm, do compositing on their own.\u003c/p\u003e\n\n\u003cp\u003eYou would need to install a compositor separately if you are using a minimalistic desktop environment of window manager such as dwm, i3 or awesome. In such a case, since the environment is bare-bones (in the order of 1 to 5 megabytes), it is not shipped with a compositor off the shelf. In such cases, compositors like \u003cem\u003ecompton\u003c/em\u003e or \u003cem\u003epicom\u003c/em\u003e can be used.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"when-not-to-use-a-compositor\" href=\"#when-not-to-use-a-compositor\"\u003e\n  \u003c/a\u003e\n  When NOT to use a Compositor\n\u003c/h3\u003e\n\n\u003cp\u003eThe mechanism behind a compositor revolves around maintaining an off-screen buffer and passing that around different windows. While this might add a lot of effects to your window manager or desktop environment, it is NOT ideal during gaming, where it causes latency. \u003c/p\u003e\n\n\u003cp\u003eWhile gaming, not using a compositor might lead to the lack of v-sync (unless you turn v-sync on in-game) and a lot of screen tearing, but it does away with latency between frames. I would recommend turning the compositor off while gaming. The drawbacks can be avoided if hardware V-sync is used, but it requires altering the X11 config for synchronization at a graphics driver level. Specifically, enabling the \u003cstrong\u003eForceFullCompositionPipeline\u003c/strong\u003e option for use with nvidia graphics (and \u003cstrong\u003eTearFree\u003c/strong\u003e option in the case of Intel) . In such a case, the compositor would not have to be turned off while gaming since v-sync will be offloaded to the graphics driver instead of the compositor itself. This would of course require the v-sync in the compositor to be turned off.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"compton\" href=\"#compton\"\u003e\n  \u003c/a\u003e\n  Compton\n\u003c/h3\u003e\n\n\u003cp\u003eCompton is a light weight and standalone compositor for the X Window System. It is a fork of the \u003cem\u003excompmgr-dana\u003c/em\u003e compositor, which in turn is a fork of the \u003cem\u003excompmgr\u003c/em\u003e compositor.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--G9LZphEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4ockleu4txe7ds0ugwfm.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--G9LZphEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4ockleu4txe7ds0ugwfm.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"525\" height=\"319\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIn addition to xcompmgr-dana, it supports the OpenGL backend, as well as colored drop-shadows. It can be easily installed for your distribution using official repos. For debain it can be installed like this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# install comption\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ecompton\n\n\u003cspan class=\"c\"\u003e# run compton in the background\u003c/span\u003e\ncompton \u0026amp;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eCompton can be added as a startup script for the window manager of your choice.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"picom\" href=\"#picom\"\u003e\n  \u003c/a\u003e\n  Picom\n\u003c/h3\u003e\n\n\u003cp\u003eAlthough compton is a pretty solid standalone compositor for X11 but sadly it is not regularly maintained anymore. Picom is an active fork of compton which aims to battle the code complexity of compton in order to draw more developers into contributing to the project.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BBZn2Tpy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5gjftrz0u12rs9bjc5nf.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BBZn2Tpy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5gjftrz0u12rs9bjc5nf.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"672\" height=\"355\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eFor getting started with picom, I recommend building it from source. For debain based systems, the following dependancies need to be installed and subsequently, the following commands can be used to build picom:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Debian specific command. The next few commands are for all distros\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003elibxext-dev libxcb1-dev libxcb-damage0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-randr0-dev libxcb-composite0-dev libxcb-image0-dev libxcb-present-dev libxcb-xinerama0-dev libxcb-glx0-dev libpixman-1-dev libdbus-1-dev libconfig-dev libgl1-mesa-dev  libpcre2-dev  libevdev-dev uthash-dev libev-dev libx11-xcb-dev\n\n\u003cspan class=\"c\"\u003e# clone the project and go into it\u003c/span\u003e\ngit clone https://github.com/yshui/picom \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd \u003c/span\u003epicom\n\n\u003cspan class=\"c\"\u003e# Use the meson build system (written in python), to make a ninja build \u003c/span\u003e\nmeson \u003cspan class=\"nt\"\u003e--buildtype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003erelease \u003cspan class=\"nb\"\u003e.\u003c/span\u003e build\n\n\u003cspan class=\"c\"\u003e# Use the ninja build file to proceed\u003c/span\u003e\nninja \u003cspan class=\"nt\"\u003e-C\u003c/span\u003e build\n\n\u003cspan class=\"c\"\u003e# Copy the resultant binary into PATH\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecp \u003c/span\u003ebuild/src /usr/local/bin\n\n\u003cspan class=\"c\"\u003e# Run picom in the background (this command can be added to the autostart)\u003c/span\u003e\npicom \u0026amp; \n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"configuring-the-compositor\" href=\"#configuring-the-compositor\"\u003e\n  \u003c/a\u003e\n  Configuring the Compositor\n\u003c/h3\u003e\n\n\u003cp\u003eCompositors like compton and picom are highly configurable. From customized colored drop shadows, to the amount of transparency can be set both globally, and for certain windows in specific.\u003c/p\u003e\n\n\u003cp\u003eA sample config for picom can be found in \u003ccode\u003e/etc/xdg/picom.conf\u003c/code\u003e. \u003ca href=\"https://github.com/yshui/picom/blob/next/picom.sample.conf\"\u003eHere\u003c/a\u003e is a copy of the same. To get started, simply copy the configuration to \u003ccode\u003e~/.config/picom/picom.conf\u003c/code\u003e.\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e /etc/xdg/picom.conf ~/.config/picom/\nvim ~/.config/picom/picom.conf\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAll of the available options are mentioned in the comments. After making a change, simply edit the configuration and save. The compositor will reload automatically. \u003c/p\u003e\n\n\u003cp\u003eTo add a compositor to your window manager, simply put the following line in your \u003ccode\u003e~/.xsession\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Start compositor in the background\u003c/span\u003e\npicom \u0026amp; \u003cspan class=\"c\"\u003e# or compton \u0026amp; (in case you want to use compton)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Execute window manager\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eexec \u003c/span\u003eawesome\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"useful-links\" href=\"#useful-links\"\u003e\n  \u003c/a\u003e\n  Useful Links\n\u003c/h3\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/yshui\"\u003e\n        yshui\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/yshui/picom\"\u003e\n        picom\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A lightweight compositor for X11\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\npicom\u003c/h1\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003epicom\u003c/strong\u003e is a compositor for X, and a \u003ca href=\"https://github.com/yshui/picomHistory.md\"\u003efork of Compton\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eThis is a development branch, bugs to be expected\u003c/strong\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can leave your feedback or thoughts in the \u003ca href=\"https://github.com/yshui/picom/discussions\"\u003ediscussion tab\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nCall for testers\u003c/h2\u003e\n\u003ch3 dir=\"auto\"\u003e\n\u003ccode\u003e--experimental-backends\u003c/code\u003e\n\u003c/h3\u003e\n\u003cp dir=\"auto\"\u003eThis flag enables the refactored/partially rewritten backends.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCurrently, new backends feature better vsync with the xrender backend and improved input lag with the glx backend (for non-NVIDIA users). The performance should be on par with the old backends.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNew backend features will only be implemented on the new backends from now on, and the old backends will eventually be phased out after the new backends stabilize.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eTo test the new backends, add the \u003ccode\u003e--experimental-backends\u003c/code\u003e flag to the command you use to run picom. This flag is not available from the configuration file.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eTo report issues with the new backends, please state explicitly you are using the new backends in your report.\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nChange\u003c/h2\u003e…\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/yshui/picom\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/chjj\"\u003e\n        chjj\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/chjj/compton\"\u003e\n        compton\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A compositor for X11.\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\nCompton\u003c/h1\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://gitter.im/chjj/compton?utm_source=badge\u0026amp;utm_medium=badge\u0026amp;utm_campaign=pr-badge\u0026amp;utm_content=badge\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Join the chat at https://gitter.im/chjj/compton\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eCompton\u003c/strong\u003e is a compositor for X, and a fork of \u003cstrong\u003excompmgr-dana\u003c/strong\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eI was frustrated by the low amount of standalone lightweight compositors\nCompton was forked from Dana Jansens' fork of xcompmgr and refactored.  I fixed\nwhatever bug I found, and added features I wanted. Things seem stable, but don't\nquote me on it. I will most likely be actively working on this until I get the\nfeatures I want. This is also a learning experience for me. That is, I'm\npartially doing this out of a desire to learn Xlib.\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nChanges from xcompmgr:\u003c/h2\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eOpenGL backend (\u003ccode\u003e--backend glx\u003c/code\u003e), in addition to the old X Render backend.\u003c/li\u003e\n\u003cli\u003eInactive window transparency (\u003ccode\u003e-i\u003c/code\u003e) / dimming (\u003ccode\u003e--inactive-dim\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eTitlebar/frame transparency (\u003ccode\u003e-e\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eMenu transparency (\u003ccode\u003e-m\u003c/code\u003e, thanks to Dana).\u003c/li\u003e\n\u003cli\u003eshadows are now enabled for argb windows, e.g. terminals with transparency\u003c/li\u003e\n\u003cli\u003eremoved serverside shadows (and simple compositing)…\u003c/li\u003e\n\u003c/ul\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/chjj/compton\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://wiki.archlinux.org/index.php/Picom#Configuration\"\u003ePicom Configuration\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://wiki.archlinux.org/index.php/NVIDIA/Troubleshooting#Avoid_screen_tearing\"\u003eOffloading V-sync to the nvidia graphics\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "compositors-in-linux-1hhb",
		"social_image": null,
		"title": "Compositors in Linux",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-11T13:26:54.469Z",
		"crossposted_at": null,
		"edited_at": "2020-04-29T18:10:10.003Z",
		"last_comment_at": "2020-04-29T17:55:36.479Z",
		"published_at": "2020-04-29T17:55:36.479Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "[Comment]: # (All of this is placeholder text. Use this format or any other format of your choosing to best describe your project.)\n\n[Reminder]: # (Make sure you've submitted the Twilio CodeExchange agreement: https://ahoy.twilio.com/code-exchange-community)\n\n[Important]: # (By making a submission, you agree to the competition's terms: https://www.twilio.com/legal/twilio-dev-hackathon-terms)\n\n## Introduction\n\nCOVID-19 is a stressful time for people, who tend to panic. In such a case, I decided to build an application which solves the following two issues:\n\nThe first issue in a time of international crisis due to the pandemic is that a lot of fake news is spreading over social media. People need a reliable, and moreover, regular source of news and information related to the COVID-19 pandemic. \n\nThe second issue that plagues people is the uneven distribution of resources. I have this friend of mine, who need not be named. Her family panicked after the announcement of a nationwide lockdown. They immediately rushed into the nearest super-store and bought loads and loads of resources. This hoarding caused a lot of potential wastage in the household. Fortunately they were kind enough to distribute their resources to the neighbors, who were in dire need of the same. \n\n---\n\n## What I built\n\n**CovidComm** is a project that ensures that people stay up to date with the latest news about coronavirus. It has the following features:\n\n* World COVID-19 status per country\n  * Total and Daily Cases\n  * Total Deaths and Daily Deaths\n  * Total Infected and Daily Infected\n  * Total Cured and Daily Cured\n  * Filter by Everything\n* Trending news related to coronavirus\n  * Fetched from multiple media platforms\n  * Bite sized news TLDR;\n* Resource redistrubution system\n  * Request for resources\n  * Respond to other people's requests\n  * Contact respondees\n* CovidBot\n  * An opt-in information service\n  * Calls you up daily and reads you bite sized news\n  * Save time and effort trying to procure news\n* Multi Platform\n  * Release for MAC OS\n  * Release for Linux\n  * Release for Windows\n\n---\n\n## Demo Link\n\nThis video contains the practical demo of the project as well as a voice recording of the CovidBot, which calls subscribers and informs them of the latest COVID-19 related news on a daily basis. Note that I am using a trail TWILIO account so the bot does say some garbage stuff in the beginning, but that can easily be done away with by shifting to a paid account.\n\n**Stick around till the end** to see the CovidBot in action!\n\n{% youtube QAZf4J9LSnY %}\n \n---\n\n## Link to Code\n\nThis project is distributed between two repositories: One for the backend of the project and one for the desktop application: \n\n{% github https://github.com/L04DB4L4NC3R/covidcomm %}\n\n{% github https://github.com/L04DB4L4NC3R/covidcomm-ui %}\n\n---\n\n## How I built it (what's the stack? did I run into issues or discover something new along the way?)\n\nWhen I started off with this project, I had one goal in mind. To learn from the crisis around me and build something useful for which there is a need. I also had an ulterior motive: my self learning (which I believe every developer should have). I was well versed in NodeJS but had never tried TypeScript out. I used this time to learn TS from scratch and build a backend using the same.\n\nI had initially planned to make a website for the project, but I am not exactly fond of frontend web development so I decided to make a desktop application instead. Now I had worked with electronJS earlier so I knew that it has its own plethora of issues. I did a lot of research on which framework I can use (even considered making an X11 application using libxcb but decided to make it cross-platform). I landed on Xojo, which immediately caught my attention.\n\nNow I had never heard of Xojo before, let alone use it. I quickly learnt how to program sweet XojoScripts for API fetch but ran into yet another problem: Xojo is proprietary. Which meant that I needed a paid license for building and exporting the project to various platforms. This dissuaded me since I had already spent hours on Xojo to build a desktop app. As a last resort I decided to search the ever growing list of GitHub student pack integrations. And low and behold, I found a free Xojo license in the student pack. I was overjoyed, set it up the very same day and built my first binary for linux!\n\nOne last issue I faced was time management. Since I try to be a perfectionist, at least when it comes to code quality, I decided to adopt the Clean Architecture for my TypeScript backend, which consumed a lot of time but made the code very readable. On the top of that I had to build and maintain the desktop application also, including the user interface, integrations and IPCs. It took a lot of time but I eventually got a build which is worth showing off :). Granted it is not the best UI out there (not even close), but I was more focused towards the functionality.\n\n#### Stack\n\n| Technology | Where it is being used in the project | \n|:----------:|:-------------------------------------:|\n| TypeScript | Used with NodeJS for building the backend |\n| Express | Backend framework for NodeJS |  \n| MongoDB | Used as a database to store essential user and request details |\n| Xojo | Used for building the Desktop Application for MacOS, Windows and Linux | \n| Twilio programmable voice API | For calling and reading out the news |\n| Twilio verification service | For verifying phone numbers on the fly |\n\n\n---\n\n## Future Scope\n\nThe main future scope of this project is to include geolocation so that the people closest to you are the ones who can help you out. \n\n---\n\n## Additional Resources/Info\n\n* [coronavirus-tracker-cli](https://github.com/sagarkarira/coronavirus-tracker-cli)",
		"cached_tag_list": "twiliohackathon, showdev",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction   COVID-19 is a stressful time for people, who tend to panic. In such a case, I...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--hZPwwEkC--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/xw0rkizoz8cbb8gur92w.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/twilio-dev-hackathon-project-2c9o",
		"public_reactions_count": 7,
		"processed_html": "\u003ch2\u003e\n  \u003ca name=\"introduction\" href=\"#introduction\"\u003e\n  \u003c/a\u003e\n  Introduction\n\u003c/h2\u003e\n\n\u003cp\u003eCOVID-19 is a stressful time for people, who tend to panic. In such a case, I decided to build an application which solves the following two issues:\u003c/p\u003e\n\n\u003cp\u003eThe first issue in a time of international crisis due to the pandemic is that a lot of fake news is spreading over social media. People need a reliable, and moreover, regular source of news and information related to the COVID-19 pandemic. \u003c/p\u003e\n\n\u003cp\u003eThe second issue that plagues people is the uneven distribution of resources. I have this friend of mine, who need not be named. Her family panicked after the announcement of a nationwide lockdown. They immediately rushed into the nearest super-store and bought loads and loads of resources. This hoarding caused a lot of potential wastage in the household. Fortunately they were kind enough to distribute their resources to the neighbors, who were in dire need of the same. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"what-i-built\" href=\"#what-i-built\"\u003e\n  \u003c/a\u003e\n  What I built\n\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eCovidComm\u003c/strong\u003e is a project that ensures that people stay up to date with the latest news about coronavirus. It has the following features:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWorld COVID-19 status per country\n\n\u003cul\u003e\n\u003cli\u003eTotal and Daily Cases\u003c/li\u003e\n\u003cli\u003eTotal Deaths and Daily Deaths\u003c/li\u003e\n\u003cli\u003eTotal Infected and Daily Infected\u003c/li\u003e\n\u003cli\u003eTotal Cured and Daily Cured\u003c/li\u003e\n\u003cli\u003eFilter by Everything\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003eTrending news related to coronavirus\n\n\u003cul\u003e\n\u003cli\u003eFetched from multiple media platforms\u003c/li\u003e\n\u003cli\u003eBite sized news TLDR;\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003eResource redistrubution system\n\n\u003cul\u003e\n\u003cli\u003eRequest for resources\u003c/li\u003e\n\u003cli\u003eRespond to other people's requests\u003c/li\u003e\n\u003cli\u003eContact respondees\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003eCovidBot\n\n\u003cul\u003e\n\u003cli\u003eAn opt-in information service\u003c/li\u003e\n\u003cli\u003eCalls you up daily and reads you bite sized news\u003c/li\u003e\n\u003cli\u003eSave time and effort trying to procure news\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003eMulti Platform\n\n\u003cul\u003e\n\u003cli\u003eRelease for MAC OS\u003c/li\u003e\n\u003cli\u003eRelease for Linux\u003c/li\u003e\n\u003cli\u003eRelease for Windows\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"demo-link\" href=\"#demo-link\"\u003e\n  \u003c/a\u003e\n  Demo Link\n\u003c/h2\u003e\n\n\u003cp\u003eThis video contains the practical demo of the project as well as a voice recording of the CovidBot, which calls subscribers and informs them of the latest COVID-19 related news on a daily basis. Note that I am using a trail TWILIO account so the bot does say some garbage stuff in the beginning, but that can easily be done away with by shifting to a paid account.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eStick around till the end\u003c/strong\u003e to see the CovidBot in action!\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/QAZf4J9LSnY\" allowfullscreen loading=\"lazy\"\u003e\n\u003c/iframe\u003e\n\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"link-to-code\" href=\"#link-to-code\"\u003e\n  \u003c/a\u003e\n  Link to Code\n\u003c/h2\u003e\n\n\u003cp\u003eThis project is distributed between two repositories: One for the backend of the project and one for the desktop application: \u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/L04DB4L4NC3R\"\u003e\n        L04DB4L4NC3R\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/L04DB4L4NC3R/covidcomm\"\u003e\n        covidcomm\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      Stay updated in the time of the coronavirus pandemic\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp align=\"center\" dir=\"auto\"\u003e\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/93f49cf9a3c0f81312a30bb13d5d0b879acc565aacf0cb0aebe26c43821b14b1/68747470733a2f2f666f6e746d656d652e636f6d2f7065726d616c696e6b2f3230303431382f30336562366432396661363030666238363434363339333439346134346637612e706e67\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/93f49cf9a3c0f81312a30bb13d5d0b879acc565aacf0cb0aebe26c43821b14b1/68747470733a2f2f666f6e746d656d652e636f6d2f7065726d616c696e6b2f3230303431382f30336562366432396661363030666238363434363339333439346134346637612e706e67\" data-canonical-src=\"https://fontmeme.com/permalink/200418/03eb6d29fa600fb86446393494a44f7a.png\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch2 dir=\"auto\"\u003e\nCovidComm\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eA project for communication aid during the COVID-19 outbreak. Note that this project is made for the Twilio DEV community Hackathon. The following is the track being followed in this project:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eCOVID-19 Communications\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eHead over to the \u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui/blob/master/README.md\"\u003eofficial user interface repository\u003c/a\u003e for CovidComm to look at it's features, demo, and installation. Head over to DEV to see the \u003ca href=\"https://dev.to/l04db4l4nc3r/twilio-dev-hackathon-project-2c9o\" rel=\"nofollow\"\u003esubmission blog for this project\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://documenter.getpostman.com/view/3896915/SzfDx5Hi\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/e518ff5fcb3cad9583b125a2a89ebf3629553c93f06eb86d03249d703e482e55/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d76696577253230646f63756d656e746174696f6e2d79656c6c6f77677265656e\" alt=\"Alt text\" data-canonical-src=\"https://img.shields.io/badge/docs-view%20documentation-yellowgreen\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch4 dir=\"auto\"\u003e\nGetting started\u003c/h4\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eCreate a file called \u003ccode\u003e.env\u003c/code\u003e with the following content. You can configure it according to your own desired settings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight highlight-source-shell notranslate position-relative overflow-auto js-code-highlight\" data-snippet-clipboard-copy-content='# JSON Web Token\nJWT_SECRET=\"sajndaskdnsakdnaksndjs\"\n# Morgan logging level\nLOGGING_FMT=\"combined\"\n# The full API URL being used for fetching news\nINFO_API_URL= \"\"\n# Calling CRONJOB time\nCRON_DEFAULT_TIME=\"* * * 1 * *\"\n\n# Calling CRONJOB time for testing\nCRON_TESTING_TIME=\"10 * * * * *\"\n\n# SALT for hashing, should be an integer\nHASH_SALT=771\n\n# Database URI\nDB_URI=\"mongodb://\u0026lt;dbuser\u0026gt;:\u0026lt;dbpassword\u0026gt;@\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/\u0026lt;database_name\u0026gt;\"\n\n# Base URL\nAPI_VERSION= \"/api/v1\"\n\n# Account SID\nTWILIO_ACCOUNT_SID= \"\"\n\n# Auth token for programmable voice API\nTWILIO_AUTH_TOKEN= \"\"\n\n# Given phone number by twilio\nTWILIO_PHONE_NUMBER= \"\"\n\n# A verified phone number (for testing)\nTWILIO_VERIFIED_NUMBER= \"\"\n\n# Service SID for Verifying phone numbers on the fly\nTWILIO_SERVICE_SID=\"\"'\u003e\n\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e\u003cspan class=\"pl-c\"\u003e#\u003c/span\u003e JSON Web Token\u003c/span\u003e\nJWT_SECRET=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003esajndaskdnsakdnaksndjs\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e\u003cspan class=\"pl-c\"\u003e#\u003c/span\u003e Morgan logging level\u003c/span\u003e\nLOGGING_FMT=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ecombined\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e\u003cspan class=\"pl-c\"\u003e#\u003c/span\u003e The full API URL being used for fetching news\u003c/span\u003e\nINFO_API_URL= \u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e\u003cspan class=\"pl-c\"\u003e#\u003c/span\u003e Calling CRONJOB time\u003c/span\u003e\nCRON_DEFAULT_TIME=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e* * * 1 * *\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e\u003cspan class=\"pl-c\"\u003e#\u003c/span\u003e Calling CRONJOB time for testing\u003c/span\u003e\nCRON_TESTING_TIME=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e10 * * * * *\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e\u003cspan class=\"pl-c\"\u003e#\u003c/span\u003e SALT for hashing, should be an\u003c/span\u003e\u003c/pre\u003e…\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/L04DB4L4NC3R/covidcomm\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/L04DB4L4NC3R\"\u003e\n        L04DB4L4NC3R\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui\"\u003e\n        covidcomm-ui\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      \n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\nCovidComm Desktop Application\u003c/h1\u003e\n\u003cp dir=\"auto\"\u003eThis is a desktop application for the covidcomm project.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 dir=\"auto\"\u003e\nIndex\u003c/h2\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui#demo\"\u003eDemo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui#installation\"\u003eInstallation\u003c/a\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui/releases/download/v1.0/Mac.OS.X.Cocoa.Intel.tar.xz\"\u003eMAC OS Release\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui/releases/download/v1.0/Linux.64.bit.tar.xz\"\u003eLinux Release\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui/releases/download/v1.0/Windows.zip\"\u003eWIndows Release\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm\"\u003eBackend Repository\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/l04db4l4nc3r/twilio-dev-hackathon-project-2c9o\" rel=\"nofollow\"\u003eView the Related Blog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui#contributing\"\u003eContributing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui#licence\"\u003eLicence\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 dir=\"auto\"\u003e\nFeatures\u003c/h2\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eWorld COVID-19 status per country\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eTotal and Daily Cases\u003c/li\u003e\n\u003cli\u003eTotal Deaths and Daily Deaths\u003c/li\u003e\n\u003cli\u003eTotal Infected and Daily Infected\u003c/li\u003e\n\u003cli\u003eTotal Cured and Daily Cured\u003c/li\u003e\n\u003cli\u003eFilter by Everything\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTrending news related to coronavirus\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eFetched from multiple media platforms\u003c/li\u003e\n\u003cli\u003eBite sized news TLDR;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eResource redistrubution system\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eRequest for resources\u003c/li\u003e\n\u003cli\u003eRespond to other people's requests\u003c/li\u003e\n\u003cli\u003eContact respondees\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCovidBot\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eAn opt-in information service\u003c/li\u003e\n\u003cli\u003eCalls you up daily and reads you bite sized news\u003c/li\u003e\n\u003cli\u003eSave time and effort trying to procure news\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 dir=\"auto\"\u003e\nDemo\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eI have recorded a practical demo for the usage of the application. \u003ca href=\"https://youtu.be/QAZf4J9LSnY\" rel=\"nofollow\"\u003eClick here to view it on youtube\u003c/a\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 dir=\"auto\"\u003e\nInstallation\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eHead over to the \u003ca href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui/releases\"\u003ereleases\u003c/a\u003e page to get the application for Windows, MAC OS and Linux.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 dir=\"auto\"\u003e\nContributing\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eTo start…\u003c/p\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/L04DB4L4NC3R/covidcomm-ui\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch2\u003e\n  \u003ca name=\"how-i-built-it-whats-the-stack-did-i-run-into-issues-or-discover-something-new-along-the-way\" href=\"#how-i-built-it-whats-the-stack-did-i-run-into-issues-or-discover-something-new-along-the-way\"\u003e\n  \u003c/a\u003e\n  How I built it (what's the stack? did I run into issues or discover something new along the way?)\n\u003c/h2\u003e\n\n\u003cp\u003eWhen I started off with this project, I had one goal in mind. To learn from the crisis around me and build something useful for which there is a need. I also had an ulterior motive: my self learning (which I believe every developer should have). I was well versed in NodeJS but had never tried TypeScript out. I used this time to learn TS from scratch and build a backend using the same.\u003c/p\u003e\n\n\u003cp\u003eI had initially planned to make a website for the project, but I am not exactly fond of frontend web development so I decided to make a desktop application instead. Now I had worked with electronJS earlier so I knew that it has its own plethora of issues. I did a lot of research on which framework I can use (even considered making an X11 application using libxcb but decided to make it cross-platform). I landed on Xojo, which immediately caught my attention.\u003c/p\u003e\n\n\u003cp\u003eNow I had never heard of Xojo before, let alone use it. I quickly learnt how to program sweet XojoScripts for API fetch but ran into yet another problem: Xojo is proprietary. Which meant that I needed a paid license for building and exporting the project to various platforms. This dissuaded me since I had already spent hours on Xojo to build a desktop app. As a last resort I decided to search the ever growing list of GitHub student pack integrations. And low and behold, I found a free Xojo license in the student pack. I was overjoyed, set it up the very same day and built my first binary for linux!\u003c/p\u003e\n\n\u003cp\u003eOne last issue I faced was time management. Since I try to be a perfectionist, at least when it comes to code quality, I decided to adopt the Clean Architecture for my TypeScript backend, which consumed a lot of time but made the code very readable. On the top of that I had to build and maintain the desktop application also, including the user interface, integrations and IPCs. It took a lot of time but I eventually got a build which is worth showing off :). Granted it is not the best UI out there (not even close), but I was more focused towards the functionality.\u003c/p\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"stack\" href=\"#stack\"\u003e\n  \u003c/a\u003e\n  Stack\n\u003c/h4\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eTechnology\u003c/th\u003e\n\u003cth\u003eWhere it is being used in the project\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eTypeScript\u003c/td\u003e\n\u003ctd\u003eUsed with NodeJS for building the backend\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eExpress\u003c/td\u003e\n\u003ctd\u003eBackend framework for NodeJS\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMongoDB\u003c/td\u003e\n\u003ctd\u003eUsed as a database to store essential user and request details\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eXojo\u003c/td\u003e\n\u003ctd\u003eUsed for building the Desktop Application for MacOS, Windows and Linux\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTwilio programmable voice API\u003c/td\u003e\n\u003ctd\u003eFor calling and reading out the news\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTwilio verification service\u003c/td\u003e\n\u003ctd\u003eFor verifying phone numbers on the fly\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"future-scope\" href=\"#future-scope\"\u003e\n  \u003c/a\u003e\n  Future Scope\n\u003c/h2\u003e\n\n\u003cp\u003eThe main future scope of this project is to include geolocation so that the people closest to you are the ones who can help you out. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"additional-resourcesinfo\" href=\"#additional-resourcesinfo\"\u003e\n  \u003c/a\u003e\n  Additional Resources/Info\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sagarkarira/coronavirus-tracker-cli\"\u003ecoronavirus-tracker-cli\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "twilio-dev-hackathon-project-2c9o",
		"social_image": null,
		"title": "CovidComm | A Twilio DEV Hack Project",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-13T11:35:32.964Z",
		"crossposted_at": null,
		"edited_at": "2020-04-13T18:57:37.828Z",
		"last_comment_at": "2020-08-18T18:02:08.163Z",
		"published_at": "2020-04-13T18:09:19.821Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "The linux philosophy promotes modular software. Linux itself is modular. This ensures plug and play ability, extensibility, and customization to your heart's content. This also means that you can get bare-bones software and install only the bare essentials suited to your needs.\n\nBspwm or *Binary Space Partition Window Manager*, is based around the same philosophy. Bspwm is a minimalistic modern window manager that represents windows as the leaves of a full binary tree. Now due to the fact that there is not a lot of comprehensive documentation out there for bspwm (especially as compared to other window managers like i3), I decided to go ahead and make a (somewhat) practical guide myself. Forgive me if this particular entry in the series is too long.\n\n\n* [Features](#features)\n* [Getting started](#getting-started)\n* [Setting up our environment](#setting-up-our-environment)\n  * [Adding a key binding daemon](#adding-a-key-binding-daemon)\n  * [Drawing a wallpaper](#drawing-a-wallpaper) \n  * [Setting up a compositor](#setting-up-a-compositor)\n  * [Adding a menu bar](#adding-a-menu-bar)\n* [The bspwm client](#the-bspwm-client)\n  * [Node Actions](#node-actions)\n  * [Window State Actions](#window-state-actions)\n  * [Window Rules](#window-rules)\n* [Layouts](#layouts)\n   * [Automatic layout](#automatic-layout)\n   * [Manual layout](#manual-layout)\n   * [Longest side layout](#longest-side-layout)\n   * [Spiral layout](#spiral-layout)\n   * [Polarity](#polarity)\n     * [First child polarity](#first-child-polarity)\n     * [Second child polarity](#second-child-polarity)\n   * [Configuring key bindings for switching layout](#configuring-key-bindings-for-switching-layout)\n* [Some shortcomings](#some-shortcomings)\n* [Verdict](#verdict)\n* [References](#references)\n\n---\n\n### Features\n\n* *bspwm* is built for multi-monitors. \n* Each monitor in bspwm can have multiple desktops and each desktop is a pointer to a binary tree.\n* It is skeletal and requires additional software, even for features as common as setting key-bindings.\n* It only responds to X events, and the messages it receives on a dedicated socket, which can be sent by a provided client: `bspc`. \n* The desired window layouts in bspwm also have to be configured.\n\n---\n\n### Getting Started\n\n*bspwm* is available on most source repositories. In addition, you can download the release and build it from source.\n\n{% github https://github.com/baskerville/bspwm %}\n\nThe easiest way to get started (on debian based systems) is this:\n\n```sh\nsudo apt install bspwm\n```\nTo run it, simple add the following line in your `~/.xsession` file:\n\n```\nexec bspwm\n```\n\nLogout and log back in again, and boom! You are good to go. When you login, you will be greeted by a black screen. That is because bspwm doesn't know how to draw the wallpaper yet. You will also notice that none of your typical window manager key bindings work. That is because bspwm requires a third party daemon for the same.\n\n\nLogout from the current environment and login to either a tty, or any other environment, and let's get started with the configuration so that we can make bspwm a bit usable.\n\n\n---\n\n\n### Setting up our environment\n\nAn example configuration lies in the `/usr/share/doc/bspwm/examples/bspwmrc` file. Simply copy the *bspwmrc* file to the `~/.config/bspwm/` directory to get started. The default config file looks like this:\n\n\n```sh\n#! /bin/sh\n\n# for the key-binding daemon (we'll see it below)\nsxhkd \u0026\n\n# for adding multiple monitors and workspaces\nbspc monitor -d I II III IV V VI VII VIII IX X\n\nbspc config border_width         2\n\n# I like to keep it 10, let me know what you think.\nbspc config window_gap          12\n\nbspc config split_ratio          0.52\nbspc config borderless_monocle   true\nbspc config gapless_monocle      true\n\n# Window rules (we'll see it below)\nbspc rule -a Gimp desktop='^8' state=floating follow=on\nbspc rule -a Chromium desktop='^2'\nbspc rule -a mplayer2 state=floating\nbspc rule -a Kupfer.py focus=on\nbspc rule -a Screenkey manage=off\n```\n\nNotice that *bspwmrc* does not have a different syntax or any language binding. It just uses a vanilla shell script for its execution. That is because of the **bspc** client that comes along with bspwm. This client can send socket events to and from the server. Take a look at its architecture for the same:\n\n```\n        PROCESS          SOCKET\nsxhkd  --------\u003e  bspc  \u003c------\u003e  bspwm\n```\n\n---\n\n#### Adding a key binding daemon\n\n**Sxhkd**, mentioned in the architecture given above, stands for *Simple X Hot Key Daemon* (And you thought herbstluftwm was hard to pronounce). It runs in the background and uses a very simple syntax to bind keys to commands. To get started with it simply run:\n\n```sh\nsudo apt install sxhkd\n```\n\nSxhkd looks for a configuration file for initialization. You can create one at `~/.config/sxhkd/sxhkdrc`. Let us look at how to add some basic key-bindings to get started with bspwm:\n\n*our sxhkdrc file*: \n\n```sh\n# To spawn the terminal\nalt + Return\n  terminator\n\n# make sxhkd reload its configuration files:\nalt + Escape\n\tpkill -USR1 -x sxhkd\n\n# for dmenu\nalt + p\n  dmenu_run\n\n# quit/restart bspwm\nshift + alt + {q,r}\n  bspc {quit,wm -r}\n```\n\nThe second rule makes sure that the moment we hit `alt + Escape`, our sxhkd reloads automatically, therefore making any further changes will not require us to manually kill the daemon and restart it ourselves.\n\nTo start the daemon simply add the following line in your `bspwmrc`:\n\n```sh\n# To start the daemon in the background\nsxhkd \u0026\n```\n\nNow logout and login again. You will be greeted with a black screen, but the moment you hit `alt + Return`, you will get the terminal of your choice! Now this is all we need for further configuring our bspwm.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/vokkce7lc3xsyfpkelia.png)\n\n---\n\n#### Drawing a wallpaper\n\nNobody likes a black screen. Our window manager needs some life now. Let us add a wallpaper. **Nitrogen** is a very good tool for the same. To set it up simply run:\n\n```sh\n# install nitrogen (available in almost all public repos)\nsudo apt install nitrogen\n\n# setting wallpaper (provided that there is a mass_effect.png)\n# you can add this line in your bspwmrc too (recommended)\nnitrogen --set-scaled /usr/share/backgrounds/mass_effect.png\n```\n\nNow our environment (with dmenu) looks like this: \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/m94l50bghsdky8w079qo.png)\n\nHmmm, it already looks pretty good. But there is something missing. When I open up a terminal, there is no transparency or drop shadow. Even when I have properly configured opacity in my terminal settings. Let us see how we can fix this.\n\n---\n\n#### Setting up a compositor\n\nTo learn what is a compositor, check out [this link](https://wiki.archlinux.org/index.php/Xorg#Composite). Note that my next blog will give you a deeper insight into the working of compositors in linux. So stay tuned :)\n\nLong story short, it is a piece of software responsible for adding effects like drop shadows and transparency in our window managers. Let us get started with **compton**, one such compositor. \n\n```sh\n# installing compton\nsudo apt install compton\n\n# running comption in the background\n# add this command in your bspwmrc (recommended)\ncomption \u0026\n```\n\nAfter you add the aforementioned line in your `bspwmrc`, simply reload your bspwm (remember we made a keybinding for the same). Spawn a couple of terminals and enjoy the view:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/16fgu9v77xedkyamjn8z.png)\n\nWow! looks amazing. But there is still something missing. What we need is a panel to see which workspace we are on, or gain access to some quick actions. Let us see how to configure the same.\n\n---\n\n#### Adding a menu bar\n\nThe community has worked a lot on creating beautiful and customizable third party menu bars and their themes. Some of the well know panels are the following:\n\n* [Polybar](https://github.com/polybar/polybar)\n* [Lemonbar](https://github.com/LemonBoy/bar)\n* [Yabar](https://github.com/geommer/yabar)\n\nIn this blog we will be looking at setting up polybar. You can use the [installation candidates](https://github.com/polybar/polybar#getting-started), or you can compile it from source as well. Once you do so, just create a folder `~/.config/polybar/config` and you are good to go. \n\nWe will be using a third party theme from this repository:\n\n{% github https://github.com/adi1090x/polybar-themes %}\n\nSelect any theme that you are interested in. For the sake of this blog lets assume you want to go for *polybar-1*. Simply run the following commands and you are good to go:\n\n```sh\n# clone this repo\ngit clone https://github.com/adi1090x/polybar-themes\n\n# go to polybar-1 dir\ncd polybar-themes/polybar-1\n\n# copy fonts to local fonts dir (i'll put the fonts in all dirs)\ncp -r fonts/* ~/.local/share/fonts\n\n# reload font cache\nfc-cache -v\n\n# copy everything from polybar-1 to polybar config dir (backup your config first if you have)\ncp -r * ~/.config/polybar\n\n# add the following two commands to your bspwmrc (recommended)\n# kill previously running instances of polybar\npkill polybar\n\n# run launch.sh \n~/.config/polybar/launch.sh\n```\n\nOnce you add the lines in your bspwmrc, simply reload your window manager and you will be able to see a beautiful panel at the bottom of your screen. To configure this panel simply edit the `~/.config/polybar/config.ini` file to your heart's content. Now our environment looks something like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/sm2jkmxcjiktkol26m4x.png)\n\nAah that is more like it. The pieces are coming together. It is like the time Sheldon Cooper used lego to make a death star. I assure you this is nothing remotely as dramatic, but totally fun :)\n\n---\n\n### The bspwm client\n\n**bspc** is your own friendly neighborhood client which ships with bspwm. It sends socket events to bspwm to draw or make changes in your X window system. Due to the fact that it is so powerful on the command line itself, bspwm does not need a second language or syntax for its configuration and thus uses shell script with a set of *bspc* commands for the same. In this section we will be looking at some of the most important *bspc* commands and building our configuration further using them. If you are stuck along the way, make sure to check out the man page of bspc (by running `man bspc`) or the [bspwm wiki](https://github.com/baskerville/bspwm/wiki/Command-Syntax-Rewrite).\n\nNote that for the purpose of this block, whenever I use the term \"action\", it is going to refer to a subcommand/functionality of bspc. \n\n\n---\n\n#### Node Actions\n\nA node in bspwm refers to a window. The `bspm node` subcommand controls window specific actions. Some of the example commands are listed below:\n\n| Command | Action Performed |\n|:-------:|:----------------:|\n| bspc node -c | close a window | \n| bspc node -k | kill a window | \n| bspc node -d 7 | send the window to the 7th desktop |\n| bspc node -p north|east|west|south | preselect a direction for the next window to open | \n\nTry these commands on your terminal before adding them to the key-bindings. After adding them, the node section of my `sxhkdrc` looks like this:\n\n```\n# send the window to the given desktop\nalt + shift + {1-9}\n  bspc node -d '^{1-9}'\n\n# close and kill\nalt + {_,shift + }c\n\tbspc node -{c,k}\n\n# preselect the direction\n# we will see that this means in the manual layout\nsuper + ctrl + {h,j,k,l}\n\tbspc node -p {west,south,north,east}\n\n```\n\n---\n\n#### Window State Actions\n\n*Window states* refer to how your windows show up in a desktop. They differ from *layout* in the sense that they apply to a specific window rather than applying to different windows with respect to each other. Bpswm offers 4 states for windows and bspc can be used to swtich between them:\n\n| Command | Action Performed | State Description |\n|:-------:|:----------------:|:-----------------:|\n| bspc node -t tiled | switch the window to tiled state | Its size and position are determined by the window tree. |\n| bspc node -t floating | switch the window to floating state | Can be moved/resized freely. Although it doesn’t use any tiling space, it is still part of the window tree. | \n| bspc node -t pseudo_tiled | switch the window to pseudo_tiled state | A tiled window that automatically shrinks but doesn’t stretch beyond its floating size. |\n| bspc node -t fullscreen | switch the window to fullscreen state | Fills its monitor rectangle and has no borders | \n\nWe can switch our window states during runtime by adding a simple keybinding like the following:\n\n```\n# add these lines in your sxhkdrc file\n# change window states\nalt + {t,shift + t,s,f}\n  bspc node -t {tiled,pseudo_tiled,floating,fullscreen}\n```\n\n---\n\n#### Window Rules\n\nLove tiling mode but want to start certain programs in another layout? Want to configure specific rules on a per-program basis? This section is for you. Using window rules you can do things like making sure certain software has certain window properties when it is executed.\n\nBspc has a subcommand which is devoted to adding rules on a per window basis. For example: \n\n```sh\nbspc rule -a Firefox-esr desktop='^8' state=floating\n```\n\nThis rule states that whenever I open firefox, It should open on the 8th desktop (workspace/tag) in a floating state. You can easily browse through all of the options available on either the bspwm wiki or its manpage. \n\nOne thing to note is that the name of the service that we have mentioned here: \"Firefox-esr\" is actually the *class name* of the program in XDG. The `bspc rule -a` command only uses XDG class names, which can be easily found out by using `xprop`:\n\n```sh\nxprop | grep WM_CLASS\n```\n\nAfter entering this on the command line, simply click on the program window you want to get the class name of. You can then refer to it in the bspwmrc using the same name. \n\nWe learnt about window states in bspwm. Now let us take a look at the layouts that bspwm offers. \n\n---\n\n### Layouts \n\nLayout refers to how windows are placed relative to each other in a desktop. It is also an algorithm which dictates where and how the next window spawn will take place. Bspwm requires you to configure which layout to use manually. It offers the following layouts:\n\n* [Automatic layout](#automatic-layout)\n* [Manual layout](#manual-layout)\n* [Longest side layout](#longest-side-layout)\n* [Spiral layout](#spiral-layout)\n\n---\n\n#### Automatic Layout\n\nAutomatic layout is the default layout in bspwm. Everytime you spawn a window, it splits the window into 2 nodes such that each window has either 2 nodes or no node at all (just like a binary tree):\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/s9qrwvmhfof8qaiauha7.png)\n\n---\n\n#### Manual Layout\n\nIn manual layout, you can pre-select an area in your desktop relative to your current focus. Subsequently spawning a window will ensure that the child is spawned in the pre-selected area. You can pre-select an area using the `bspc node -p north|east|west|south ` command.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/f63h57v1n5fzk8o5ppez.png)\n\n---\n\n#### Longest Side Layout\n\nThe longest side layout is just like the automatic layout, in that it uses the longest window and splits it up into smaller windows recursively. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/x4qih6wdugifv5dw269h.png)\n\n---\n\n#### Spiral Layout\n\nSpiral layout is one of the more common layouts. You might remember the fibionacci layout in dwm. The concept remains the same. Windows split in the order of a left spiral.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/65ch9nte359ffri6sx5b.png)\n\n---\n\n\n#### Polarity\n\nThe polarity of a layout in bspwm refers to the pivot (a child node) around which windows are split. For example in the automatic mode, when we spawn 2 children, the first child always gets split into more children. So by default the polarity of automatic layout is *first_child*. However, polarity can be easily changed by using the following command:\n\n```sh\nbspc config initial_polarity first_child|second_child\n```\n\nLet us look at some of the available initial polarities:\n\n---\n\n##### First Child Polarity\n\nThe first child polarity is similar to the automatic layout, it always splits the first child instead of the second child, which is configured by default. \n\n\n---\n\n##### Second Child Polarity\n\nThe second child polarity can be set using bspc. It is the opposite of the first child polarity in that it splits the second child instead of the first one. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/vd9o6rop85iv23p57rob.png)\n\n---\n\n### Configuring Key Bindings For Switching Layout\n\nThe `bspc config` subcommand is versatile. It can be used for configuring both the aesthetics of a window as well as its layout. To switch between layouts, you can simply run one of the following commands or add them in your bspwmrc:\n\n```sh\n# for spiral mode\nbspc config automatic_scheme spiral\n\n# for longest side mode\nbspc config automatic_scheme longest_side\n```\n\nIn this section we will be adding key bindings in our **sxhkdrc**. The goal is to give us an ability to change layouts during runtime and notify us of the change. \n\nFor notifications, I will be using a package called zenity. It is maintained by the GNOME project. Running the following command will give us the desired alert we need:\n\n```sh\nzenity --info --width=200 --height=100 --text 'This is an info'\n```\n\nFor the purpose of this key binding I created a shell script and placed it in my `~/.config/bspwm/config_scheme.sh`. This script gives an alert whenever I change my layout informing me of the change.\n\n```sh\n#!/bin/bash\n\nif [ \"$1\" == \"first_child\" ]\nthen\n  bspc config automatic_scheme first_child\n  zenity --info --width=200 --height=100 --text \"Switched to first_child mode!\"\n  exit 0\nelif [ \"$1\" == \"longest_side\" ]\nthen\n  bspc config automatic_scheme longest_side\n  zenity --info --width=200 --height=100 --text \"Switched to longest_side mode!\"\n  exit 0\nelif [ \"$1\" == \"spiral\" ]\nthen\n  bspc config automatic_scheme spiral\n  zenity --info --width=200 --height=100 --text \"Switched to spiral mode!\"\n  exit 0\nelse\n  zenity --info --width=200 --height=100 --text \"Invalid mode!\"\n  exit 1\nfi\n```\n\nNow to add this keybinding to my sxhkdrc, I can simply append the following lines and voila.\n\n```sh\n# to change layouts\nalt + control + {1,2,3}\n  ~/.config/bspwm/config_scheme.sh {first_child,longest_side,spiral}\n```\n\n---\n\n### Some Shortcomings\n\nAlthough bspwm is a very mature project, it still has some shortcomings:\n\n* Setting up your bspwm along with keybindings can be a lengthy process.\n* Lack of a lot of documentation might force you to read other people's configuration files.\n* `sxhkd` has a habit of breaking when used with the **fish** shell, because the `^` character is not supported by fish. This can easily be avoided by changing the execution shell by typing `set -U SXHKD_SHELL sh`. \n* Since the key bindings are executed inside a shell, using a heavier shell (eg: fish instead of sh) might be bad for performance. \n\n\n---\n\n### Verdict\n\nBspwm is a window manager meant for the elitist and enthusiasts who love modularity and bare minimum software. It might be very challenging for a new comer to learn, configure and use, but the benefit is that it gives the full control to YOU, the user. You are responsible for how productive you want to be with bspwm. And that is what I love about it. \n\nFull points for productivity and fun because you configure everything yourself. There are no shadow commands hiding in a facade of default key bindings. The learning curve is fairly high. But if you know the concepts and tools to use, you can bring the pieces together to create your own rendition of the death star out of lego. One thing is for sure: language syntax won't be your bottleneck (unlike window managers like awesome or xmonad). I highly recommend it for enthusiasts. \n\nPS: I have a feeling I am going to stick with bspwm for a while :)\n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: :heart: |\n| Learning curve (lesser is better)| :heart: :heart: :heart: :heart: |\n| Productivity | :heart: :heart: :heart: :heart: :heart: |\n| Fun | :heart: :heart: :heart: :heart: :heart: |\n\n---\n\n### References\n\nCheck out my dotfiles here:\n\n{% github https://github.com/L04DB4L4NC3R/DEC %}\n\n* [Bspwm arch wiki](https://wiki.archlinux.org/index.php/Bspwm#Performance_issues_using_fish)\n* [Sxhkd arch wiki](https://wiki.archlinux.org/index.php/Sxhkd)",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 12,
		"description": "The linux philosophy promotes modular software. Linux itself is modular. This ensures plug and play a...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/h7od1930rb29uwvyz2dd.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/bspwm-a-bare-bones-window-manager-44di",
		"public_reactions_count": 87,
		"processed_html": "\u003cp\u003eThe linux philosophy promotes modular software. Linux itself is modular. This ensures plug and play ability, extensibility, and customization to your heart's content. This also means that you can get bare-bones software and install only the bare essentials suited to your needs.\u003c/p\u003e\n\n\u003cp\u003eBspwm or \u003cem\u003eBinary Space Partition Window Manager\u003c/em\u003e, is based around the same philosophy. Bspwm is a minimalistic modern window manager that represents windows as the leaves of a full binary tree. Now due to the fact that there is not a lot of comprehensive documentation out there for bspwm (especially as compared to other window managers like i3), I decided to go ahead and make a (somewhat) practical guide myself. Forgive me if this particular entry in the series is too long.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-started\"\u003eGetting started\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#setting-up-our-environment\"\u003eSetting up our environment\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#adding-a-key-binding-daemon\"\u003eAdding a key binding daemon\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#drawing-a-wallpaper\"\u003eDrawing a wallpaper\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up-a-compositor\"\u003eSetting up a compositor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#adding-a-menu-bar\"\u003eAdding a menu bar\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#the-bspwm-client\"\u003eThe bspwm client\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#node-actions\"\u003eNode Actions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#window-state-actions\"\u003eWindow State Actions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#window-rules\"\u003eWindow Rules\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#layouts\"\u003eLayouts\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#automatic-layout\"\u003eAutomatic layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#manual-layout\"\u003eManual layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#longest-side-layout\"\u003eLongest side layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#spiral-layout\"\u003eSpiral layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#polarity\"\u003ePolarity\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#first-child-polarity\"\u003eFirst child polarity\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#second-child-polarity\"\u003eSecond child polarity\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuring-key-bindings-for-switching-layout\"\u003eConfiguring key bindings for switching layout\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#some-shortcomings\"\u003eSome shortcomings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verdict\"\u003eVerdict\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003ebspwm\u003c/em\u003e is built for multi-monitors. \u003c/li\u003e\n\u003cli\u003eEach monitor in bspwm can have multiple desktops and each desktop is a pointer to a binary tree.\u003c/li\u003e\n\u003cli\u003eIt is skeletal and requires additional software, even for features as common as setting key-bindings.\u003c/li\u003e\n\u003cli\u003eIt only responds to X events, and the messages it receives on a dedicated socket, which can be sent by a provided client: \u003ccode\u003ebspc\u003c/code\u003e. \u003c/li\u003e\n\u003cli\u003eThe desired window layouts in bspwm also have to be configured.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"getting-started\" href=\"#getting-started\"\u003e\n  \u003c/a\u003e\n  Getting Started\n\u003c/h3\u003e\n\n\u003cp\u003e\u003cem\u003ebspwm\u003c/em\u003e is available on most source repositories. In addition, you can download the release and build it from source.\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/baskerville\"\u003e\n        baskerville\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/baskerville/bspwm\"\u003e\n        bspwm\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A tiling window manager based on binary space partitioning\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch2 dir=\"auto\"\u003e\nDescription\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003e\u003cem\u003ebspwm\u003c/em\u003e is a tiling window manager that represents windows as the leaves of a full binary tree.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIt only responds to X events, and the messages it receives on a dedicated socket.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cem\u003ebspc\u003c/em\u003e is a program that writes messages on \u003cem\u003ebspwm\u003c/em\u003e's socket.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cem\u003ebspwm\u003c/em\u003e doesn't handle any keyboard or pointer inputs: a third party program (e.g. \u003cem\u003esxhkd\u003c/em\u003e) is needed in order to translate keyboard and pointer events to \u003cem\u003ebspc\u003c/em\u003e invocations.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe outlined architecture is the following:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        PROCESS          SOCKET\nsxhkd  --------\u0026gt;  bspc  \u0026lt;------\u0026gt;  bspwm\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003e        PROCESS          SOCKET\nsxhkd  --------\u0026gt;  bspc  \u0026lt;------\u0026gt;  bspwm\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 dir=\"auto\"\u003e\nConfiguration\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eThe default configuration file is \u003ccode\u003e$XDG_CONFIG_HOME/bspwm/bspwmrc\u003c/code\u003e: this is simply a shell script that calls \u003cem\u003ebspc\u003c/em\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAn argument is passed to that script to indicate whether is was executed after a restart (\u003ccode\u003e$1 -gt 0\u003c/code\u003e) or not (\u003ccode\u003e$1 -eq 0\u003c/code\u003e).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eKeyboard and pointer bindings are defined with \u003ca href=\"https://github.com/baskerville/sxhkd\"\u003esxhkd\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eExample configuration files can be found in the \u003ca href=\"https://github.com/baskerville/bspwmexamples\"\u003eexamples\u003c/a\u003e directory.\u003c/p\u003e…\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/baskerville/bspwm\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThe easiest way to get started (on debian based systems) is this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ebspwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eTo run it, simple add the following line in your \u003ccode\u003e~/.xsession\u003c/code\u003e file:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eexec bspwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eLogout and log back in again, and boom! You are good to go. When you login, you will be greeted by a black screen. That is because bspwm doesn't know how to draw the wallpaper yet. You will also notice that none of your typical window manager key bindings work. That is because bspwm requires a third party daemon for the same.\u003c/p\u003e\n\n\u003cp\u003eLogout from the current environment and login to either a tty, or any other environment, and let's get started with the configuration so that we can make bspwm a bit usable.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"setting-up-our-environment\" href=\"#setting-up-our-environment\"\u003e\n  \u003c/a\u003e\n  Setting up our environment\n\u003c/h3\u003e\n\n\u003cp\u003eAn example configuration lies in the \u003ccode\u003e/usr/share/doc/bspwm/examples/bspwmrc\u003c/code\u003e file. Simply copy the \u003cem\u003ebspwmrc\u003c/em\u003e file to the \u003ccode\u003e~/.config/bspwm/\u003c/code\u003e directory to get started. The default config file looks like this:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#! /bin/sh\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# for the key-binding daemon (we'll see it below)\u003c/span\u003e\nsxhkd \u0026amp;\n\n\u003cspan class=\"c\"\u003e# for adding multiple monitors and workspaces\u003c/span\u003e\nbspc monitor \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e I II III IV V VI VII VIII IX X\n\nbspc config border_width         2\n\n\u003cspan class=\"c\"\u003e# I like to keep it 10, let me know what you think.\u003c/span\u003e\nbspc config window_gap          12\n\nbspc config split_ratio          0.52\nbspc config borderless_monocle   \u003cspan class=\"nb\"\u003etrue\n\u003c/span\u003ebspc config gapless_monocle      \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Window rules (we'll see it below)\u003c/span\u003e\nbspc rule \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e Gimp \u003cspan class=\"nv\"\u003edesktop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'^8'\u003c/span\u003e \u003cspan class=\"nv\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efloating \u003cspan class=\"nv\"\u003efollow\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eon\nbspc rule \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e Chromium \u003cspan class=\"nv\"\u003edesktop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'^2'\u003c/span\u003e\nbspc rule \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e mplayer2 \u003cspan class=\"nv\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efloating\nbspc rule \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e Kupfer.py \u003cspan class=\"nv\"\u003efocus\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eon\nbspc rule \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e Screenkey \u003cspan class=\"nv\"\u003emanage\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eoff\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eNotice that \u003cem\u003ebspwmrc\u003c/em\u003e does not have a different syntax or any language binding. It just uses a vanilla shell script for its execution. That is because of the \u003cstrong\u003ebspc\u003c/strong\u003e client that comes along with bspwm. This client can send socket events to and from the server. Take a look at its architecture for the same:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e        PROCESS          SOCKET\nsxhkd  --------\u0026gt;  bspc  \u0026lt;------\u0026gt;  bspwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"adding-a-key-binding-daemon\" href=\"#adding-a-key-binding-daemon\"\u003e\n  \u003c/a\u003e\n  Adding a key binding daemon\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eSxhkd\u003c/strong\u003e, mentioned in the architecture given above, stands for \u003cem\u003eSimple X Hot Key Daemon\u003c/em\u003e (And you thought herbstluftwm was hard to pronounce). It runs in the background and uses a very simple syntax to bind keys to commands. To get started with it simply run:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003esxhkd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eSxhkd looks for a configuration file for initialization. You can create one at \u003ccode\u003e~/.config/sxhkd/sxhkdrc\u003c/code\u003e. Let us look at how to add some basic key-bindings to get started with bspwm:\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eour sxhkdrc file\u003c/em\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# To spawn the terminal\u003c/span\u003e\nalt + Return\n  terminator\n\n\u003cspan class=\"c\"\u003e# make sxhkd reload its configuration files:\u003c/span\u003e\nalt + Escape\n    pkill \u003cspan class=\"nt\"\u003e-USR1\u003c/span\u003e \u003cspan class=\"nt\"\u003e-x\u003c/span\u003e sxhkd\n\n\u003cspan class=\"c\"\u003e# for dmenu\u003c/span\u003e\nalt + p\n  dmenu_run\n\n\u003cspan class=\"c\"\u003e# quit/restart bspwm\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eshift\u003c/span\u003e + alt + \u003cspan class=\"o\"\u003e{\u003c/span\u003eq,r\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  bspc \u003cspan class=\"o\"\u003e{\u003c/span\u003equit,wm \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThe second rule makes sure that the moment we hit \u003ccode\u003ealt + Escape\u003c/code\u003e, our sxhkd reloads automatically, therefore making any further changes will not require us to manually kill the daemon and restart it ourselves.\u003c/p\u003e\n\n\u003cp\u003eTo start the daemon simply add the following line in your \u003ccode\u003ebspwmrc\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# To start the daemon in the background\u003c/span\u003e\nsxhkd \u0026amp;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eNow logout and login again. You will be greeted with a black screen, but the moment you hit \u003ccode\u003ealt + Return\u003c/code\u003e, you will get the terminal of your choice! Now this is all we need for further configuring our bspwm.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7cjtj4rl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vokkce7lc3xsyfpkelia.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7cjtj4rl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vokkce7lc3xsyfpkelia.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"550\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"drawing-a-wallpaper\" href=\"#drawing-a-wallpaper\"\u003e\n  \u003c/a\u003e\n  Drawing a wallpaper\n\u003c/h4\u003e\n\n\u003cp\u003eNobody likes a black screen. Our window manager needs some life now. Let us add a wallpaper. \u003cstrong\u003eNitrogen\u003c/strong\u003e is a very good tool for the same. To set it up simply run:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# install nitrogen (available in almost all public repos)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003enitrogen\n\n\u003cspan class=\"c\"\u003e# setting wallpaper (provided that there is a mass_effect.png)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# you can add this line in your bspwmrc too (recommended)\u003c/span\u003e\nnitrogen \u003cspan class=\"nt\"\u003e--set-scaled\u003c/span\u003e /usr/share/backgrounds/mass_effect.png\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eNow our environment (with dmenu) looks like this: \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uAGy7HOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m94l50bghsdky8w079qo.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--uAGy7HOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m94l50bghsdky8w079qo.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"455\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHmmm, it already looks pretty good. But there is something missing. When I open up a terminal, there is no transparency or drop shadow. Even when I have properly configured opacity in my terminal settings. Let us see how we can fix this.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"setting-up-a-compositor\" href=\"#setting-up-a-compositor\"\u003e\n  \u003c/a\u003e\n  Setting up a compositor\n\u003c/h4\u003e\n\n\u003cp\u003eTo learn what is a compositor, check out \u003ca href=\"https://wiki.archlinux.org/index.php/Xorg#Composite\"\u003ethis link\u003c/a\u003e. Note that my next blog will give you a deeper insight into the working of compositors in linux. So stay tuned :)\u003c/p\u003e\n\n\u003cp\u003eLong story short, it is a piece of software responsible for adding effects like drop shadows and transparency in our window managers. Let us get started with \u003cstrong\u003ecompton\u003c/strong\u003e, one such compositor.\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# installing compton\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ecompton\n\n\u003cspan class=\"c\"\u003e# running comption in the background\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# add this command in your bspwmrc (recommended)\u003c/span\u003e\ncomption \u0026amp;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAfter you add the aforementioned line in your \u003ccode\u003ebspwmrc\u003c/code\u003e, simply reload your bspwm (remember we made a keybinding for the same). Spawn a couple of terminals and enjoy the view:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--K4xIzQar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16fgu9v77xedkyamjn8z.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--K4xIzQar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16fgu9v77xedkyamjn8z.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"466\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWow! looks amazing. But there is still something missing. What we need is a panel to see which workspace we are on, or gain access to some quick actions. Let us see how to configure the same.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"adding-a-menu-bar\" href=\"#adding-a-menu-bar\"\u003e\n  \u003c/a\u003e\n  Adding a menu bar\n\u003c/h4\u003e\n\n\u003cp\u003eThe community has worked a lot on creating beautiful and customizable third party menu bars and their themes. Some of the well know panels are the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/polybar/polybar\"\u003ePolybar\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/LemonBoy/bar\"\u003eLemonbar\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/geommer/yabar\"\u003eYabar\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this blog we will be looking at setting up polybar. You can use the \u003ca href=\"https://github.com/polybar/polybar#getting-started\"\u003einstallation candidates\u003c/a\u003e, or you can compile it from source as well. Once you do so, just create a folder \u003ccode\u003e~/.config/polybar/config\u003c/code\u003e and you are good to go. \u003c/p\u003e\n\n\u003cp\u003eWe will be using a third party theme from this repository:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/adi1090x\"\u003e\n        adi1090x\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/adi1090x/polybar-themes\"\u003e\n        polybar-themes\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A huge collection of polybar themes with different styles, colors and variants.\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\n\u003cp align=\"center\" dir=\"auto\"\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://raw.githubusercontent.com/adi1090x/files/master/polybar-themes/previews/logo.png\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tWi74P3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/adi1090x/files/master/polybar-themes/previews/logo.png\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\u003cp align=\"center\" dir=\"auto\"\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/0d67ce79538117294e725ddca274552e5660e34905a5337dece62d6018871854/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d5965732d677265656e3f7374796c653d666f722d7468652d6261646765\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/0d67ce79538117294e725ddca274552e5660e34905a5337dece62d6018871854/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d5965732d677265656e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/Maintained%3F-Yes-green?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/7048d44cbec12adf91be29b5a2d1187409e0fb4a7406dd3aeb0a4b76ac7607c4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f61646931303930782f706f6c796261722d7468656d65733f7374796c653d666f722d7468652d6261646765\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/7048d44cbec12adf91be29b5a2d1187409e0fb4a7406dd3aeb0a4b76ac7607c4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f61646931303930782f706f6c796261722d7468656d65733f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/github/license/adi1090x/polybar-themes?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/2d595e9d27eabd720644cbb37e0b0eae2aab0b18cc9288d78676aa45eaf1be8c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f61646931303930782f706f6c796261722d7468656d65733f7374796c653d666f722d7468652d6261646765\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/2d595e9d27eabd720644cbb37e0b0eae2aab0b18cc9288d78676aa45eaf1be8c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f61646931303930782f706f6c796261722d7468656d65733f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/github/stars/adi1090x/polybar-themes?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/40e886eddbd70aa41dc5266b234a4085525ea4536c7fd1032a1b3f34c66853e4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f61646931303930782f706f6c796261722d7468656d65733f636f6c6f723d76696f6c6574267374796c653d666f722d7468652d6261646765\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/40e886eddbd70aa41dc5266b234a4085525ea4536c7fd1032a1b3f34c66853e4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f61646931303930782f706f6c796261722d7468656d65733f636f6c6f723d76696f6c6574267374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/github/issues/adi1090x/polybar-themes?color=violet\u0026amp;style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/0d59eb85f6eb618f66a227b941ff6bbd34846fd0f82241926d45af8404e4ac90/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f61646931303930782f706f6c796261722d7468656d65733f636f6c6f723d7465616c267374796c653d666f722d7468652d6261646765\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/0d59eb85f6eb618f66a227b941ff6bbd34846fd0f82241926d45af8404e4ac90/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f61646931303930782f706f6c796261722d7468656d65733f636f6c6f723d7465616c267374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/github/forks/adi1090x/polybar-themes?color=teal\u0026amp;style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\u003cp align=\"center\" dir=\"auto\"\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#material\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/e5f472c023c7012155b9533afb970917c48bbfd384d96a5426b6865659c93cc2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d6174657269616c2d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/material-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#shades\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/809ec9ada2949258688c7dba20012086946a80328a1daa69e176765ae6bfa73e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7368616465732d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/shades-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#hack\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/f59fbcf090607b8be264fd236360c3517b027eef3e0f16983832ed67095e6df8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6861636b2d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/hack-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#docky\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/d6d001f4b62c0e1a1249fe86200b5445444838d6a2c9d74ac80e35618b510785/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f636b792d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/docky-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#cuts\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/c4ccef19704247f07f921942970a0ce44d5e47eedc6f7053d2d7bb4c028edafa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f637574732d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/cuts-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#shapes\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/c828b320b40e480b51a136327802009f0a630364bce12ace1ceab713c6d3a771/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7368617065732d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/shapes-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#grayblocks\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/314f9ef7593796e6b104806efacb7a55a22f7b7e7306bb7018d7ab3a1d56e182/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f67726179626c6f636b732d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/grayblocks-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#blocks\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/acc8eb8312a94504884f6ee5a68220923443d8928f05b15976921b8c2d76fa28/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f626c6f636b732d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/blocks-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#colorblocks\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/d9853580de544429a3e296d0df5cad9811a324c3aedbcb30b9c0e285a3046b46/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6c6f72626c6f636b732d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/colorblocks-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#forest\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/f3f2eefe127a009b835a7642a5d0d2556c3cefd61bdc8f8697a52619fed2255d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f666f726573742d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/forest-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#panels\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/77b2efa419d283a7d1a992db8eaf26163fac006654cda9a541e904246ecd9768/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70616e656c732d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/panels-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n  \u003ca href=\"https://github.com/adi1090x/polybar-themes#pwidgets\"\u003e\u003cimg alt=\"undefined\" src=\"https://camo.githubusercontent.com/cff383d7c0c68c670e9b1be9461a785b2cf865655f3f4b0674ea7700bd03318d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70776964676574732d6379616e3f7374796c653d666f722d7468652d6261646765\" data-canonical-src=\"https://img.shields.io/badge/pwidgets-cyan?style=for-the-badge\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\u003cp align=\"center\" dir=\"auto\"\u003eA huge collection of \u003ca href=\"https://github.com/jaagr/polybar\"\u003epolybar\u003c/a\u003e themes with different styles, colors and variants.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/jaagr/polybar\"\u003e\u003cb\u003ePolybar\u003c/b\u003e\u003c/a\u003e aims to help users build beautiful and highly customizable status bars for their desktop environment, without the need of having a black belt in shell scripting.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe main purpose of Polybar is to help users create awesome status bars. It has built-in functionality to display information about the most commonly used services. Some of the services included so far...\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eSystray icons\u003c/li\u003e\n\u003cli\u003eWindow title\u003c/li\u003e\n\u003cli\u003ePlayback controls and status display for MPD using libmpdclient\u003c/li\u003e\n\u003cli\u003eALSA volume controls\u003c/li\u003e\n\u003cli\u003eWorkspace and desktop panel for bspwm and i3\u003c/li\u003e\n\u003cli\u003eWorkspace module for EWMH compliant window managers\u003c/li\u003e\n\u003cli\u003eKeyboard layout and indicator status\u003c/li\u003e\n\u003cli\u003eCPU and memory load indicator\u003c/li\u003e\n\u003cli\u003eBattery display\u003c/li\u003e\n\u003cli\u003eNetwork connection details\u003c/li\u003e\n\u003cli\u003eBacklight level\u003c/li\u003e\n\u003cli\u003eDate and time label\u003c/li\u003e\n\u003cli\u003eTime-based shell script execution\u003c/li\u003e\n\u003cli\u003eCommand output tailing\u003c/li\u003e\n\u003cli\u003eUser-defined menu tree\u003c/li\u003e\n\u003cli\u003eInter-process messaging\u003c/li\u003e\n\u003cli\u003eAnd \u003ca href=\"https://github.com/jaagr/polybar\"\u003emore\u003c/a\u003e...\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 dir=\"auto\"\u003e\nDependencies\u003c/h3\u003e\n\u003cp dir=\"auto\"\u003eInstall following programs on your system before you use these…\u003c/p\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/adi1090x/polybar-themes\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eSelect any theme that you are interested in. For the sake of this blog lets assume you want to go for \u003cem\u003epolybar-1\u003c/em\u003e. Simply run the following commands and you are good to go:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# clone this repo\u003c/span\u003e\ngit clone https://github.com/adi1090x/polybar-themes\n\n\u003cspan class=\"c\"\u003e# go to polybar-1 dir\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecd \u003c/span\u003epolybar-themes/polybar-1\n\n\u003cspan class=\"c\"\u003e# copy fonts to local fonts dir (i'll put the fonts in all dirs)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e fonts/\u003cspan class=\"k\"\u003e*\u003c/span\u003e ~/.local/share/fonts\n\n\u003cspan class=\"c\"\u003e# reload font cache\u003c/span\u003e\nfc-cache \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# copy everything from polybar-1 to polybar config dir (backup your config first if you have)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e ~/.config/polybar\n\n\u003cspan class=\"c\"\u003e# add the following two commands to your bspwmrc (recommended)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# kill previously running instances of polybar\u003c/span\u003e\npkill polybar\n\n\u003cspan class=\"c\"\u003e# run launch.sh \u003c/span\u003e\n~/.config/polybar/launch.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eOnce you add the lines in your bspwmrc, simply reload your window manager and you will be able to see a beautiful panel at the bottom of your screen. To configure this panel simply edit the \u003ccode\u003e~/.config/polybar/config.ini\u003c/code\u003e file to your heart's content. Now our environment looks something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iVevxImJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sm2jkmxcjiktkol26m4x.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iVevxImJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sm2jkmxcjiktkol26m4x.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAah that is more like it. The pieces are coming together. It is like the time Sheldon Cooper used lego to make a death star. I assure you this is nothing remotely as dramatic, but totally fun :)\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"the-bspwm-client\" href=\"#the-bspwm-client\"\u003e\n  \u003c/a\u003e\n  The bspwm client\n\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003ebspc\u003c/strong\u003e is your own friendly neighborhood client which ships with bspwm. It sends socket events to bspwm to draw or make changes in your X window system. Due to the fact that it is so powerful on the command line itself, bspwm does not need a second language or syntax for its configuration and thus uses shell script with a set of \u003cem\u003ebspc\u003c/em\u003e commands for the same. In this section we will be looking at some of the most important \u003cem\u003ebspc\u003c/em\u003e commands and building our configuration further using them. If you are stuck along the way, make sure to check out the man page of bspc (by running \u003ccode\u003eman bspc\u003c/code\u003e) or the \u003ca href=\"https://github.com/baskerville/bspwm/wiki/Command-Syntax-Rewrite\"\u003ebspwm wiki\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that for the purpose of this block, whenever I use the term \"action\", it is going to refer to a subcommand/functionality of bspc. \u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"node-actions\" href=\"#node-actions\"\u003e\n  \u003c/a\u003e\n  Node Actions\n\u003c/h4\u003e\n\n\u003cp\u003eA node in bspwm refers to a window. The \u003ccode\u003ebspm node\u003c/code\u003e subcommand controls window specific actions. Some of the example commands are listed below:\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eCommand\u003c/th\u003e\n\u003cth\u003eAction Performed\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ebspc node -c\u003c/td\u003e\n\u003ctd\u003eclose a window\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ebspc node -k\u003c/td\u003e\n\u003ctd\u003ekill a window\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ebspc node -d 7\u003c/td\u003e\n\u003ctd\u003esend the window to the 7th desktop\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ebspc node -p north\u003c/td\u003e\n\u003ctd\u003eeast\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003cp\u003eTry these commands on your terminal before adding them to the key-bindings. After adding them, the node section of my \u003ccode\u003esxhkdrc\u003c/code\u003e looks like this:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e# send the window to the given desktop\nalt + shift + {1-9}\n  bspc node -d '^{1-9}'\n\n# close and kill\nalt + {_,shift + }c\n    bspc node -{c,k}\n\n# preselect the direction\n# we will see that this means in the manual layout\nsuper + ctrl + {h,j,k,l}\n    bspc node -p {west,south,north,east}\n\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"window-state-actions\" href=\"#window-state-actions\"\u003e\n  \u003c/a\u003e\n  Window State Actions\n\u003c/h4\u003e\n\n\u003cp\u003e\u003cem\u003eWindow states\u003c/em\u003e refer to how your windows show up in a desktop. They differ from \u003cem\u003elayout\u003c/em\u003e in the sense that they apply to a specific window rather than applying to different windows with respect to each other. Bpswm offers 4 states for windows and bspc can be used to swtich between them:\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eCommand\u003c/th\u003e\n\u003cth\u003eAction Performed\u003c/th\u003e\n\u003cth\u003eState Description\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ebspc node -t tiled\u003c/td\u003e\n\u003ctd\u003eswitch the window to tiled state\u003c/td\u003e\n\u003ctd\u003eIts size and position are determined by the window tree.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ebspc node -t floating\u003c/td\u003e\n\u003ctd\u003eswitch the window to floating state\u003c/td\u003e\n\u003ctd\u003eCan be moved/resized freely. Although it doesn’t use any tiling space, it is still part of the window tree.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ebspc node -t pseudo_tiled\u003c/td\u003e\n\u003ctd\u003eswitch the window to pseudo_tiled state\u003c/td\u003e\n\u003ctd\u003eA tiled window that automatically shrinks but doesn’t stretch beyond its floating size.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ebspc node -t fullscreen\u003c/td\u003e\n\u003ctd\u003eswitch the window to fullscreen state\u003c/td\u003e\n\u003ctd\u003eFills its monitor rectangle and has no borders\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003cp\u003eWe can switch our window states during runtime by adding a simple keybinding like the following:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e# add these lines in your sxhkdrc file\n# change window states\nalt + {t,shift + t,s,f}\n  bspc node -t {tiled,pseudo_tiled,floating,fullscreen}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"window-rules\" href=\"#window-rules\"\u003e\n  \u003c/a\u003e\n  Window Rules\n\u003c/h4\u003e\n\n\u003cp\u003eLove tiling mode but want to start certain programs in another layout? Want to configure specific rules on a per-program basis? This section is for you. Using window rules you can do things like making sure certain software has certain window properties when it is executed.\u003c/p\u003e\n\n\u003cp\u003eBspc has a subcommand which is devoted to adding rules on a per window basis. For example:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ebspc rule \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e Firefox-esr \u003cspan class=\"nv\"\u003edesktop\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'^8'\u003c/span\u003e \u003cspan class=\"nv\"\u003estate\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003efloating\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThis rule states that whenever I open firefox, It should open on the 8th desktop (workspace/tag) in a floating state. You can easily browse through all of the options available on either the bspwm wiki or its manpage. \u003c/p\u003e\n\n\u003cp\u003eOne thing to note is that the name of the service that we have mentioned here: \"Firefox-esr\" is actually the \u003cem\u003eclass name\u003c/em\u003e of the program in XDG. The \u003ccode\u003ebspc rule -a\u003c/code\u003e command only uses XDG class names, which can be easily found out by using \u003ccode\u003exprop\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003exprop | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eWM_CLASS\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAfter entering this on the command line, simply click on the program window you want to get the class name of. You can then refer to it in the bspwmrc using the same name. \u003c/p\u003e\n\n\u003cp\u003eWe learnt about window states in bspwm. Now let us take a look at the layouts that bspwm offers. \u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"layouts\" href=\"#layouts\"\u003e\n  \u003c/a\u003e\n  Layouts\n\u003c/h3\u003e\n\n\u003cp\u003eLayout refers to how windows are placed relative to each other in a desktop. It is also an algorithm which dictates where and how the next window spawn will take place. Bspwm requires you to configure which layout to use manually. It offers the following layouts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#automatic-layout\"\u003eAutomatic layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#manual-layout\"\u003eManual layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#longest-side-layout\"\u003eLongest side layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#spiral-layout\"\u003eSpiral layout\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"automatic-layout\" href=\"#automatic-layout\"\u003e\n  \u003c/a\u003e\n  Automatic Layout\n\u003c/h4\u003e\n\n\u003cp\u003eAutomatic layout is the default layout in bspwm. Everytime you spawn a window, it splits the window into 2 nodes such that each window has either 2 nodes or no node at all (just like a binary tree):\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PSMgV4U6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s9qrwvmhfof8qaiauha7.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PSMgV4U6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s9qrwvmhfof8qaiauha7.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"manual-layout\" href=\"#manual-layout\"\u003e\n  \u003c/a\u003e\n  Manual Layout\n\u003c/h4\u003e\n\n\u003cp\u003eIn manual layout, you can pre-select an area in your desktop relative to your current focus. Subsequently spawning a window will ensure that the child is spawned in the pre-selected area. You can pre-select an area using the \u003ccode\u003ebspc node -p north|east|west|south\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NZpLt5YU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f63h57v1n5fzk8o5ppez.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--NZpLt5YU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f63h57v1n5fzk8o5ppez.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"longest-side-layout\" href=\"#longest-side-layout\"\u003e\n  \u003c/a\u003e\n  Longest Side Layout\n\u003c/h4\u003e\n\n\u003cp\u003eThe longest side layout is just like the automatic layout, in that it uses the longest window and splits it up into smaller windows recursively. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mgELkoi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x4qih6wdugifv5dw269h.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mgELkoi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x4qih6wdugifv5dw269h.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"spiral-layout\" href=\"#spiral-layout\"\u003e\n  \u003c/a\u003e\n  Spiral Layout\n\u003c/h4\u003e\n\n\u003cp\u003eSpiral layout is one of the more common layouts. You might remember the fibionacci layout in dwm. The concept remains the same. Windows split in the order of a left spiral.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--B8KYWLMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/65ch9nte359ffri6sx5b.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--B8KYWLMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/65ch9nte359ffri6sx5b.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"polarity\" href=\"#polarity\"\u003e\n  \u003c/a\u003e\n  Polarity\n\u003c/h4\u003e\n\n\u003cp\u003eThe polarity of a layout in bspwm refers to the pivot (a child node) around which windows are split. For example in the automatic mode, when we spawn 2 children, the first child always gets split into more children. So by default the polarity of automatic layout is \u003cem\u003efirst_child\u003c/em\u003e. However, polarity can be easily changed by using the following command:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ebspc config initial_polarity first_child|second_child\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eLet us look at some of the available initial polarities:\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch5\u003e\n  \u003ca name=\"first-child-polarity\" href=\"#first-child-polarity\"\u003e\n  \u003c/a\u003e\n  First Child Polarity\n\u003c/h5\u003e\n\n\u003cp\u003eThe first child polarity is similar to the automatic layout, it always splits the first child instead of the second child, which is configured by default. \u003c/p\u003e\n\n\u003chr\u003e\n\u003ch5\u003e\n  \u003ca name=\"second-child-polarity\" href=\"#second-child-polarity\"\u003e\n  \u003c/a\u003e\n  Second Child Polarity\n\u003c/h5\u003e\n\n\u003cp\u003eThe second child polarity can be set using bspc. It is the opposite of the first child polarity in that it splits the second child instead of the first one. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ctEnCdt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vd9o6rop85iv23p57rob.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ctEnCdt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vd9o6rop85iv23p57rob.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"configuring-key-bindings-for-switching-layout\" href=\"#configuring-key-bindings-for-switching-layout\"\u003e\n  \u003c/a\u003e\n  Configuring Key Bindings For Switching Layout\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003ebspc config\u003c/code\u003e subcommand is versatile. It can be used for configuring both the aesthetics of a window as well as its layout. To switch between layouts, you can simply run one of the following commands or add them in your bspwmrc:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# for spiral mode\u003c/span\u003e\nbspc config automatic_scheme spiral\n\n\u003cspan class=\"c\"\u003e# for longest side mode\u003c/span\u003e\nbspc config automatic_scheme longest_side\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eIn this section we will be adding key bindings in our \u003cstrong\u003esxhkdrc\u003c/strong\u003e. The goal is to give us an ability to change layouts during runtime and notify us of the change. \u003c/p\u003e\n\n\u003cp\u003eFor notifications, I will be using a package called zenity. It is maintained by the GNOME project. Running the following command will give us the desired alert we need:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ezenity \u003cspan class=\"nt\"\u003e--info\u003c/span\u003e \u003cspan class=\"nt\"\u003e--width\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e200 \u003cspan class=\"nt\"\u003e--height\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e100 \u003cspan class=\"nt\"\u003e--text\u003c/span\u003e \u003cspan class=\"s1\"\u003e'This is an info'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eFor the purpose of this key binding I created a shell script and placed it in my \u003ccode\u003e~/.config/bspwm/config_scheme.sh\u003c/code\u003e. This script gives an alert whenever I change my layout informing me of the change.\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"first_child\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003ethen\n  \u003c/span\u003ebspc config automatic_scheme first_child\n  zenity \u003cspan class=\"nt\"\u003e--info\u003c/span\u003e \u003cspan class=\"nt\"\u003e--width\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e200 \u003cspan class=\"nt\"\u003e--height\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e100 \u003cspan class=\"nt\"\u003e--text\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Switched to first_child mode!\"\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e0\n\u003cspan class=\"k\"\u003eelif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"longest_side\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003ethen\n  \u003c/span\u003ebspc config automatic_scheme longest_side\n  zenity \u003cspan class=\"nt\"\u003e--info\u003c/span\u003e \u003cspan class=\"nt\"\u003e--width\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e200 \u003cspan class=\"nt\"\u003e--height\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e100 \u003cspan class=\"nt\"\u003e--text\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Switched to longest_side mode!\"\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e0\n\u003cspan class=\"k\"\u003eelif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"spiral\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003ethen\n  \u003c/span\u003ebspc config automatic_scheme spiral\n  zenity \u003cspan class=\"nt\"\u003e--info\u003c/span\u003e \u003cspan class=\"nt\"\u003e--width\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e200 \u003cspan class=\"nt\"\u003e--height\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e100 \u003cspan class=\"nt\"\u003e--text\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Switched to spiral mode!\"\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e0\n\u003cspan class=\"k\"\u003eelse\n  \u003c/span\u003ezenity \u003cspan class=\"nt\"\u003e--info\u003c/span\u003e \u003cspan class=\"nt\"\u003e--width\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e200 \u003cspan class=\"nt\"\u003e--height\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e100 \u003cspan class=\"nt\"\u003e--text\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Invalid mode!\"\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eexit \u003c/span\u003e1\n\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eNow to add this keybinding to my sxhkdrc, I can simply append the following lines and voila.\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# to change layouts\u003c/span\u003e\nalt + control + \u003cspan class=\"o\"\u003e{\u003c/span\u003e1,2,3\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n  ~/.config/bspwm/config_scheme.sh \u003cspan class=\"o\"\u003e{\u003c/span\u003efirst_child,longest_side,spiral\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"some-shortcomings\" href=\"#some-shortcomings\"\u003e\n  \u003c/a\u003e\n  Some Shortcomings\n\u003c/h3\u003e\n\n\u003cp\u003eAlthough bspwm is a very mature project, it still has some shortcomings:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSetting up your bspwm along with keybindings can be a lengthy process.\u003c/li\u003e\n\u003cli\u003eLack of a lot of documentation might force you to read other people's configuration files.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003esxhkd\u003c/code\u003e has a habit of breaking when used with the \u003cstrong\u003efish\u003c/strong\u003e shell, because the \u003ccode\u003e^\u003c/code\u003e character is not supported by fish. This can easily be avoided by changing the execution shell by typing \u003ccode\u003eset -U SXHKD_SHELL sh\u003c/code\u003e. \u003c/li\u003e\n\u003cli\u003eSince the key bindings are executed inside a shell, using a heavier shell (eg: fish instead of sh) might be bad for performance. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h3\u003e\n\n\u003cp\u003eBspwm is a window manager meant for the elitist and enthusiasts who love modularity and bare minimum software. It might be very challenging for a new comer to learn, configure and use, but the benefit is that it gives the full control to YOU, the user. You are responsible for how productive you want to be with bspwm. And that is what I love about it. \u003c/p\u003e\n\n\u003cp\u003eFull points for productivity and fun because you configure everything yourself. There are no shadow commands hiding in a facade of default key bindings. The learning curve is fairly high. But if you know the concepts and tools to use, you can bring the pieces together to create your own rendition of the death star out of lego. One thing is for sure: language syntax won't be your bottleneck (unlike window managers like awesome or xmonad). I highly recommend it for enthusiasts. \u003c/p\u003e\n\n\u003cp\u003ePS: I have a feeling I am going to stick with bspwm for a while :)\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h3\u003e\n\n\u003cp\u003eCheck out my dotfiles here:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/L04DB4L4NC3R\"\u003e\n        L04DB4L4NC3R\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/L04DB4L4NC3R/DEC\"\u003e\n        DEC\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      Development Environment Config. Work faster than ever with my dotfiles\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp align=\"center\" dir=\"auto\"\u003e\n    \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/30529572/60157440-60a58300-980c-11e9-8ec6-020be154b566.gif\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JJdmS5k4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/30529572/60157440-60a58300-980c-11e9-8ec6-020be154b566.gif\" width=\"150px\" data-animated-image=\"\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\u003ch1 align=\"center\" dir=\"auto\"\u003e\nDev Environment Config\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eWhen somebody begins a sentence with “IT WOULD BE NICE IF..” the right thing to do is to wait politely for the speaker to finish. No project ever gets around to the it-would-be-nice features: or if they do, they regret it. Wait for sentences that begin “WE HAVE TO..” and pay close attention, and see if you agree. \u003cstrong\u003e- Tom Van Vleck\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eAre you a programmer? Do you wanna spend more time thinking and solving problems rather than writing biolerplate code again and again? Are you sick of bad navigation? Well this is the solution for you!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cbr\u003e\n\u003ch3 dir=\"auto\"\u003e\nDev environment tools\u003c/h3\u003e\n\u003cul class=\"contains-task-list\"\u003e\n\u003cli class=\"task-list-item\"\u003e\n \u003ccode\u003ezsh\u003c/code\u003e shell + plugins\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\n \u003ccode\u003eterminator\u003c/code\u003e tiling manager\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\n \u003ccode\u003evim\u003c/code\u003e editor + plugins\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\n \u003ccode\u003eranger\u003c/code\u003e file manager\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\n\u003ch3 dir=\"auto\"\u003e\nReferences\u003c/h3\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh.git\"\u003eOh my zsh\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.systutorials.com/docs/linux/man/5-terminator_config/\" rel=\"nofollow\"\u003eterminator config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\"\u003ezsh plugins\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\"\u003eshell themes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/30529572/83451951-5130b000-a447-11ea-9aad-d8686aeedee4.png\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2ikHVUOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/30529572/83451951-5130b000-a447-11ea-9aad-d8686aeedee4.png\" alt=\"ss\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 dir=\"auto\"\u003e\nVim plugins included\u003c/h3\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/fatih/vim-go.git\"\u003evim-go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kien/ctrlp.vim.git\"\u003ectrlp.vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vim-airline/vim-airline.git\"\u003eairline\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mattn/emmet-vim.git\"\u003eemmet-vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tpope/vim-fugitive.git\"\u003evim-fugitive\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/scrooloose/nerdtree.git\"\u003enerdtree\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/terryma/vim-multiple-cursors.git\"\u003evim-multiple-cursors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ycm-core/YouCompleteMe.git\"\u003eYouCompleteMe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/stephpy/vim-yaml.git\"\u003evim-yaml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/itchyny/lightline.vim.git\"\u003elightline.vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tpope/vim-pathogen.git\"\u003epathogen\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\n\u003ch3 dir=\"auto\"\u003e\nZsh plugins included\u003c/h3\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/zsh-users/zsh-autosuggestions\"\u003ezsh-autosuggestions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003egit\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\n\u003ch3 dir=\"auto\"\u003e\nRecommended keyboard shortcuts for\u003c/h3\u003e…\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/L04DB4L4NC3R/DEC\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.archlinux.org/index.php/Bspwm#Performance_issues_using_fish\"\u003eBspwm arch wiki\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.archlinux.org/index.php/Sxhkd\"\u003eSxhkd arch wiki\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "bspwm-a-bare-bones-window-manager-44di",
		"social_image": null,
		"title": "Bspwm: A Bare-Bones Window Manager",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-16T07:04:51.428Z",
		"crossposted_at": null,
		"edited_at": "2020-04-16T07:15:09.277Z",
		"last_comment_at": "2022-01-22T18:25:52.604Z",
		"published_at": "2020-04-16T07:06:08.504Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "I recently reviewed about 5 window managers. I wanna survey which window manager you guys are using. You can optionally add screenshots of your environment here as well. I'll keep on sharing the form responses soon :)\n\n[Fill in the survey](https://kutt.it/wm)",
		"cached_tag_list": "linux, discuss",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 8,
		"description": "I recently reviewed about 5 window managers. I wanna survey which window manager you guys are using....",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/v3nkrhlh004ehpfv24tq.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/which-window-manager-are-you-using-4c14",
		"public_reactions_count": 3,
		"processed_html": "\u003cp\u003eI recently reviewed about 5 window managers. I wanna survey which window manager you guys are using. You can optionally add screenshots of your environment here as well. I'll keep on sharing the form responses soon :)\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://kutt.it/wm\"\u003eFill in the survey\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "which-window-manager-are-you-using-4c14",
		"social_image": null,
		"title": "Which Window Manager Are You Using?",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-21T02:47:30.230Z",
		"crossposted_at": null,
		"edited_at": "2020-04-21T06:14:47.482Z",
		"last_comment_at": "2020-04-21T06:10:36.270Z",
		"published_at": "2020-04-21T06:10:36.270Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "I was preparing my resume due to the upcoming placement season (boy did that get ruined by the pandemic). Like a noobie that I was, I was using a paid service to generate cool templates for me to work with. A friend of mine introduced me to [LaTeX](https://www.latex-project.org/) and i got very interested. It turns out that using latex, you can quickly create beautiful documents with a straight forward syntax. \n\nDuring my hours of roaming the often-uncharted recesses of the internet, I came to know about **pandoc**, which is a tool that can be used to convert documents from one markup format to the other. Quite interestingly, it can be used to convert markdown to LaTeX. Moreover, [beamer](https://www.overleaf.com/learn/latex/beamer) is used to create beautiful and simplistic LaTeX flavored presentations.\n\n{% github https://github.com/jgm/pandoc %}\n\nAll the posts on the DEV community are written in markdown (even the comments), and it even has an API to fetch all of your posts. One thing led to the other and I ended up making a script for converting all of my published DEV posts to a presentation. Let us see how.\n\n---\n\n### Installing Dependencies\n\nIf you are on a debian based system, run the following commands:\n\n```sh\n# markup conversion tool\nsudo apt install pandoc\n\n# installing latex tools\nsudo apt install texlive-latex-extra\n\n# installing xelatex engine for handling unicode\nsudo apt install texlive-xetex\n\n# installing JSON parser for bash\nsudo apt install jq\n\n# installing curl for sending requests\nsudo apt install curl\n```\n\nThe following is a copy-friendly debian-based dependency installation command:\n\n```sh\nsudo apt install pandoc texlive-latex-extra texlive-xetex jq curl\n```\n\n---\n\n### Generating the DEV API Key\n\nDEV offers a [well-documented application programming interface](https://docs.dev.to/api/) for common actions such as fetching posts and comments. You can create an API key by going into your account settings:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/c5npwwq439ju55wyziqy.png)\n\nThis key will be used for fetching user-specific posts. \n\n---\n\n### Using Pandoc\n\nPandoc is a really powerful markup conversion tool. I suggest you read its man page to know the full extent of its power. For the purpose of this blog, we will learn how to convert markdown to PDF presentation format (beamer LaTeX). \n\nLet us create a markdown file called `test.md`: \n\n```md\n---\ntitle:\n  - My Presentation\nauthor:\n  - Angad Sharma\ntheme:\n  - AnnArbor\n---\n\n# This is a new slide\n\n## This is a heading\n\n* This is some text\n* **This is some bold text**\n* *This is some emphatic text*\n\n# This is another slide\n\n| This | Is | A | Table |\n|:----:|:--:|:-:|:-----:|\n| A | B | C | D | \n| E | F | G | H |\n\n# This is yet another slide\n\n![This is a photo](https://dev-to-uploads.s3.amazonaws.com/i/q8twfrlpiboszsy4d5d6.jpg)\n```\n\nThe data enclosed in the 3 dashes is the metadata of the document. It can be used to define details like the author and heading of the presentation, as well as the theme for the same. Take a look at the [list of beamer themes to look for the one you like](http://deic.uab.es/~iblanes/beamer_gallery/index_by_theme.html). Now let us convert the markdown to a presentation: \n\n```sh\npandoc test.md -t beamer -o out.pdf --latex-engine=xelatex\n```\n\nThe `-t` flag helps decide the format of the output. In this case we want a LaTeX-style presentation (beamer). The next flag, `-o` specifies the output file. `--latex-engine` flag decides which engine to use while parsing the document. In this case we are using xelatex because it handles unicode really well. Note that version 2.9.* uses `--pdf-engine` instead of `--latex-engine`.\n\nNow our out.pdf will look like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/fbsztnfjqmv0vn1o2vpe.png)\n\n---\n\n### Converting DEV posts into presentations\n\nThe following lines of code fetch your articles from DEV and convert them into a beautiful LaTeX themed presentation:\n\n```sh\ncurl -H \"api-key: \u003cYOUR_API_KEY\u003e\" https://dev.to/api/articles/me/published | jq -r \".[].body_markdown\"\n\npandoc posts.md -t beamer -o presentation.pdf --latex-engine=xelatex\n```\n\nNow what did we do? We used the DEV API to fetch a JSON of all your published posts, which is an array. Each post in that array contains a property called `body_markdown`, which contains the markdown of that particular post. We simply used the `jq` parser to go through each element in the array and fetch the body_markdown of the same. Then we piped the output to a file for the subsequent step.\n\nWe used pandoc on the generated file, directing it to use the beamer format to output a PDF using the xelatex engine. Now the latter is necessary for rendering unicode characters in your markdown (so that all of your emojis show up). \n \nQuick tip: To get your latest post, simply use the `per_page` attribute of the DEV API:\n\n```sh\n# Note that an index can also be passed on the [] parameter\n# of \"jq\" to get a specific post\ncurl -H \"api-key: \u003cYOUR_API_KEY\u003e\" https://dev.to/api/articles/me/published?per_page=1 | jq -r \".[].body_markdown\" \u003e latest.md\n\n# verbose flag can be used to view additional info such as image fetch log\npandoc latest.md -t beamer -o latest.pdf --latex-engine=xelatex --verbose\n```\n\nAs a sample, I have taken my blog on [bspwm](https://dev.to/l04db4l4nc3r/bspwm-a-bare-bones-window-manager-44di) and converted to a presentation: \n\n[Click here to view the presentation](https://drive.google.com/file/d/108wsEElpa9yqQCPNrWyomWGM7pMLO38b/view?usp=sharing)\n\n---\n\n### Limitations\n\n* Liquid links do not get converted in the presentation, including embedded gists, repositories and other posts. This is due to the fact that these are not markdown features, but DEV features instead. \n\n* Pandoc collects all the photos in the markdown during runtime. In the case of a slow internet connection, it may timeout and completely ignore some photos. But this is in the case of a VERY slow internet connection.\n\n\n---\n\n### Conclusion\n\nNeed to take a seminar or a webinar on a topic you have already written about? Generate a presentation from your markdown in minutes, with pandoc!\n",
		"cached_tag_list": "tutorial, showdev, todayilearned, todayisearched",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "I was preparing my resume due to the upcoming placement season (boy did that get ruined by the pandem...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/drs28swxy41cwx34nn8g.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/presentable-dev-posts-with-pandoc-56pc",
		"public_reactions_count": 8,
		"processed_html": "\u003cp\u003eI was preparing my resume due to the upcoming placement season (boy did that get ruined by the pandemic). Like a noobie that I was, I was using a paid service to generate cool templates for me to work with. A friend of mine introduced me to \u003ca href=\"https://www.latex-project.org/\"\u003eLaTeX\u003c/a\u003e and i got very interested. It turns out that using latex, you can quickly create beautiful documents with a straight forward syntax. \u003c/p\u003e\n\n\u003cp\u003eDuring my hours of roaming the often-uncharted recesses of the internet, I came to know about \u003cstrong\u003epandoc\u003c/strong\u003e, which is a tool that can be used to convert documents from one markup format to the other. Quite interestingly, it can be used to convert markdown to LaTeX. Moreover, \u003ca href=\"https://www.overleaf.com/learn/latex/beamer\"\u003ebeamer\u003c/a\u003e is used to create beautiful and simplistic LaTeX flavored presentations.\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/jgm\"\u003e\n        jgm\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/jgm/pandoc\"\u003e\n        pandoc\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      Universal markup converter\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\n\u003ch1 dir=\"auto\"\u003e\nPandoc\u003c/h1\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/jgm/pandoc/releases\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/d4d79085f410ba61bc2ade88c5ee098fb3ee8647b6caf21c4a2ddf57b13b0371/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6a676d2f70616e646f632e7376673f6c6162656c3d63757272656e742b72656c65617365\" alt=\"github release\" data-canonical-src=\"https://img.shields.io/github/release/jgm/pandoc.svg?label=current+release\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://hackage.haskell.org/package/pandoc\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/bbfed3bfb2c541bbf8d8d8d06665667d71ac84cdf0cf57c89a5a50082f05edb6/68747470733a2f2f696d672e736869656c64732e696f2f6861636b6167652f762f70616e646f632e7376673f6c6162656c3d6861636b616765\" alt=\"hackage release\" data-canonical-src=\"https://img.shields.io/hackage/v/pandoc.svg?label=hackage\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://formulae.brew.sh/formula/pandoc\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/725abe8a008dfd4bd55da228be04dc9ddd4dfdce0b5de3aea01e8d7468d59cdc/68747470733a2f2f696d672e736869656c64732e696f2f686f6d65627265772f762f70616e646f632e737667\" alt=\"homebrew\" data-canonical-src=\"https://img.shields.io/homebrew/v/pandoc.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://www.stackage.org/lts/package/pandoc-types\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/76f60d2369da5de5f6dccaf2882d0ef2b7a6bbcc1dd4bd71d78ea51c72c72501/68747470733a2f2f737461636b6167652e6f72672f7061636b6167652f70616e646f632f62616467652f6c7473\" alt=\"stackage LTS package\" data-canonical-src=\"https://stackage.org/package/pandoc/badge/lts\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://github.com/jgm/pandoc/actions\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FJruAOF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jgm/pandoc/workflows/CI%2520tests/badge.svg\" alt=\"CI tests\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003ca href=\"https://www.gnu.org/licenses/gpl.html\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/980639545f76208a7656d75d4d7347688e7f05ca6876a25f8ab99910138229c8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c76322b2d6c69676874677261792e737667\" alt=\"license\" data-canonical-src=\"https://img.shields.io/badge/license-GPLv2+-lightgray.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\n\u003ca href=\"https://groups.google.com/forum/#!forum/pandoc-discuss\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/efb8afa509f28304e4c9d4dc76b87bd4bbefb425fb4368836ed5c8060f019ef6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70616e646f632d646973637573732d7265642e7376673f7374796c653d736f6369616c\" alt=\"pandoc-discuss on google groups\" data-canonical-src=\"https://img.shields.io/badge/pandoc-discuss-red.svg?style=social\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nThe universal markup converter\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003ePandoc is a \u003ca href=\"https://haskell.org\" rel=\"nofollow\"\u003eHaskell\u003c/a\u003e library for converting from\none markup format to another, and a command-line tool that uses this\nlibrary. It can convert \u003cem\u003efrom\u003c/em\u003e\u003c/p\u003e\n\u003cdiv id=\"user-content-input-formats\" dir=\"auto\"\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003ccode\u003ebibtex\u003c/code\u003e (\u003ca href=\"https://ctan.org/pkg/bibtex\" rel=\"nofollow\"\u003eBibTeX\u003c/a\u003e bibliography)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebiblatex\u003c/code\u003e (\u003ca href=\"https://ctan.org/pkg/biblatex\" rel=\"nofollow\"\u003eBibLaTeX\u003c/a\u003e bibliography)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecommonmark\u003c/code\u003e (\u003ca href=\"https://commonmark.org\" rel=\"nofollow\"\u003eCommonMark\u003c/a\u003e Markdown)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecommonmark_x\u003c/code\u003e (\u003ca href=\"https://commonmark.org\" rel=\"nofollow\"\u003eCommonMark\u003c/a\u003e Markdown with\nextensions)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecreole\u003c/code\u003e (\u003ca href=\"http://www.wikicreole.org/wiki/Creole1.0\" rel=\"nofollow\"\u003eCreole 1.0\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecsljson\u003c/code\u003e (\u003ca href=\"https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html\" rel=\"nofollow\"\u003eCSL\nJSON\u003c/a\u003e\nbibliography)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecsv\u003c/code\u003e (\u003ca href=\"https://tools.ietf.org/html/rfc4180\" rel=\"nofollow\"\u003eCSV\u003c/a\u003e table)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edocbook\u003c/code\u003e (\u003ca href=\"https://docbook.org\" rel=\"nofollow\"\u003eDocBook\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edocx\u003c/code\u003e (\u003ca href=\"https://en.wikipedia.org/wiki/Office_Open_XML\" rel=\"nofollow\"\u003eWord docx\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edokuwiki\u003c/code\u003e (\u003ca href=\"https://www.dokuwiki.org/dokuwiki\" rel=\"nofollow\"\u003eDokuWiki markup\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eendnotexml\u003c/code\u003e (\u003ca href=\"https://support.clarivate.com/Endnote/s/article/EndNote-XML-Document-Type-Definition\" rel=\"nofollow\"\u003eEndNote XML\nbibliography\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eepub\u003c/code\u003e (\u003ca href=\"http://idpf.org/epub\" rel=\"nofollow\"\u003eEPUB\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003efb2\u003c/code\u003e\n(\u003ca href=\"http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1\" rel=\"nofollow\"\u003eFictionBook2\u003c/a\u003e\ne-book)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003egfm\u003c/code\u003e (\u003ca href=\"https://help.github.com/articles/github-flavored-markdown/\"\u003eGitHub-Flavored\nMarkdown\u003c/a\u003e)\nor the deprecated and less accurate \u003ccode\u003emarkdown_github\u003c/code\u003e; use\n\u003ca href=\"https://pandoc.org/MANUAL.html#markdown-variants\" rel=\"nofollow\"\u003e\u003ccode\u003emarkdown_github\u003c/code\u003e\u003c/a\u003e\nonly if you need extensions not supported in\n\u003ca href=\"https://pandoc.org/MANUAL.html#markdown-variants\" rel=\"nofollow\"\u003e\u003ccode\u003egfm\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehaddock\u003c/code\u003e (\u003ca href=\"https://www.haskell.org/haddock/doc/html/ch03s08.html\" rel=\"nofollow\"\u003eHaddock\nmarkup\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ehtml\u003c/code\u003e (\u003ca href=\"https://www.w3.org/html/\" rel=\"nofollow\"\u003eHTML\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eipynb\u003c/code\u003e (\u003ca href=\"https://nbformat.readthedocs.io/en/latest/\" rel=\"nofollow\"\u003eJupyter\nnotebook\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ejats\u003c/code\u003e (\u003ca href=\"https://jats.nlm.nih.gov\" rel=\"nofollow\"\u003eJATS\u003c/a\u003e XML)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ejira\u003c/code\u003e\n(\u003ca href=\"https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all\" rel=\"nofollow\"\u003eJira\u003c/a\u003e/Confluence\nwiki markup)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ejson\u003c/code\u003e (JSON version of native AST)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003elatex\u003c/code\u003e (\u003ca href=\"https://www.latex-project.org/\" rel=\"nofollow\"\u003eLaTeX\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emarkdown\u003c/code\u003e…\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/jgm/pandoc\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAll the posts on the DEV community are written in markdown (even the comments), and it even has an API to fetch all of your posts. One thing led to the other and I ended up making a script for converting all of my published DEV posts to a presentation. Let us see how.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"installing-dependencies\" href=\"#installing-dependencies\"\u003e\n  \u003c/a\u003e\n  Installing Dependencies\n\u003c/h3\u003e\n\n\u003cp\u003eIf you are on a debian based system, run the following commands:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# markup conversion tool\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003epandoc\n\n\u003cspan class=\"c\"\u003e# installing latex tools\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003etexlive-latex-extra\n\n\u003cspan class=\"c\"\u003e# installing xelatex engine for handling unicode\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003etexlive-xetex\n\n\u003cspan class=\"c\"\u003e# installing JSON parser for bash\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ejq\n\n\u003cspan class=\"c\"\u003e# installing curl for sending requests\u003c/span\u003e\n\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003ecurl\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe following is a copy-friendly debian-based dependency installation command:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003epandoc texlive-latex-extra texlive-xetex jq curl\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"generating-the-dev-api-key\" href=\"#generating-the-dev-api-key\"\u003e\n  \u003c/a\u003e\n  Generating the DEV API Key\n\u003c/h3\u003e\n\n\u003cp\u003eDEV offers a \u003ca href=\"https://docs.dev.to/api/\"\u003ewell-documented application programming interface\u003c/a\u003e for common actions such as fetching posts and comments. You can create an API key by going into your account settings:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--y9Feo1S6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c5npwwq439ju55wyziqy.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--y9Feo1S6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c5npwwq439ju55wyziqy.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThis key will be used for fetching user-specific posts. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"using-pandoc\" href=\"#using-pandoc\"\u003e\n  \u003c/a\u003e\n  Using Pandoc\n\u003c/h3\u003e\n\n\u003cp\u003ePandoc is a really powerful markup conversion tool. I suggest you read its man page to know the full extent of its power. For the purpose of this blog, we will learn how to convert markdown to PDF presentation format (beamer LaTeX). \u003c/p\u003e\n\n\u003cp\u003eLet us create a markdown file called \u003ccode\u003etest.md\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight markdown\"\u003e\u003ccode\u003e\u003cspan class=\"nn\"\u003e---\u003c/span\u003e\n\u003cspan class=\"na\"\u003etitle\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003eMy Presentation\u003c/span\u003e\n\u003cspan class=\"na\"\u003eauthor\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003eAngad Sharma\u003c/span\u003e\n\u003cspan class=\"na\"\u003etheme\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"s\"\u003eAnnArbor\u003c/span\u003e\n\u003cspan class=\"nn\"\u003e---\u003c/span\u003e\n\n\u003cspan class=\"gh\"\u003e# This is a new slide\u003c/span\u003e\n\n\u003cspan class=\"gu\"\u003e## This is a heading\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\n*\u003c/span\u003e This is some text\n\u003cspan class=\"p\"\u003e*\u003c/span\u003e \u003cspan class=\"gs\"\u003e**This is some bold text**\u003c/span\u003e\n\u003cspan class=\"p\"\u003e*\u003c/span\u003e \u003cspan class=\"ge\"\u003e*This is some emphatic text*\u003c/span\u003e\n\n\u003cspan class=\"gh\"\u003e# This is another slide\u003c/span\u003e\n\n| This | Is | A | Table |\n|:----:|:--:|:-:|:-----:|\n| A | B | C | D | \n| E | F | G | H |\n\n\u003cspan class=\"gh\"\u003e# This is yet another slide\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e![\u003c/span\u003e\u003cspan class=\"nv\"\u003eThis is a photo\u003c/span\u003e\u003cspan class=\"p\"\u003e](\u003c/span\u003e\u003cspan class=\"sx\"\u003ehttps://dev-to-uploads.s3.amazonaws.com/i/q8twfrlpiboszsy4d5d6.jpg\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe data enclosed in the 3 dashes is the metadata of the document. It can be used to define details like the author and heading of the presentation, as well as the theme for the same. Take a look at the \u003ca href=\"http://deic.uab.es/~iblanes/beamer_gallery/index_by_theme.html\"\u003elist of beamer themes to look for the one you like\u003c/a\u003e. Now let us convert the markdown to a presentation:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003epandoc test.md \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e beamer \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e out.pdf \u003cspan class=\"nt\"\u003e--latex-engine\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003exelatex\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003e-t\u003c/code\u003e flag helps decide the format of the output. In this case we want a LaTeX-style presentation (beamer). The next flag, \u003ccode\u003e-o\u003c/code\u003e specifies the output file. \u003ccode\u003e--latex-engine\u003c/code\u003e flag decides which engine to use while parsing the document. In this case we are using xelatex because it handles unicode really well. Note that version 2.9.* uses \u003ccode\u003e--pdf-engine\u003c/code\u003e instead of \u003ccode\u003e--latex-engine\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow our out.pdf will look like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nF0QA3b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fbsztnfjqmv0vn1o2vpe.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nF0QA3b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fbsztnfjqmv0vn1o2vpe.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"672\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"converting-dev-posts-into-presentations\" href=\"#converting-dev-posts-into-presentations\"\u003e\n  \u003c/a\u003e\n  Converting DEV posts into presentations\n\u003c/h3\u003e\n\n\u003cp\u003eThe following lines of code fetch your articles from DEV and convert them into a beautiful LaTeX themed presentation:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ecurl \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"api-key: \u0026lt;YOUR_API_KEY\u0026gt;\"\u003c/span\u003e https://dev.to/api/articles/me/published | jq \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e \u003cspan class=\"s2\"\u003e\".[].body_markdown\"\u003c/span\u003e\n\npandoc posts.md \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e beamer \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e presentation.pdf \u003cspan class=\"nt\"\u003e--latex-engine\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003exelatex\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNow what did we do? We used the DEV API to fetch a JSON of all your published posts, which is an array. Each post in that array contains a property called \u003ccode\u003ebody_markdown\u003c/code\u003e, which contains the markdown of that particular post. We simply used the \u003ccode\u003ejq\u003c/code\u003e parser to go through each element in the array and fetch the body_markdown of the same. Then we piped the output to a file for the subsequent step.\u003c/p\u003e\n\n\u003cp\u003eWe used pandoc on the generated file, directing it to use the beamer format to output a PDF using the xelatex engine. Now the latter is necessary for rendering unicode characters in your markdown (so that all of your emojis show up). \u003c/p\u003e\n\n\u003cp\u003eQuick tip: To get your latest post, simply use the \u003ccode\u003eper_page\u003c/code\u003e attribute of the DEV API:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Note that an index can also be passed on the [] parameter\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# of \"jq\" to get a specific post\u003c/span\u003e\ncurl \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"api-key: \u0026lt;YOUR_API_KEY\u0026gt;\"\u003c/span\u003e https://dev.to/api/articles/me/published?per_page\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 | jq \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e \u003cspan class=\"s2\"\u003e\".[].body_markdown\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e latest.md\n\n\u003cspan class=\"c\"\u003e# verbose flag can be used to view additional info such as image fetch log\u003c/span\u003e\npandoc latest.md \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e beamer \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e latest.pdf \u003cspan class=\"nt\"\u003e--latex-engine\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003exelatex \u003cspan class=\"nt\"\u003e--verbose\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAs a sample, I have taken my blog on \u003ca href=\"https://dev.to/l04db4l4nc3r/bspwm-a-bare-bones-window-manager-44di\"\u003ebspwm\u003c/a\u003e and converted to a presentation: \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://drive.google.com/file/d/108wsEElpa9yqQCPNrWyomWGM7pMLO38b/view?usp=sharing\"\u003eClick here to view the presentation\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"limitations\" href=\"#limitations\"\u003e\n  \u003c/a\u003e\n  Limitations\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eLiquid links do not get converted in the presentation, including embedded gists, repositories and other posts. This is due to the fact that these are not markdown features, but DEV features instead. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePandoc collects all the photos in the markdown during runtime. In the case of a slow internet connection, it may timeout and completely ignore some photos. But this is in the case of a VERY slow internet connection.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"conclusion\" href=\"#conclusion\"\u003e\n  \u003c/a\u003e\n  Conclusion\n\u003c/h3\u003e\n\n\u003cp\u003eNeed to take a seminar or a webinar on a topic you have already written about? Generate a presentation from your markdown in minutes, with pandoc!\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "presentable-dev-posts-with-pandoc-56pc",
		"social_image": null,
		"title": "Presentable DEV posts with Pandoc",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-23T03:57:12.353Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2022-01-01T10:56:32.694Z",
		"published_at": "2020-04-24T10:55:26.533Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "## The What\n\nRecently, I was working on my competitive-coding skills to land a job. But like a developer I was pushing each and every program that I made to GitHub. I wanted a way to list down all the files I made in my README.md file in a readable format. \n\nThe **tree** command is a very useful utility to list out the hierarchy inside a project. My aim was to convert this hierarchial structure into a markdown list:\n\n*Before*: \n\n```\n.\n├── arrays\n│   ├── k-smallest-fastest.cpp\n│   ├── k-smallest-using-set.cpp\n│   └── rotate.cpp\n```\n\n*After*:\n\n```md\n* arrays\n   * k-smallest-fastest.cpp\n   * k-smallest-using-set.cpp\n   * rotate.cpp\n```\n\nTo see what we are going to make in detail, check this video out: \n\n{% youtube FY23ah7wukM %}\n\n---\n\n### The How\n\nWorking with the hierarchy that we have, we need to perform a series of find and replace operations to get our output. The only challenge is that our symbols `| |-- --` are not utf-8 encoded. Which means that we cannot type them using our standard keyboard. So to search for these tags, we need to copy paste them.\n\n![Flow](https://dev-to-uploads.s3.amazonaws.com/i/br8w2asvw4x1yduxebsc.png)\n\n---\n\n### Removing the left-most pipe\n\nNow let us perform our first operation: \n\n```vim\n:%s/│//\n```\n\nThis will search for all `│` (which are in the left side of the hierarchy) and delete them. Now to type this command, you can copy paste the `│` character from your file, or you can directly go into the vim command line with `│` in your cursor and press `Ctrl + r + \"` to paste it there, which is a more intuitive way of approaching the problem. We get this as our output:\n\n```\n.\n|── arrays\n   ├── k-smallest-fastest.cpp\n   ├── k-smallest-using-set.cpp\n   └── rotate.cpp\n```\n\n---\n\n### Replacing the sub-element pipe with a star\n\nTo convert our hierarchy to a list, every sub-element needs to remain in the same position and have a * next to it. This can be achieved by replacing the `├──` character by a `*`:\n\n```vim\n:%s/├──/*/\n```\n\nOur output now look like this:\n\n```\n.\n* arrays\n   * k-smallest-fastest.cpp\n   * k-smallest-using-set.cpp\n   └── rotate.cpp\n```\n\n---\n\n### Replacing the last sub-element pipe with a star\n\nNotice that the last sub-element still has the pipe character in front of it. It can be replaced by the following and subsequent output is given below:\n\n```vim\n:%s/└──/*/\n```\n\n```\n.\n* arrays\n   * k-smallest-fastest.cpp\n   * k-smallest-using-set.cpp\n   * rotate.cpp\n```\n\nAre we done? Not quite. If you look at the produced output in a markdown previewer, you will notice that it does not render properly. Why?\n\nThat is because there are hidden unicode characters in this file which we need to replace by a space character. To show all whitespaces, you can run the following commands:\n\n```vim\n:set listchars=eol:$,tab:\u003e-,trail:~,extends:\u003e,precedes:\u003c,space:␣\n:set list\n\n\" to see unicode characters in the statusline\n:set statusline=%b\\ %B\n```\n\nThis will yield the following output:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/crzmw3jczm7wfhopbse0.png)\n\nNotice that in the statusline we can view the invisible character as `A0`. We need to replace it by space, which can be easily done by:\n\n```vim\n:%s/\\%u00a0/ /g\n```\n\nAnd voila, we have our output!\n\n---\n\n### Combining everything\n\nIn vim, the pipe (|) character can be used to pipe multiple find and replace commands. So everything we did here can be condensed to the following command:\n\n```vim\n:%s/│//|%s/├──/*/|%s/└──/*/|%s/\\%u00a0/ /g\n```\n\n---\n\n### What lies ahead\n\nI have made a plugin called [treemd](https://l04db4l4nc3r.github.io/treemd.vim/) which maps some very easy keybindings for converting your tree buffer to a markdown list. There is a bonus keybinding for running the tree command with a specified depth, in the current directory and using it as a markdown list:\n\n{% github L04DB4L4NC3R/treemd.vim %}",
		"cached_tag_list": "vim, tutorial, todayilearned, productivity",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 1,
		"description": "The What   Recently, I was working on my competitive-coding skills to land a job. But like a...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/qd1hybdwsjbuob5raxq6.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-tree-to-markdown-57oc",
		"public_reactions_count": 9,
		"processed_html": "\u003ch2\u003e\n  \u003ca name=\"the-what\" href=\"#the-what\"\u003e\n  \u003c/a\u003e\n  The What\n\u003c/h2\u003e\n\n\u003cp\u003eRecently, I was working on my competitive-coding skills to land a job. But like a developer I was pushing each and every program that I made to GitHub. I wanted a way to list down all the files I made in my README.md file in a readable format. \u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003etree\u003c/strong\u003e command is a very useful utility to list out the hierarchy inside a project. My aim was to convert this hierarchial structure into a markdown list:\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eBefore\u003c/em\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e.\n├── arrays\n│   ├── k-smallest-fastest.cpp\n│   ├── k-smallest-using-set.cpp\n│   └── rotate.cpp\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003e\u003cem\u003eAfter\u003c/em\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight markdown\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e*\u003c/span\u003e arrays\n\u003cspan class=\"p\"\u003e   *\u003c/span\u003e k-smallest-fastest.cpp\n\u003cspan class=\"p\"\u003e   *\u003c/span\u003e k-smallest-using-set.cpp\n\u003cspan class=\"p\"\u003e   *\u003c/span\u003e rotate.cpp\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eTo see what we are going to make in detail, check this video out: \u003c/p\u003e\n\n\u003cp\u003e\u003ciframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/FY23ah7wukM\" allowfullscreen loading=\"lazy\"\u003e\n\u003c/iframe\u003e\n\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"the-how\" href=\"#the-how\"\u003e\n  \u003c/a\u003e\n  The How\n\u003c/h3\u003e\n\n\u003cp\u003eWorking with the hierarchy that we have, we need to perform a series of find and replace operations to get our output. The only challenge is that our symbols \u003ccode\u003e| |-- --\u003c/code\u003e are not utf-8 encoded. Which means that we cannot type them using our standard keyboard. So to search for these tags, we need to copy paste them.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--20d_W1dW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/br8w2asvw4x1yduxebsc.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--20d_W1dW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/br8w2asvw4x1yduxebsc.png\" alt=\"Flow\" loading=\"lazy\" width=\"731\" height=\"101\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"removing-the-leftmost-pipe\" href=\"#removing-the-leftmost-pipe\"\u003e\n  \u003c/a\u003e\n  Removing the left-most pipe\n\u003c/h3\u003e\n\n\u003cp\u003eNow let us perform our first operation:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e%s\u003cspan class=\"sr\"\u003e/│/\u003c/span\u003e/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThis will search for all \u003ccode\u003e│\u003c/code\u003e (which are in the left side of the hierarchy) and delete them. Now to type this command, you can copy paste the \u003ccode\u003e│\u003c/code\u003e character from your file, or you can directly go into the vim command line with \u003ccode\u003e│\u003c/code\u003e in your cursor and press \u003ccode\u003eCtrl + r + \"\u003c/code\u003e to paste it there, which is a more intuitive way of approaching the problem. We get this as our output:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e.\n|── arrays\n   ├── k-smallest-fastest.cpp\n   ├── k-smallest-using-set.cpp\n   └── rotate.cpp\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"replacing-the-subelement-pipe-with-a-star\" href=\"#replacing-the-subelement-pipe-with-a-star\"\u003e\n  \u003c/a\u003e\n  Replacing the sub-element pipe with a star\n\u003c/h3\u003e\n\n\u003cp\u003eTo convert our hierarchy to a list, every sub-element needs to remain in the same position and have a * next to it. This can be achieved by replacing the \u003ccode\u003e├──\u003c/code\u003e character by a \u003ccode\u003e*\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e%s\u003cspan class=\"sr\"\u003e/├──/\u003c/span\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eOur output now look like this:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e.\n* arrays\n   * k-smallest-fastest.cpp\n   * k-smallest-using-set.cpp\n   └── rotate.cpp\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"replacing-the-last-subelement-pipe-with-a-star\" href=\"#replacing-the-last-subelement-pipe-with-a-star\"\u003e\n  \u003c/a\u003e\n  Replacing the last sub-element pipe with a star\n\u003c/h3\u003e\n\n\u003cp\u003eNotice that the last sub-element still has the pipe character in front of it. It can be replaced by the following and subsequent output is given below:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e%s\u003cspan class=\"sr\"\u003e/└──/\u003c/span\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e.\n* arrays\n   * k-smallest-fastest.cpp\n   * k-smallest-using-set.cpp\n   * rotate.cpp\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAre we done? Not quite. If you look at the produced output in a markdown previewer, you will notice that it does not render properly. Why?\u003c/p\u003e\n\n\u003cp\u003eThat is because there are hidden unicode characters in this file which we need to replace by a space character. To show all whitespaces, you can run the following commands:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e \u003cspan class=\"nb\"\u003elistchars\u003c/span\u003e\u003cspan class=\"p\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003eeol\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e$\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"k\"\u003etab\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u0026gt;-,\u003c/span\u003etrail\u003cspan class=\"p\"\u003e:~,\u003c/span\u003eextends\u003cspan class=\"p\"\u003e:\u0026gt;,\u003c/span\u003eprecedes\u003cspan class=\"p\"\u003e:\u0026lt;,\u003c/span\u003espace\u003cspan class=\"p\"\u003e:\u003c/span\u003e␣\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e \u003cspan class=\"k\"\u003elist\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e\" to see unicode characters in the statusline\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e \u003cspan class=\"nb\"\u003estatusline\u003c/span\u003e\u003cspan class=\"p\"\u003e=\u003c/span\u003e%\u003cspan class=\"k\"\u003eb\u003c/span\u003e\\ %B\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThis will yield the following output:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cYlgSmfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/crzmw3jczm7wfhopbse0.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cYlgSmfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/crzmw3jczm7wfhopbse0.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"596\" height=\"312\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNotice that in the statusline we can view the invisible character as \u003ccode\u003eA0\u003c/code\u003e. We need to replace it by space, which can be easily done by:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e%s\u003cspan class=\"sr\"\u003e/\\%u00a0/\u003c/span\u003e /\u003cspan class=\"k\"\u003eg\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAnd voila, we have our output!\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"combining-everything\" href=\"#combining-everything\"\u003e\n  \u003c/a\u003e\n  Combining everything\n\u003c/h3\u003e\n\n\u003cp\u003eIn vim, the pipe (|) character can be used to pipe multiple find and replace commands. So everything we did here can be condensed to the following command:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e%s\u003cspan class=\"sr\"\u003e/│//|%s/\u003c/span\u003e├──\u003cspan class=\"sr\"\u003e/*/\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e%s\u003cspan class=\"sr\"\u003e/└──/\u003c/span\u003e*\u003cspan class=\"sr\"\u003e/|%s/\u003c/span\u003e\\%u00a0\u003cspan class=\"sr\"\u003e/ /\u003c/span\u003e\u003cspan class=\"k\"\u003eg\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"what-lies-ahead\" href=\"#what-lies-ahead\"\u003e\n  \u003c/a\u003e\n  What lies ahead\n\u003c/h3\u003e\n\n\u003cp\u003eI have made a plugin called \u003ca href=\"https://l04db4l4nc3r.github.io/treemd.vim/\"\u003etreemd\u003c/a\u003e which maps some very easy keybindings for converting your tree buffer to a markdown list. There is a bonus keybinding for running the tree command with a specified depth, in the current directory and using it as a markdown list:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/L04DB4L4NC3R\"\u003e\n        L04DB4L4NC3R\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/L04DB4L4NC3R/treemd.vim\"\u003e\n        treemd.vim\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A simple vim plugin to convert the output of tree command to a markdown list\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\ntreemd.vim\u003c/h1\u003e\n\u003cp dir=\"auto\"\u003eA simple vim plugin to convert the output of tree command to a markdown list\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nInstallation\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eIf using pathogen, simply run the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-shell notranslate position-relative overflow-auto js-code-highlight\" data-snippet-clipboard-copy-content=\"git clone https://github.com/L04DB4L4NC3R/treemd.vim.git ~/.vim/bundle/treemd.vim\"\u003e\n\u003cpre\u003egit clone https://github.com/L04DB4L4NC3R/treemd.vim.git \u003cspan class=\"pl-k\"\u003e~\u003c/span\u003e/.vim/bundle/treemd.vim\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/30529572/80057293-ce612f00-8543-11ea-9255-095c83112fd4.gif\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--p-5R4sZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/30529572/80057293-ce612f00-8543-11ea-9255-095c83112fd4.gif\" alt=\"demo\" data-animated-image=\"\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nKeybindings\u003c/h2\u003e\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"center\"\u003eMode\u003c/th\u003e\n\u003cth align=\"center\"\u003eMapping\u003c/th\u003e\n\u003cth align=\"center\"\u003eAction\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003eNormal\u003c/td\u003e\n\u003ctd align=\"center\"\u003etmd\u003c/td\u003e\n\u003ctd align=\"center\"\u003eConvert to markdown\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003eNormal\u003c/td\u003e\n\u003ctd align=\"center\"\u003e[num]tmt\u003c/td\u003e\n\u003ctd align=\"center\"\u003eRun tree command with depth = num, in the current dir and convert to markdown\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\u003c/article\u003e\u003c/div\u003e\n\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/L04DB4L4NC3R/treemd.vim\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-tree-to-markdown-57oc",
		"social_image": null,
		"title": "Vim to the rescue: Tree to Markdown",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-23T04:06:48.205Z",
		"crossposted_at": null,
		"edited_at": "2020-04-24T10:25:53.692Z",
		"last_comment_at": "2020-04-23T04:16:24.518Z",
		"published_at": "2020-04-23T04:16:24.518Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "\n\u003cimg src=\"https://dev-to-uploads.s3.amazonaws.com/i/emm29sdlf03xxvadfxq6.png\" width=40% /\u003e\n\n\n\u003e Productivity is measured not just in terms of how fast you can get a task done, but how efficiently can you take it to completion. \n\nVim is a text editor focused at keeping you away from the mouse. I started using vim a while back. Here is a reference to [my experience with vim](https://medium.com/gdg-vit/editor-almighty-79807100f10c). \n\nNo matter how much you \"think\" you know vim, it always has a tendency to surprise you. That is why I decided to do a series called **Vim to the rescue**, where I take some day-to-day text editing / programming redundancy problems that can be solved using vim. This series is not meant to get you started with vim, but to give you an idea of how powerful vim can be and how it can be used to solve very practical problems. \n\nTo start off with, here is a link to my dotfiles. The following repository contains my vim configuration and some of the awesome plugins that I use. I am sure this repo will help you, one way or the other :)\n\n{% github L04DB4L4NC3R/DEC %}\n\nNow if you do want to get started with vim, the following are some resources which I used:\n\n* [Vimtutor](http://www2.geog.ucl.ac.uk/~plewis/teaching/unix/vimtutor)\n* [Vim cheat sheet](https://devhints.io/vim)\n* [Let vim do the typing](https://www.youtube.com/watch?v=3TX3kV3TICU\u0026t=70s)\n* [Learn vimscript the hard way](https://learnvimscriptthehardway.stevelosh.com/)\n* [How to Do 90% of What Plugins Do (With Just Vim)](https://www.youtube.com/watch?v=XA2WjJbmmoM\u0026t=1728s)\n* [Vim Macros](https://sanctum.geek.nz/arabesque/advanced-vim-macros/)\n\nLet me know some of the problems you might have faced in the past and how vim made it easy. ",
		"cached_tag_list": "vim, tutorial, productivity, discuss",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Productivity is measured not just in terms of how fast you can get a task done, but how efficientl...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/1xwjr9bdfm16y7b3qx0v.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-prologue-1o05",
		"public_reactions_count": 27,
		"processed_html": "\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FEAQJ9Xr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/emm29sdlf03xxvadfxq6.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FEAQJ9Xr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/emm29sdlf03xxvadfxq6.png\" loading=\"lazy\" width=\"880\" height=\"884\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eProductivity is measured not just in terms of how fast you can get a task done, but how efficiently can you take it to completion. \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eVim is a text editor focused at keeping you away from the mouse. I started using vim a while back. Here is a reference to \u003ca href=\"https://medium.com/gdg-vit/editor-almighty-79807100f10c\"\u003emy experience with vim\u003c/a\u003e. \u003c/p\u003e\n\n\u003cp\u003eNo matter how much you \"think\" you know vim, it always has a tendency to surprise you. That is why I decided to do a series called \u003cstrong\u003eVim to the rescue\u003c/strong\u003e, where I take some day-to-day text editing / programming redundancy problems that can be solved using vim. This series is not meant to get you started with vim, but to give you an idea of how powerful vim can be and how it can be used to solve very practical problems. \u003c/p\u003e\n\n\u003cp\u003eTo start off with, here is a link to my dotfiles. The following repository contains my vim configuration and some of the awesome plugins that I use. I am sure this repo will help you, one way or the other :)\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/L04DB4L4NC3R\"\u003e\n        L04DB4L4NC3R\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/L04DB4L4NC3R/DEC\"\u003e\n        DEC\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      Development Environment Config. Work faster than ever with my dotfiles\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp align=\"center\" dir=\"auto\"\u003e\n    \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/30529572/60157440-60a58300-980c-11e9-8ec6-020be154b566.gif\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JJdmS5k4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/30529572/60157440-60a58300-980c-11e9-8ec6-020be154b566.gif\" width=\"150px\" data-animated-image=\"\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\n\u003ch1 align=\"center\" dir=\"auto\"\u003e\nDev Environment Config\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eWhen somebody begins a sentence with “IT WOULD BE NICE IF..” the right thing to do is to wait politely for the speaker to finish. No project ever gets around to the it-would-be-nice features: or if they do, they regret it. Wait for sentences that begin “WE HAVE TO..” and pay close attention, and see if you agree. \u003cstrong\u003e- Tom Van Vleck\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eAre you a programmer? Do you wanna spend more time thinking and solving problems rather than writing biolerplate code again and again? Are you sick of bad navigation? Well this is the solution for you!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003ch3 dir=\"auto\"\u003e\nDev environment tools\u003c/h3\u003e\n\n\u003cul class=\"contains-task-list\"\u003e\n\u003cli class=\"task-list-item\"\u003e\n \u003ccode\u003ezsh\u003c/code\u003e shell + plugins\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\n \u003ccode\u003eterminator\u003c/code\u003e tiling manager\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\n \u003ccode\u003evim\u003c/code\u003e editor + plugins\u003c/li\u003e\n\u003cli class=\"task-list-item\"\u003e\n \u003ccode\u003eranger\u003c/code\u003e file manager\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 dir=\"auto\"\u003e\nReferences\u003c/h3\u003e\n\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh.git\"\u003eOh my zsh\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.systutorials.com/docs/linux/man/5-terminator_config/\" rel=\"nofollow\"\u003eterminator config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\"\u003ezsh plugins\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\"\u003eshell themes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/30529572/83451951-5130b000-a447-11ea-9aad-d8686aeedee4.png\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2ikHVUOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/30529572/83451951-5130b000-a447-11ea-9aad-d8686aeedee4.png\" alt=\"ss\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch3 dir=\"auto\"\u003e\nVim plugins included\u003c/h3\u003e\n\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/fatih/vim-go.git\"\u003evim-go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kien/ctrlp.vim.git\"\u003ectrlp.vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vim-airline/vim-airline.git\"\u003eairline\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mattn/emmet-vim.git\"\u003eemmet-vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tpope/vim-fugitive.git\"\u003evim-fugitive\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/scrooloose/nerdtree.git\"\u003enerdtree\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/terryma/vim-multiple-cursors.git\"\u003evim-multiple-cursors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ycm-core/YouCompleteMe.git\"\u003eYouCompleteMe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/stephpy/vim-yaml.git\"\u003evim-yaml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/itchyny/lightline.vim.git\"\u003elightline.vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tpope/vim-pathogen.git\"\u003epathogen\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 dir=\"auto\"\u003e\nZsh plugins included\u003c/h3\u003e\n\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/zsh-users/zsh-autosuggestions\"\u003ezsh-autosuggestions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003egit\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 dir=\"auto\"\u003e\n\u003cbr\u003e\nRecommended keyboard shortcuts for\u003c/h3\u003e…\u003c/article\u003e\u003c/div\u003e\n\u003cbr\u003e\n  \u003c/div\u003e\n\u003cbr\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/L04DB4L4NC3R/DEC\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003cbr\u003e\n\u003c/div\u003e\n\u003cbr\u003e\n\n\n\u003cp\u003eNow if you do want to get started with vim, the following are some resources which I used:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www2.geog.ucl.ac.uk/~plewis/teaching/unix/vimtutor\"\u003eVimtutor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://devhints.io/vim\"\u003eVim cheat sheet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=3TX3kV3TICU\u0026amp;t=70s\"\u003eLet vim do the typing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://learnvimscriptthehardway.stevelosh.com/\"\u003eLearn vimscript the hard way\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=XA2WjJbmmoM\u0026amp;t=1728s\"\u003eHow to Do 90% of What Plugins Do (With Just Vim)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://sanctum.geek.nz/arabesque/advanced-vim-macros/\"\u003eVim Macros\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet me know some of the problems you might have faced in the past and how vim made it easy. \u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-prologue-1o05",
		"social_image": null,
		"title": "Vim to the rescue: Prologue",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-23T06:50:59.274Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-04-27T14:53:17.097Z",
		"published_at": "2020-04-26T09:20:41.388Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "## The What\n\nA month ago I was working on a script for sending bulk emails to the participants of an event. The plan was to load a JSON file with a list of emails and generate usernames for sending people a greeting email. But the file that was provided to me looked something like this (the emails have been changed of course):\n\n```\nabc@xyz.com\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n```\n\nThe format required for the script to work was JSON, with email and username as keys. The usernames were supposed to be generated from the string preceding the '@' symbol in the email. For example: the username for `abc@xyz` will be `abc`.\n\n*Expected output*: \n\n```json\n[\n  {\n    \"email\": \"abc@xyz.com\",\n    \"username\": \"abc\"\n  },\n  {\n    \"email\": \"def@uvw.com\",\n    \"username\": \"def\"\n  },\n  {\n    \"email\": \"ghi@rst.com\",\n    \"username\": \"ghi\"\n  },\n  {\n    \"email\": \"jkl@opq.com\",\n    \"username\": \"jkl\"\n  },\n  {\n    \"email\": \"mno@lmn.com\",\n    \"username\": \"mno\"\n  }\n]\n```\n\n---\n\n## The How\n\nVim has a feature called `macros`, which are essentially an array of subsequent functions that can be recorded and replayed at will. This task was repetitive. To do it by hand would have consumed a lot of time, since the list emails contained about 5,000 entries! Vim simplified the flow:\n\n![Flow](https://dev-to-uploads.s3.amazonaws.com/i/g2xq9kc3fgda8mz3qmt8.png)\n\n---\n\n### Recording a Macro in Vim\n\nIn vim, a macro can be bound to a key, and can be recorded by pressing the **q** button. For example: **q + a** will record a macro in the key **a**. Now whatever functions you perform are being tracked. To stop recording, simply press **q** again.\n\nThis macro can now be played using `@a`. To run it 5000 times just input:\n\n```vim\n5000@a\n```\n\n---\n\n### Recording a macro for our purpose\n\nBefore recording our macro, enclose the file in square brackets (for making an array):\n\n```\n[\n{CURSOR_HERE}\nabc@xyz.com\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n```\n\nPress `q + a` to start recording. Then input `{ \"email\": \"`:\n\n```\n[\n{\n\"email: \"{CURSOR_HERE}abc@xyz.com\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n```\n\nYank (copy) till the `@` symbol by typing: `y + f + @`. Then append '\",' to the end of the line using: `A + \",`:\n\n```\n[\n{\n\"email: \"abc@xyz.com\",\n{CURSOR_HERE}\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n```\n\nNow for adding our username, type `{\"username\": \"\"},` and come back between the quotes:\n\n```\n[\n{\n\"email: \"abc@xyz.com\",\n\"username\": \"{CURSOR_HERE}\" },\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n```\n\nRemember we yanked the email (till @) earlier? Paste it by pressing **p** and remove the @ symbol using **x**. \n\n```\n[\n{\n\"email: \"abc@xyz.com\",\n\"username\": \"abc\" },\n{CURSOR_HERE}\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n```\n\nYou can stop recording the macro now using **q**.\n\nNow that we have made our JSON for the first email, we don't have to do anything else. Simply rerun the macro 5,000 times to format all the emails just like you formatted the first one to get this output:\n\n```json\n[\n  {\n    \"email\": \"abc@xyz.com\",\n    \"username\": \"abc\"\n  },\n  {\n    \"email\": \"def@uvw.com\",\n    \"username\": \"def\"\n  },\n  {\n    \"email\": \"ghi@rst.com\",\n    \"username\": \"ghi\"\n  },\n  {\n    \"email\": \"jkl@opq.com\",\n    \"username\": \"jkl\"\n  },\n  {\n    \"email\": \"mno@lmn.com\",\n    \"username\": \"mno\"\n  }\n]\n```\n\nDon't know how many emails there are? Just enter a huge number for a macro to repeat, when it can't find the next line, it'll exit automatically. \n\nHere is a recording of the same:\n\n{% youtube FU8X60HZhSQ %}\n\n---\n\n### Fun facts about vim macros and registers\n\n* You can create 26 macros, one for each letter of the alphabet.\n* Each macro is stored in a register and can be accessed using the **\"** symbol.\n* To get the keystrokes of a macro 'a' in our current buffer, you can press: **\" + a + p**, where '\"' is the macro selector, 'a' is the register and 'p' specifies paste action.\n* There are some default registers in vim:\n  * Whenever you delete something, it is pasted in the '\"' register (can be accessed by **\"\"**)\n  * Yanked text can be accessed using **\"0** to **\"9** registers, from latest to oldest.\n  * **\".** is a readonly register which stores the last inserted text\n  * **\"%** is a readonly register which stores the current file path\n  * **\"#** is a readonly register which stores the name of the last edited file\n  * **\":** is a readonly register which stores the last executed command",
		"cached_tag_list": "vim, tutorial, todayilearned, productivity",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 2,
		"description": "The What   A month ago I was working on a script for sending bulk emails to the participants...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--5AnLp9lv--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/r7lfku98sagh61j9vfl5.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-repetition-made-easy-a8c",
		"public_reactions_count": 12,
		"processed_html": "\u003ch2\u003e\n  \u003ca name=\"the-what\" href=\"#the-what\"\u003e\n  \u003c/a\u003e\n  The What\n\u003c/h2\u003e\n\n\u003cp\u003eA month ago I was working on a script for sending bulk emails to the participants of an event. The plan was to load a JSON file with a list of emails and generate usernames for sending people a greeting email. But the file that was provided to me looked something like this (the emails have been changed of course):\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eabc@xyz.com\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe format required for the script to work was JSON, with email and username as keys. The usernames were supposed to be generated from the string preceding the '@' symbol in the email. For example: the username for \u003ccode\u003eabc@xyz\u003c/code\u003e will be \u003ccode\u003eabc\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eExpected output\u003c/em\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"abc@xyz.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"abc\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"def@uvw.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"def\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"ghi@rst.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"ghi\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"jkl@opq.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"jkl\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"mno@lmn.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"mno\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"the-how\" href=\"#the-how\"\u003e\n  \u003c/a\u003e\n  The How\n\u003c/h2\u003e\n\n\u003cp\u003eVim has a feature called \u003ccode\u003emacros\u003c/code\u003e, which are essentially an array of subsequent functions that can be recorded and replayed at will. This task was repetitive. To do it by hand would have consumed a lot of time, since the list emails contained about 5,000 entries! Vim simplified the flow:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--x5qiVc_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2xq9kc3fgda8mz3qmt8.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--x5qiVc_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2xq9kc3fgda8mz3qmt8.png\" alt=\"Flow\" loading=\"lazy\" width=\"581\" height=\"301\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"recording-a-macro-in-vim\" href=\"#recording-a-macro-in-vim\"\u003e\n  \u003c/a\u003e\n  Recording a Macro in Vim\n\u003c/h3\u003e\n\n\u003cp\u003eIn vim, a macro can be bound to a key, and can be recorded by pressing the \u003cstrong\u003eq\u003c/strong\u003e button. For example: \u003cstrong\u003eq + a\u003c/strong\u003e will record a macro in the key \u003cstrong\u003ea\u003c/strong\u003e. Now whatever functions you perform are being tracked. To stop recording, simply press \u003cstrong\u003eq\u003c/strong\u003e again.\u003c/p\u003e\n\n\u003cp\u003eThis macro can now be played using \u003ccode\u003e@a\u003c/code\u003e. To run it 5000 times just input:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"m\"\u003e5000\u003c/span\u003e@\u003cspan class=\"k\"\u003ea\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"recording-a-macro-for-our-purpose\" href=\"#recording-a-macro-for-our-purpose\"\u003e\n  \u003c/a\u003e\n  Recording a macro for our purpose\n\u003c/h3\u003e\n\n\u003cp\u003eBefore recording our macro, enclose the file in square brackets (for making an array):\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[\n{CURSOR_HERE}\nabc@xyz.com\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003ePress \u003ccode\u003eq + a\u003c/code\u003e to start recording. Then input \u003ccode\u003e{ \"email\": \"\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[\n{\n\"email: \"{CURSOR_HERE}abc@xyz.com\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYank (copy) till the \u003ccode\u003e@\u003c/code\u003e symbol by typing: \u003ccode\u003ey + f + @\u003c/code\u003e. Then append '\",' to the end of the line using: \u003ccode\u003eA + \",\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[\n{\n\"email: \"abc@xyz.com\",\n{CURSOR_HERE}\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNow for adding our username, type \u003ccode\u003e{\"username\": \"\"},\u003c/code\u003e and come back between the quotes:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[\n{\n\"email: \"abc@xyz.com\",\n\"username\": \"{CURSOR_HERE}\" },\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eRemember we yanked the email (till @) earlier? Paste it by pressing \u003cstrong\u003ep\u003c/strong\u003e and remove the @ symbol using \u003cstrong\u003ex\u003c/strong\u003e.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[\n{\n\"email: \"abc@xyz.com\",\n\"username\": \"abc\" },\n{CURSOR_HERE}\ndef@uvw.com\nghi@rst.com\njkl@opq.com\nmno@lmn.com\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYou can stop recording the macro now using \u003cstrong\u003eq\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow that we have made our JSON for the first email, we don't have to do anything else. Simply rerun the macro 5,000 times to format all the emails just like you formatted the first one to get this output:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"abc@xyz.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"abc\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"def@uvw.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"def\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"ghi@rst.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"ghi\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"jkl@opq.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"jkl\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"email\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"mno@lmn.com\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\"username\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"mno\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eDon't know how many emails there are? Just enter a huge number for a macro to repeat, when it can't find the next line, it'll exit automatically. \u003c/p\u003e\n\n\u003cp\u003eHere is a recording of the same:\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/FU8X60HZhSQ\" allowfullscreen loading=\"lazy\"\u003e\n\u003c/iframe\u003e\n\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"fun-facts-about-vim-macros-and-registers\" href=\"#fun-facts-about-vim-macros-and-registers\"\u003e\n  \u003c/a\u003e\n  Fun facts about vim macros and registers\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou can create 26 macros, one for each letter of the alphabet.\u003c/li\u003e\n\u003cli\u003eEach macro is stored in a register and can be accessed using the \u003cstrong\u003e\"\u003c/strong\u003e symbol.\u003c/li\u003e\n\u003cli\u003eTo get the keystrokes of a macro 'a' in our current buffer, you can press: \u003cstrong\u003e\" + a + p\u003c/strong\u003e, where '\"' is the macro selector, 'a' is the register and 'p' specifies paste action.\u003c/li\u003e\n\u003cli\u003eThere are some default registers in vim:\n\n\u003cul\u003e\n\u003cli\u003eWhenever you delete something, it is pasted in the '\"' register (can be accessed by \u003cstrong\u003e\"\"\u003c/strong\u003e)\u003c/li\u003e\n\u003cli\u003eYanked text can be accessed using \u003cstrong\u003e\"0\u003c/strong\u003e to \u003cstrong\u003e\"9\u003c/strong\u003e registers, from latest to oldest.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\".\u003c/strong\u003e is a readonly register which stores the last inserted text\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\"%\u003c/strong\u003e is a readonly register which stores the current file path\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\"#\u003c/strong\u003e is a readonly register which stores the name of the last edited file\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\":\u003c/strong\u003e is a readonly register which stores the last executed command\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-repetition-made-easy-a8c",
		"social_image": null,
		"title": "Vim to the rescue: Repetition Made Easy",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-24T11:10:17.918Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-04-29T01:47:36.403Z",
		"published_at": "2020-04-27T08:01:42.371Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "# The What\n\nHave you ever heard of the **top** command in linux. Yes, the one that lists out currently running processes with a lot of other meta information about usage. A typical top command output, when piped to a file, looks like this:\n\n```\n\u001b[?1h\u001b=\u001b[?25l\u001b[H\u001b[2J\u001b(B\u001b[mtop - 16:44:50 up 1 day,  7:51,  1 user,  load average: 0.30, 0.38, 0.39\u001b(B\u001b[m\u001b[39;49m\u001b(B\u001b[m\u001b[39;49m\u001b[K\nTasks:\u001b(B\u001b[m\u001b[39;49m\u001b[1m 384 \u001b(B\u001b[m\u001b[39;49mtotal,\u001b(B\u001b[m\u001b[39;49m\u001b[1m   1 \u001b(B\u001b[m\u001b[39;49mrunning,\u001b(B\u001b[m\u001b[39;49m\u001b[1m 289 \u001b(B\u001b[m\u001b[39;49msleeping,\u001b(B\u001b[m\u001b[39;49m\u001b[1m   0 \u001b(B\u001b[m\u001b[39;49mstopped,\u001b(B\u001b[m\u001b[39;49m\u001b[1m   0 \u001b(B\u001b[m\u001b[39;49mzombie\u001b(B\u001b[m\u001b[39;49m\u001b(B\u001b[m\u001b[39;49m\u001b[K\n%Cpu(s):\u001b(B\u001b[m\u001b[39;49m\u001b[1m 10.2 \u001b(B\u001b[m\u001b[39;49mus,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  3.4 \u001b(B\u001b[m\u001b[39;49msy,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  0.2 \u001b(B\u001b[m\u001b[39;49mni,\u001b(B\u001b[m\u001b[39;49m\u001b[1m 85.7 \u001b(B\u001b[m\u001b[39;49mid,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  0.3 \u001b(B\u001b[m\u001b[39;49mwa,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  0.0 \u001b(B\u001b[m\u001b[39;49mhi,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  0.1 \u001b(B\u001b[m\u001b[39;49msi,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  0.0 \u001b(B\u001b[m\u001b[39;49mst\u001b(B\u001b[m\u001b[39;49m\u001b(B\u001b[m\u001b[39;49m\u001b[K\nKiB Mem :\u001b(B\u001b[m\u001b[39;49m\u001b[1m 16262016 \u001b(B\u001b[m\u001b[39;49mtotal,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  7029368 \u001b(B\u001b[m\u001b[39;49mfree,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  2042444 \u001b(B\u001b[m\u001b[39;49mused,\u001b(B\u001b[m\u001b[39;49m\u001b[1m  7190204 \u001b(B\u001b[m\u001b[39;49mbuff/cache\u001b(B\u001b[m\u001b[39;49m\u001b(B\u001b[m\u001b[39;49m\u001b[K\nKiB Swap:\u001b(B\u001b[m\u001b[39;49m\u001b[1m        0 \u001b(B\u001b[m\u001b[39;49mtotal,\u001b(B\u001b[m\u001b[39;49m\u001b[1m        0 \u001b(B\u001b[m\u001b[39;49mfree,\u001b(B\u001b[m\u001b[39;49m\u001b[1m        0 \u001b(B\u001b[m\u001b[39;49mused.\u001b(B\u001b[m\u001b[39;49m\u001b[1m 13593976 \u001b(B\u001b[m\u001b[39;49mavail Mem \u001b(B\u001b[m\u001b[39;49m\u001b(B\u001b[m\u001b[39;49m\u001b[K\n\u001b[K\n\u001b[7m  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                  \u001b(B\u001b[m\u001b[39;49m\u001b[K\n\u001b(B\u001b[m 1527 root      20   0    4552    784    724 S   6.2  0.0   0:07.06 acpid                                                                                                    \u001b(B\u001b[m\u001b[39;49m\u001b[K\n\u001b(B\u001b[m 1985 redis     20   0   51444   3632   2564 S   6.2  0.0   0:33.44 redis-server                                                                                             \u001b(B\u001b[m\u001b[39;49m\u001b[K\n\u001b(B\u001b[m 3336 angad     20   0  533196  95444  71856 S   6.2  0.6  14:36.86 Xorg                                                                                                     \u001b(B\u001b[m\u001b[39;49m\u001b[K\n\u001b(B\u001b[m\u001b[1m 4084 angad     20   0   57972   4380   3508 R   6.2  0.0   0:00.02 top                                                                                                      \u001b(B\u001b[m\u001b[39;49m\u001b[K\n\u001b(B\u001b[m 4729 angad     20   0  863236 195212 119392 S   6.2  1.2   3:44.26 chrome     \nTLDR;\n```\n\nWhoa! A lot of information being thrown here, but not exactly human readable. Sometimes when I am using a tool in linux, I often spin up the *OG* top command to look at how much the tool is using my memory as compared to other processes. I want a clear readable format which I can use to view the result of the top command so that I can embed it wherever I like, be it a blog or an issue. Basically I want something like this:\n\n---\n\n* top - 00:26:50 up 15:33\n\t*  1 user\n\t*  load average: 0.34\n\t* 0.69\n\t* 0.84\n* Tasks: 370 total\n\t*   1 running\n\t* 279 sleeping\n\t*   0 stopped\n\t*   0 zombie\n* %Cpu(s):  5.2 us\n\t*  1.5 sy\n\t*  0.1 ni\n\t* 92.3 id\n\t*  0.8 wa\n\t*  0.0 hi\n\t*  0.1 si\n\t*  0.0 st\n* KiB Mem : 16262016 total\n\t*  9118020 free\n\t*  1652820 used\n\t*  5491176 buff/cache\n* KiB Swap:\n\t* 0 total\n\t* 0 free\n\t* 0 used. 14034404 avail Mem \n\n|PID|USER|PR|NI|VIRT|RES|SHR|S|%CPU|%MEM|TIME+|COMMAND|\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n|15353|angad|20|0|57824|4240|3476|R|12.5|0.0|0:00.02|top|\n|15312|angad|20|0|273360|34332|12680|S|6.2|0.2|0:00.24|vim|\n|1|root|20|0|225944|9512|6544|S|0.0|0.1|0:42.51|systemd|\n|2|root|20|0|0|0|0|S|0.0|0.0|0:00.07|kthreadd|\n|4|root|0|-20|0|0|0|I|0.0|0.0|0:00.00|kworker/0:+|\n|6|root|0|-20|0|0|0|I|0.0|0.0|0:00.00|mm_percpu_+|\n|7|root|20|0|0|0|0|S|0.0|0.0|0:00.12|ksoftirqd/0|\n|8|root|20|0|0|0|0|I|0.0|0.0|0:30.62|rcu_sched|\n|9|root|20|0|0|0|0|I|0.0|0.0|0:00.00|rcu_bh|\n\n---\n\nAaah now this is more like it. Informative yet soothing to the eyes. Often, data visualization is limited by the perceptive short term memory load by the sheer volume of the displayed information. More times than not, we can mould the information a certain way so that it is more perceptive. Markdown comes to the rescue here!\n\n\n---\n\n# The How\n\nIn this series, I am going to tell you how I converted the garbled top command output to a human readable form using the following steps:\n\n* [What to work with](#what-to-work-with)\n* [Converting metadata to a list](#converting-metadata-to-a-list)\n* [Converting process data to a table](#converting-process-data-to-a-table)\n* [What lies ahead](#what-lies-ahead)\n\n---\n\n## What to work with\n\nFirst we need to pipe the output of the top command into a file. What I like to use is the following command:\n\n```sh\ntop -d 5 -n 1 -b | grep \"load average\" -A 15 \u003e myfile\n```\n\n* `-d`: This is the delay time interval (5 seconds here)\n* `-n`: This specifies the number of cycles to run. Since we only want a snapshot, we specify 1.\n* `-b`: Notice that when piped to a file, the top command prints out a lot of control characters. This can be avoided by using batch mode, which removes there characters for further processing.\n* Whatever comes after the pipe is to make sure we only get a specified number of lines in the top output (15 here). We can specify any number here, or remove this option for the full top output\n* We are using the `\u003e` symbol to take the output and pipe it to a file called **myfile**. Use vim to open this file, and we will proceed.\n\n---\n\n## Converting metadata to a list\n\nWe talked about macros in the last entry of this series. We are going to create a macro for converting the first section of the top command to a bulleted list. \n\n```\ntop - 17:06:25 up 1 day,  8:13,  1 user,  load average: 0.25, 0.35, 0.39\nTasks: 380 total,   1 running, 287 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  8.8 us,  2.9 sy,  0.2 ni, 87.7 id,  0.3 wa,  0.0 hi,  0.1 si,  0.0 st\nKiB Mem : 16262016 total,  7259032 free,  1811312 used,  7191672 buff/cache\nKiB Swap:        0 total,        0 free,        0 used. 13827644 avail Mem \n``` \n\nPress **q + a** to start recording the macro in the **a** key. The following set of functions need to be performed sequentially:\n\n* Find all commas and add a new line instead, with a tab and a *, to specify that the item is a sub element of the list:\n\n```vim\n:%s/,/\\r\\t\\*/g\n```\n\nNote that here we have used the `\\r` symbol instead of `\\n` as \\n appends an extra character at the end of the newline. `g` is used to specify that this action needs to be performed on every occurrence of `,` in a line.\n\n* Cleanup the extra space in the last point:\n\n```\nKiB Swap:        0 total\n\t*        0 free\n\t*        0 used. 13797256 avail Mem \n```\n\nFor this, search for Kib, then delete the space till the `0` reaches the `:` and press enter to go into a new line. Insert a *. Cleanup the extra space in the last two fields also. To get this:\n\n```\nKiB Swap:\n\t*  0 total\n\t*  0 free\n\t*  0 used. 13797256 avail Mem \n```\n\n* Insert a bullet behind every field by searching and pre-pending the line with a *. \n\nNow we have something that looks like this:\n\n* top - 00:26:50 up 15:33\n\t*  1 user\n\t*  load average: 0.34\n\t* 0.69\n\t* 0.84\n* Tasks: 370 total\n\t*   1 running\n\t* 279 sleeping\n\t*   0 stopped\n\t*   0 zombie\n* %Cpu(s):  5.2 us\n\t*  1.5 sy\n\t*  0.1 ni\n\t* 92.3 id\n\t*  0.8 wa\n\t*  0.0 hi\n\t*  0.1 si\n\t*  0.0 st\n* KiB Mem : 16262016 total\n\t*  9118020 free\n\t*  1652820 used\n\t*  5491176 buff/cache\n* KiB Swap:\n\t* 0 total\n\t* 0 free\n\t* 0 used. 14034404 avail Mem \n\nWe have our first section done and recorded in macro 'a'. To paste the contents of the macro in the current file, you can do `\" + a + p`. You can use this output to create your custom function for performing the actions specified and adding them to a keybinding if you want.\n\n---\n\n## Converting process data to a table\n\nUnder a metaphorical microscope, when we highlight all of the hidden characters, the process data looks something like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/2rclg3iqfe6xm4jnoum5.png)\n\nConverting this to a table format will include the following steps:\n\n* Search for \"PID\" using `/PID`.\n* Paste the following line below the line that contains PID:\n\n```\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n```\n* Since we will be replacing spaces with `|` to make a table, we have to make sure none of our process names have spaces. Till now I have only seen the `Web Content` process having a space. Simply replace it:\n\n```vim\n:%s/Web Content/Web-Content/g \n```\n\n* Go to the line with PID. Now from that line till the end of the document delete the space from each line beginning:\n\n```vim\n\" The + suggests that match one or more space\n\" .,$ means from current line till the end of the document\n:.,$s/^\\s\\+//\n```\n\n* Convert each line ending to a `|`:\n\n```vim\n\" $ is the line ending character\n:.,$s/$/|/\n```\n\n* Convert each line beginning with a `|`:\n\n```vim\n\" ^ is the line beginning character\n:.,$s/^/|/\n```\n\n* Convert one or more spaces to a `|`:\n\n```vim\n:.,$s/\\s\\+/|/g\n```\n\nAnd you are good to go. The process data now looks like this:\n\n```\n|PID|USER|PR|NI|VIRT|RES|SHR|S|%CPU|%MEM|TIME+|COMMAND|\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n|15353|angad|20|0|57824|4240|3476|R|12.5|0.0|0:00.02|top|\n|15312|angad|20|0|273360|34332|12680|S|6.2|0.2|0:00.24|vim|\n|1|root|20|0|225944|9512|6544|S|0.0|0.1|0:42.51|systemd|\n|2|root|20|0|0|0|0|S|0.0|0.0|0:00.07|kthreadd|\n|4|root|0|-20|0|0|0|I|0.0|0.0|0:00.00|kworker/0:+|\n|6|root|0|-20|0|0|0|I|0.0|0.0|0:00.00|mm_percpu_+|\n|7|root|20|0|0|0|0|S|0.0|0.0|0:00.12|ksoftirqd/0|\n|8|root|20|0|0|0|0|I|0.0|0.0|0:30.62|rcu_sched|\n|9|root|20|0|0|0|0|I|0.0|0.0|0:00.00|rcu_bh|\n```\n\nWhich is exactly the format We wanted. The table will render in markdown like this:\n\n|PID|USER|PR|NI|VIRT|RES|SHR|S|%CPU|%MEM|TIME+|COMMAND|\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n|15353|angad|20|0|57824|4240|3476|R|12.5|0.0|0:00.02|top|\n|15312|angad|20|0|273360|34332|12680|S|6.2|0.2|0:00.24|vim|\n|1|root|20|0|225944|9512|6544|S|0.0|0.1|0:42.51|systemd|\n|2|root|20|0|0|0|0|S|0.0|0.0|0:00.07|kthreadd|\n|4|root|0|-20|0|0|0|I|0.0|0.0|0:00.00|kworker/0:+|\n|6|root|0|-20|0|0|0|I|0.0|0.0|0:00.00|mm_percpu_+|\n|7|root|20|0|0|0|0|S|0.0|0.0|0:00.12|ksoftirqd/0|\n|8|root|20|0|0|0|0|I|0.0|0.0|0:30.62|rcu_sched|\n|9|root|20|0|0|0|0|I|0.0|0.0|0:00.00|rcu_bh|\n\n---\n\n## What lies ahead\n\nYou can check out the plugin I made for the same purpose here: \n\n{% github L04DB4L4NC3R/top.vim %}",
		"cached_tag_list": "vim, tutorial, linux, productivity",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 2,
		"description": "The What   Have you ever heard of the top command in linux. Yes, the one that lists out curr...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--cIiiEgLb--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/eg1skmhesxskj7dr4kqn.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-human-readable-processes-1fni",
		"public_reactions_count": 6,
		"processed_html": "\u003ch1\u003e\n  \u003ca name=\"the-what\" href=\"#the-what\"\u003e\n  \u003c/a\u003e\n  The What\n\u003c/h1\u003e\n\n\u003cp\u003eHave you ever heard of the \u003cstrong\u003etop\u003c/strong\u003e command in linux. Yes, the one that lists out currently running processes with a lot of other meta information about usage. A typical top command output, when piped to a file, looks like this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[?1h=[?25l[H[2J(B[mtop - 16:44:50 up 1 day,  7:51,  1 user,  load average: 0.30, 0.38, 0.39(B[m[39;49m(B[m[39;49m[K\nTasks:(B[m[39;49m[1m 384 (B[m[39;49mtotal,(B[m[39;49m[1m   1 (B[m[39;49mrunning,(B[m[39;49m[1m 289 (B[m[39;49msleeping,(B[m[39;49m[1m   0 (B[m[39;49mstopped,(B[m[39;49m[1m   0 (B[m[39;49mzombie(B[m[39;49m(B[m[39;49m[K\n%Cpu(s):(B[m[39;49m[1m 10.2 (B[m[39;49mus,(B[m[39;49m[1m  3.4 (B[m[39;49msy,(B[m[39;49m[1m  0.2 (B[m[39;49mni,(B[m[39;49m[1m 85.7 (B[m[39;49mid,(B[m[39;49m[1m  0.3 (B[m[39;49mwa,(B[m[39;49m[1m  0.0 (B[m[39;49mhi,(B[m[39;49m[1m  0.1 (B[m[39;49msi,(B[m[39;49m[1m  0.0 (B[m[39;49mst(B[m[39;49m(B[m[39;49m[K\nKiB Mem :(B[m[39;49m[1m 16262016 (B[m[39;49mtotal,(B[m[39;49m[1m  7029368 (B[m[39;49mfree,(B[m[39;49m[1m  2042444 (B[m[39;49mused,(B[m[39;49m[1m  7190204 (B[m[39;49mbuff/cache(B[m[39;49m(B[m[39;49m[K\nKiB Swap:(B[m[39;49m[1m        0 (B[m[39;49mtotal,(B[m[39;49m[1m        0 (B[m[39;49mfree,(B[m[39;49m[1m        0 (B[m[39;49mused.(B[m[39;49m[1m 13593976 (B[m[39;49mavail Mem (B[m[39;49m(B[m[39;49m[K\n[K\n[7m  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                  (B[m[39;49m[K\n(B[m 1527 root      20   0    4552    784    724 S   6.2  0.0   0:07.06 acpid                                                                                                    (B[m[39;49m[K\n(B[m 1985 redis     20   0   51444   3632   2564 S   6.2  0.0   0:33.44 redis-server                                                                                             (B[m[39;49m[K\n(B[m 3336 angad     20   0  533196  95444  71856 S   6.2  0.6  14:36.86 Xorg                                                                                                     (B[m[39;49m[K\n(B[m[1m 4084 angad     20   0   57972   4380   3508 R   6.2  0.0   0:00.02 top                                                                                                      (B[m[39;49m[K\n(B[m 4729 angad     20   0  863236 195212 119392 S   6.2  1.2   3:44.26 chrome     \nTLDR;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eWhoa! A lot of information being thrown here, but not exactly human readable. Sometimes when I am using a tool in linux, I often spin up the \u003cem\u003eOG\u003c/em\u003e top command to look at how much the tool is using my memory as compared to other processes. I want a clear readable format which I can use to view the result of the top command so that I can embed it wherever I like, be it a blog or an issue. Basically I want something like this:\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003etop - 00:26:50 up 15:33\n\n\u003cul\u003e\n\u003cli\u003e 1 user\u003c/li\u003e\n\u003cli\u003e load average: 0.34\u003c/li\u003e\n\u003cli\u003e0.69\u003c/li\u003e\n\u003cli\u003e0.84\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTasks: 370 total\n\n\u003cul\u003e\n\u003cli\u003e  1 running\u003c/li\u003e\n\u003cli\u003e279 sleeping\u003c/li\u003e\n\u003cli\u003e  0 stopped\u003c/li\u003e\n\u003cli\u003e  0 zombie\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e%Cpu(s):  5.2 us\n\n\u003cul\u003e\n\u003cli\u003e 1.5 sy\u003c/li\u003e\n\u003cli\u003e 0.1 ni\u003c/li\u003e\n\u003cli\u003e92.3 id\u003c/li\u003e\n\u003cli\u003e 0.8 wa\u003c/li\u003e\n\u003cli\u003e 0.0 hi\u003c/li\u003e\n\u003cli\u003e 0.1 si\u003c/li\u003e\n\u003cli\u003e 0.0 st\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eKiB Mem : 16262016 total\n\n\u003cul\u003e\n\u003cli\u003e 9118020 free\u003c/li\u003e\n\u003cli\u003e 1652820 used\u003c/li\u003e\n\u003cli\u003e 5491176 buff/cache\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eKiB Swap:\n\n\u003cul\u003e\n\u003cli\u003e0 total\u003c/li\u003e\n\u003cli\u003e0 free\u003c/li\u003e\n\u003cli\u003e0 used. 14034404 avail Mem \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePID\u003c/th\u003e\n\u003cth\u003eUSER\u003c/th\u003e\n\u003cth\u003ePR\u003c/th\u003e\n\u003cth\u003eNI\u003c/th\u003e\n\u003cth\u003eVIRT\u003c/th\u003e\n\u003cth\u003eRES\u003c/th\u003e\n\u003cth\u003eSHR\u003c/th\u003e\n\u003cth\u003eS\u003c/th\u003e\n\u003cth\u003e%CPU\u003c/th\u003e\n\u003cth\u003e%MEM\u003c/th\u003e\n\u003cth\u003eTIME+\u003c/th\u003e\n\u003cth\u003eCOMMAND\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e15353\u003c/td\u003e\n\u003ctd\u003eangad\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e57824\u003c/td\u003e\n\u003ctd\u003e4240\u003c/td\u003e\n\u003ctd\u003e3476\u003c/td\u003e\n\u003ctd\u003eR\u003c/td\u003e\n\u003ctd\u003e12.5\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.02\u003c/td\u003e\n\u003ctd\u003etop\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e15312\u003c/td\u003e\n\u003ctd\u003eangad\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e273360\u003c/td\u003e\n\u003ctd\u003e34332\u003c/td\u003e\n\u003ctd\u003e12680\u003c/td\u003e\n\u003ctd\u003eS\u003c/td\u003e\n\u003ctd\u003e6.2\u003c/td\u003e\n\u003ctd\u003e0.2\u003c/td\u003e\n\u003ctd\u003e0:00.24\u003c/td\u003e\n\u003ctd\u003evim\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e225944\u003c/td\u003e\n\u003ctd\u003e9512\u003c/td\u003e\n\u003ctd\u003e6544\u003c/td\u003e\n\u003ctd\u003eS\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.1\u003c/td\u003e\n\u003ctd\u003e0:42.51\u003c/td\u003e\n\u003ctd\u003esystemd\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eS\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.07\u003c/td\u003e\n\u003ctd\u003ekthreadd\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e-20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eI\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.00\u003c/td\u003e\n\u003ctd\u003ekworker/0:+\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e-20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eI\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.00\u003c/td\u003e\n\u003ctd\u003emm_percpu_+\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e7\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eS\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.12\u003c/td\u003e\n\u003ctd\u003eksoftirqd/0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e8\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eI\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:30.62\u003c/td\u003e\n\u003ctd\u003ercu_sched\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eI\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.00\u003c/td\u003e\n\u003ctd\u003ercu_bh\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eAaah now this is more like it. Informative yet soothing to the eyes. Often, data visualization is limited by the perceptive short term memory load by the sheer volume of the displayed information. More times than not, we can mould the information a certain way so that it is more perceptive. Markdown comes to the rescue here!\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch1\u003e\n  \u003ca name=\"the-how\" href=\"#the-how\"\u003e\n  \u003c/a\u003e\n  The How\n\u003c/h1\u003e\n\n\u003cp\u003eIn this series, I am going to tell you how I converted the garbled top command output to a human readable form using the following steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#what-to-work-with\"\u003eWhat to work with\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#converting-metadata-to-a-list\"\u003eConverting metadata to a list\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#converting-process-data-to-a-table\"\u003eConverting process data to a table\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#what-lies-ahead\"\u003eWhat lies ahead\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\u003ch2\u003e\n  \u003ca name=\"what-to-work-with\" href=\"#what-to-work-with\"\u003e\n  \u003c/a\u003e\n  What to work with\n\u003c/h2\u003e\n\n\u003cp\u003eFirst we need to pipe the output of the top command into a file. What I like to use is the following command:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003etop \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e 5 \u003cspan class=\"nt\"\u003e-n\u003c/span\u003e 1 \u003cspan class=\"nt\"\u003e-b\u003c/span\u003e | \u003cspan class=\"nb\"\u003egrep\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"load average\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e-A\u003c/span\u003e 15 \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e myfile\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e-d\u003c/code\u003e: This is the delay time interval (5 seconds here)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e-n\u003c/code\u003e: This specifies the number of cycles to run. Since we only want a snapshot, we specify 1.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e-b\u003c/code\u003e: Notice that when piped to a file, the top command prints out a lot of control characters. This can be avoided by using batch mode, which removes there characters for further processing.\u003c/li\u003e\n\u003cli\u003eWhatever comes after the pipe is to make sure we only get a specified number of lines in the top output (15 here). We can specify any number here, or remove this option for the full top output\u003c/li\u003e\n\u003cli\u003eWe are using the \u003ccode\u003e\u0026gt;\u003c/code\u003e symbol to take the output and pipe it to a file called \u003cstrong\u003emyfile\u003c/strong\u003e. Use vim to open this file, and we will proceed.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\u003ch2\u003e\n  \u003ca name=\"converting-metadata-to-a-list\" href=\"#converting-metadata-to-a-list\"\u003e\n  \u003c/a\u003e\n  Converting metadata to a list\n\u003c/h2\u003e\n\n\u003cp\u003eWe talked about macros in the last entry of this series. We are going to create a macro for converting the first section of the top command to a bulleted list.\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003etop - 17:06:25 up 1 day,  8:13,  1 user,  load average: 0.25, 0.35, 0.39\nTasks: 380 total,   1 running, 287 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  8.8 us,  2.9 sy,  0.2 ni, 87.7 id,  0.3 wa,  0.0 hi,  0.1 si,  0.0 st\nKiB Mem : 16262016 total,  7259032 free,  1811312 used,  7191672 buff/cache\nKiB Swap:        0 total,        0 free,        0 used. 13827644 avail Mem \n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003ePress \u003cstrong\u003eq + a\u003c/strong\u003e to start recording the macro in the \u003cstrong\u003ea\u003c/strong\u003e key. The following set of functions need to be performed sequentially:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFind all commas and add a new line instead, with a tab and a *, to specify that the item is a sub element of the list:\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e%s\u003cspan class=\"sr\"\u003e/,/\u003c/span\u003e\\\u003cspan class=\"k\"\u003er\u003c/span\u003e\\\u003cspan class=\"k\"\u003et\u003c/span\u003e\\*/\u003cspan class=\"k\"\u003eg\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eNote that here we have used the \u003ccode\u003e\\r\u003c/code\u003e symbol instead of \u003ccode\u003e\\n\u003c/code\u003e as \\n appends an extra character at the end of the newline. \u003ccode\u003eg\u003c/code\u003e is used to specify that this action needs to be performed on every occurrence of \u003ccode\u003e,\u003c/code\u003e in a line.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCleanup the extra space in the last point:\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eKiB Swap:        0 total\n    *        0 free\n    *        0 used. 13797256 avail Mem \n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eFor this, search for Kib, then delete the space till the \u003ccode\u003e0\u003c/code\u003e reaches the \u003ccode\u003e:\u003c/code\u003e and press enter to go into a new line. Insert a *. Cleanup the extra space in the last two fields also. To get this:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eKiB Swap:\n    *  0 total\n    *  0 free\n    *  0 used. 13797256 avail Mem \n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cul\u003e\n\u003cli\u003eInsert a bullet behind every field by searching and pre-pending the line with a *. \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow we have something that looks like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003etop - 00:26:50 up 15:33\n\n\u003cul\u003e\n\u003cli\u003e 1 user\u003c/li\u003e\n\u003cli\u003e load average: 0.34\u003c/li\u003e\n\u003cli\u003e0.69\u003c/li\u003e\n\u003cli\u003e0.84\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTasks: 370 total\n\n\u003cul\u003e\n\u003cli\u003e  1 running\u003c/li\u003e\n\u003cli\u003e279 sleeping\u003c/li\u003e\n\u003cli\u003e  0 stopped\u003c/li\u003e\n\u003cli\u003e  0 zombie\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e%Cpu(s):  5.2 us\n\n\u003cul\u003e\n\u003cli\u003e 1.5 sy\u003c/li\u003e\n\u003cli\u003e 0.1 ni\u003c/li\u003e\n\u003cli\u003e92.3 id\u003c/li\u003e\n\u003cli\u003e 0.8 wa\u003c/li\u003e\n\u003cli\u003e 0.0 hi\u003c/li\u003e\n\u003cli\u003e 0.1 si\u003c/li\u003e\n\u003cli\u003e 0.0 st\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eKiB Mem : 16262016 total\n\n\u003cul\u003e\n\u003cli\u003e 9118020 free\u003c/li\u003e\n\u003cli\u003e 1652820 used\u003c/li\u003e\n\u003cli\u003e 5491176 buff/cache\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eKiB Swap:\n\n\u003cul\u003e\n\u003cli\u003e0 total\u003c/li\u003e\n\u003cli\u003e0 free\u003c/li\u003e\n\u003cli\u003e0 used. 14034404 avail Mem \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe have our first section done and recorded in macro 'a'. To paste the contents of the macro in the current file, you can do \u003ccode\u003e\" + a + p\u003c/code\u003e. You can use this output to create your custom function for performing the actions specified and adding them to a keybinding if you want.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch2\u003e\n  \u003ca name=\"converting-process-data-to-a-table\" href=\"#converting-process-data-to-a-table\"\u003e\n  \u003c/a\u003e\n  Converting process data to a table\n\u003c/h2\u003e\n\n\u003cp\u003eUnder a metaphorical microscope, when we highlight all of the hidden characters, the process data looks something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MxRl7l-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2rclg3iqfe6xm4jnoum5.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MxRl7l-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2rclg3iqfe6xm4jnoum5.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"216\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eConverting this to a table format will include the following steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSearch for \"PID\" using \u003ccode\u003e/PID\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ePaste the following line below the line that contains PID:\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cul\u003e\n\u003cli\u003eSince we will be replacing spaces with \u003ccode\u003e|\u003c/code\u003e to make a table, we have to make sure none of our process names have spaces. Till now I have only seen the \u003ccode\u003eWeb Content\u003c/code\u003e process having a space. Simply replace it:\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e%s\u003cspan class=\"sr\"\u003e/Web Content/\u003c/span\u003eWeb\u003cspan class=\"p\"\u003e-\u003c/span\u003eContent/\u003cspan class=\"k\"\u003eg\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cul\u003e\n\u003cli\u003eGo to the line with PID. Now from that line till the end of the document delete the space from each line beginning:\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\" The + suggests that match one or more space\u003c/span\u003e\n\u003cspan class=\"c\"\u003e\" .,$ means from current line till the end of the document\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:.,\u003c/span\u003e$s\u003cspan class=\"sr\"\u003e/^\\s\\+/\u003c/span\u003e/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cul\u003e\n\u003cli\u003eConvert each line ending to a \u003ccode\u003e|\u003c/code\u003e:\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\" $ is the line ending character\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:.,\u003c/span\u003e$s\u003cspan class=\"sr\"\u003e/$/\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cul\u003e\n\u003cli\u003eConvert each line beginning with a \u003ccode\u003e|\u003c/code\u003e:\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\" ^ is the line beginning character\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:.,\u003c/span\u003e$s\u003cspan class=\"sr\"\u003e/^/\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cul\u003e\n\u003cli\u003eConvert one or more spaces to a \u003ccode\u003e|\u003c/code\u003e:\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:.,\u003c/span\u003e$s\u003cspan class=\"sr\"\u003e/\\s\\+/\u003c/span\u003e\u003cspan class=\"p\"\u003e|\u003c/span\u003e/\u003cspan class=\"k\"\u003eg\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAnd you are good to go. The process data now looks like this:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e|PID|USER|PR|NI|VIRT|RES|SHR|S|%CPU|%MEM|TIME+|COMMAND|\n|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n|15353|angad|20|0|57824|4240|3476|R|12.5|0.0|0:00.02|top|\n|15312|angad|20|0|273360|34332|12680|S|6.2|0.2|0:00.24|vim|\n|1|root|20|0|225944|9512|6544|S|0.0|0.1|0:42.51|systemd|\n|2|root|20|0|0|0|0|S|0.0|0.0|0:00.07|kthreadd|\n|4|root|0|-20|0|0|0|I|0.0|0.0|0:00.00|kworker/0:+|\n|6|root|0|-20|0|0|0|I|0.0|0.0|0:00.00|mm_percpu_+|\n|7|root|20|0|0|0|0|S|0.0|0.0|0:00.12|ksoftirqd/0|\n|8|root|20|0|0|0|0|I|0.0|0.0|0:30.62|rcu_sched|\n|9|root|20|0|0|0|0|I|0.0|0.0|0:00.00|rcu_bh|\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eWhich is exactly the format We wanted. The table will render in markdown like this:\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePID\u003c/th\u003e\n\u003cth\u003eUSER\u003c/th\u003e\n\u003cth\u003ePR\u003c/th\u003e\n\u003cth\u003eNI\u003c/th\u003e\n\u003cth\u003eVIRT\u003c/th\u003e\n\u003cth\u003eRES\u003c/th\u003e\n\u003cth\u003eSHR\u003c/th\u003e\n\u003cth\u003eS\u003c/th\u003e\n\u003cth\u003e%CPU\u003c/th\u003e\n\u003cth\u003e%MEM\u003c/th\u003e\n\u003cth\u003eTIME+\u003c/th\u003e\n\u003cth\u003eCOMMAND\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e15353\u003c/td\u003e\n\u003ctd\u003eangad\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e57824\u003c/td\u003e\n\u003ctd\u003e4240\u003c/td\u003e\n\u003ctd\u003e3476\u003c/td\u003e\n\u003ctd\u003eR\u003c/td\u003e\n\u003ctd\u003e12.5\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.02\u003c/td\u003e\n\u003ctd\u003etop\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e15312\u003c/td\u003e\n\u003ctd\u003eangad\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e273360\u003c/td\u003e\n\u003ctd\u003e34332\u003c/td\u003e\n\u003ctd\u003e12680\u003c/td\u003e\n\u003ctd\u003eS\u003c/td\u003e\n\u003ctd\u003e6.2\u003c/td\u003e\n\u003ctd\u003e0.2\u003c/td\u003e\n\u003ctd\u003e0:00.24\u003c/td\u003e\n\u003ctd\u003evim\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e225944\u003c/td\u003e\n\u003ctd\u003e9512\u003c/td\u003e\n\u003ctd\u003e6544\u003c/td\u003e\n\u003ctd\u003eS\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.1\u003c/td\u003e\n\u003ctd\u003e0:42.51\u003c/td\u003e\n\u003ctd\u003esystemd\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eS\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.07\u003c/td\u003e\n\u003ctd\u003ekthreadd\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e-20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eI\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.00\u003c/td\u003e\n\u003ctd\u003ekworker/0:+\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e6\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e-20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eI\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.00\u003c/td\u003e\n\u003ctd\u003emm_percpu_+\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e7\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eS\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.12\u003c/td\u003e\n\u003ctd\u003eksoftirqd/0\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e8\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eI\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:30.62\u003c/td\u003e\n\u003ctd\u003ercu_sched\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e9\u003c/td\u003e\n\u003ctd\u003eroot\u003c/td\u003e\n\u003ctd\u003e20\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003eI\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0.0\u003c/td\u003e\n\u003ctd\u003e0:00.00\u003c/td\u003e\n\u003ctd\u003ercu_bh\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\u003chr\u003e\n\u003ch2\u003e\n  \u003ca name=\"what-lies-ahead\" href=\"#what-lies-ahead\"\u003e\n  \u003c/a\u003e\n  What lies ahead\n\u003c/h2\u003e\n\n\u003cp\u003eYou can check out the plugin I made for the same purpose here: \u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/L04DB4L4NC3R\"\u003e\n        L04DB4L4NC3R\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/L04DB4L4NC3R/top.vim\"\u003e\n        top.vim\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A simple vim plugin to convert the output of the top command into a markdown report format\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\ntop.vim\u003c/h1\u003e\n\u003cp dir=\"auto\"\u003eA simple vim plugin to convert the output of the top command into a markdown report format\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 dir=\"auto\"\u003e\nKeybindings\u003c/h2\u003e\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"center\"\u003eMode\u003c/th\u003e\n\u003cth align=\"center\"\u003eMapping\u003c/th\u003e\n\u003cth align=\"center\"\u003eAction\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003eNormal\u003c/td\u003e\n\u003ctd align=\"center\"\u003etpmd\u003c/td\u003e\n\u003ctd align=\"center\"\u003eConvert to markdown\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003eNormal\u003c/td\u003e\n\u003ctd align=\"center\"\u003e[num]tpmt\u003c/td\u003e\n\u003ctd align=\"center\"\u003ePrint top 'num' lines (\u0026gt;= 8)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\u003chr\u003e\n\u003ch2 dir=\"auto\"\u003e\nDemo\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eBefore\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"top - 00:25:34 up 15:32,  1 user,  load average: 0.62, 0.82, 0.89\nTasks: 368 total,   1 running, 276 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  5.2 us,  1.5 sy,  0.1 ni, 92.3 id,  0.8 wa,  0.0 hi,  0.1 si,  0.0 st\nKiB Mem : 16262016 total,  9164476 free,  1610276 used,  5487264 buff/cache\nKiB Swap:        0 total,        0 free,        0 used. 14080740 avail Mem\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n15158 angad     20   0   57824   4188   3428 R  12.5  0.0   0:00.02 top\n 2795 angad     20   0  662896  61704  33972 S   6.2  0.4   0:39.40 x-terminal-emul\n    1 root      20   0  225944   9512   6544 S   0.0  0.1   0:42.48 systemd\n    2 root      20   0       0      0      0 S   0.0  0.0   0:00.07 kthreadd\n    4 root       0 -20       0      0      0 I   0.0  0.0   0:00.00 kworker/0:0H\n    6 root       0 -20       0      0      0 I   0.0  0.0   0:00.00 mm_percpu_wq\n    7 root      20   0       0      0      0 S   0.0  0.0   0:00.12 ksoftirqd/0\n    8 root      20   0       0      0      0 I   0.0  0.0   0:30.52 rcu_sched\n    9 root      20   0       0      0      0 I   0.0  0.0   0:00.00 rcu_bh\"\u003e\n\u003cpre class=\"notranslate\"\u003e\u003ccode\u003etop - 00:25:34 up 15:32,  1 user,  load average: 0.62, 0.82, 0.89\nTasks: 368 total,   1 running, 276 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  5.2 us,  1.5 sy,  0.1 ni, 92.3 id,  0.8 wa,  0.0 hi,  0.1 si,  0.0 st\nKiB Mem : 16262016 total,  9164476 free,  1610276 used,  5487264 buff/cache\nKiB Swap:        0 total,        0 free,        0 used. 14080740 avail Mem\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n15158 angad     20   0   57824   4188   3428 R  12.5  0.0   0:00.02 top\n 2795 angad     20   0  662896  61704  33972 S   6.2  0.4   0:39.40 x-terminal-emul\n    1 root      20   0  225944   9512   6544 S   0.0  0.1   0:42.48 systemd\n    2 root\u003c/code\u003e\u003c/pre\u003e…\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/L04DB4L4NC3R/top.vim\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-human-readable-processes-1fni",
		"social_image": null,
		"title": "Vim to the rescue: Human Readable Processes",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-25T05:33:00.684Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2022-02-06T02:30:50.654Z",
		"published_at": "2020-04-29T05:27:12.560Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "Spectrwm, is a small and minimalist tiling window manager. It is unlike manual *WMs* like bspwm and has more in common with dwm and i3. It was hilariously called scrotwm earlier. \n\nSpectrwm is one of the more obscure window managers. I frankly didn't like it as much as some of the other WMs that I have tried so I had decided not to write an entry on it. But I realized that I gotta get my points out there since some of you guys might have different opinions about this window manager (and might be able to change mine as well).\n\n \n* [Features](#features)\n* [Setting up](#setting-up)\n* [Getting started](#getting-started)\n* [Tags](#tags)\n* [Layouts](#layouts)\n* [Configuration](#configuration)\n* [Why I don't like Spectrwm](#why-i-dont-like-spectrwm)\n* [Verdict](#verdict)\n\n---\n\n### Features\n\n* It is a dynamic tiling window manager.\n* It has a plaintext configuration file and can be reloaded during runtime. \n* It strives to be small, compact and fast.\n* It uses workspaces instead of tags for managing multiple windows.\n* Although spectrwm isn't well document by far (at least compared to i3), it is easy to configure due to the commented defaults. \n\n\n---\n\n### Setting Up\n\nSpectrwm is available on most source repositories. In addition, you can download the release and build it from source.\n\n{% github https://github.com/conformal/spectrwm %}\n\nThe easiest way to get started (on debian based systems) is this:\n\n```sh\nsudo apt install spectrwm\n```\nTo run it, simple add the following line in your `~/.xsession` file:\n\n```\nexec spectrwm\n```\n\nLogout and log back in again, and boom! You are good to go.\n\nWhen you login to spectrwm, you get a basic menu bar which contains details like:\n\n* Which monitor you are on.\n* Which workspace you are on\n* Date and time\n\nSpectrwm does not support some popular menu bars such as the beloved polybar, yabar and lemonbar. If you want to customize the menu bar, you can either write your own script or use an alternative that works with spectrwm, namely **conky**. In this blog we will be using conky to configure our menu bar.\n\nAll of the default keybindings of spectrwm can be seen in its man page (which is surprisingly comprehensive). Almost any problem while setting up spectrwm can be resolved by RTFM (Reading the Freaking Manual). \n\n```sh\nman spectrwm\n```\n\n---\n\n\n### Layouts\n\nSpectrwm comes with 3 layouts mainly. You can switch between these layouts using the `Mod + Spacebar` keys. The default modifier in spectrwm is the windows key (Mod4).\n\n* **Vertical Master-Stack Layout**: This is the default layout in spectrwm. Here your left window will be the master, and every window you create after that will keep on stacking on the right hand side. This is also the default layout in dwm.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/vnvd6hi2qhjr8xxd6kqw.png)\n\n* **Horizontal Master-Stack Layout**: This is similar to the master-stack layout only. But here the master is at the top horizontal window split and each new spawn vertically splits the bottom horizontal split of the window.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/k7fextejf4fwh57iucya.png)\n\n* **Full Screen**: In this layout, all windows occupy 100% of your screen space. They can then be switched back and forth by using the `Mod + j|k` keys.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/234bw0fdf5ni47krwnxe.png)\n\n---\n\n\n### Configuration\n\nThe default configuration file of spectrwm is `~/.spectrwm.conf`. There is an example configuration available at `/etc/spectrwm.conf`. You can copy it to your home folder to get started. \n\nAs soon as you go inside the file, you will notice that all of the important functionalities that you might customize in a window manager are already commented. Whenever you make a change in the configuration, just press the `Mod + q` key to restart spectrwm.\n\nConfiguration in spectrwm is pretty self explanatory so I wont be diving deeper. I will just touch on these three subjects:\n\n* [Key Bindings](#key-bindings)\n* [Quirks](#quirks)\n* [Conky Bar Setup](#conky-bar-setup)\n\n---\n\n#### Key Bindings\n\nThe **bind** function can be used for mapping programs to keys in spectrwm. Now this might not be obvious but there is a separate configuration file with a LOT of key bindings specified beforehand. You can head over to [the official spectrwm repository](https://github.com/conformal/spectrwm) to take a look at the keybinding configurations. All of the configuration files with country ISO codes ahead of them (eg: spectrwm_fr.conf) are the files which you need to look at. \n\nYou can paste the contents of [spectrwm_us.conf](https://raw.githubusercontent.com/conformal/spectrwm/master/spectrwm_us.conf) in your `~/.spectrwm.conf` and fiddle around with the keybindings to suit your needs. The syntax is pretty easy to understand:\n\n```\nbind[\u003caction\u003e] = \u003ckeybinding\u003e\n```\n\n---\n\n#### Quirks\n\nYou can associate a certain program to open a certain way using quirks. They can be thought of as modifiers which limit (or extend) the actions of a specific program in a window. For example: \n\n```\n# quirk[Firefox:Dialog]\t\t\t= FLOAT\n# quirk[Gimp:gimp]\t\n```\n\nThe format of a quirk is the following: \n\n```\nquirk[\u003cclass\u003e:\u003cname\u003e] = [NONE | FLOAT | ANYWHERE | FULLSCREEN | FOCUSPREV]\n```\n\nThe class name of a program is actually the class name we get after selecting a window in `xprop` mode. It is the official X11 name of a particular window:\n\n```sh\n# how to get the class name of a window\nxprop | grep WM_CLASS\n```\n\n---\n\n#### Conky Bar Setup\n\nIf you take a closer look at the bar section of a spectrwm configuration, there is an option called **bar_action**. You can map it to a custom script if you want. You can also map it to conky, if you want to use it:\n\n```\nbar_action = conky\n```\n\nConky is a lightweight system monitor for X11 that can be used to display any kind of information on your desktop. It needs a configuration file at **~/.conkyrc**. This is how my conkyrc looks like:\n\n\n```\nout_to_x no\nout_to_console yes\nupdate_interval 1.0\ntotal_run_times 0\nuse_spacer none\nTEXT\n[ ${time %R %a,%d-%#b-%y} ] [ Mail:${new_mails} ] [ Up:${uptime_short} ] [ Temp:${acpitemp}C ] [ Battery: ${battery_percent BAT1}% ${alignr}${battery_bar 3,20 BAT1} ] [ ${addr wlp0s20f3} ] [ RAM:$memperc% ] [ CPU:${cpu}% ] [ ${downspeedf wlp0s20f3} Mbps ]\n```\n\nRefresh your spectrwm and you will get a bar like this: \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/35eqsx27jyvwx8kjkk2g.png)\n\nTo learn more about conky, you can head over to its official repository:\n\n{% github https://github.com/brndnmtthws/conky %}\n\n---\n\n### Why I don't like spectrwm\n\nSome of you might not agree with this section. But know that some of these points are facts and others are just my opinions. They might not be a deal breaker for you. Some of these are some issues that I faced while dealing with spectrwm, even after *RTFM*, so I felt like I needed to mention it for all of the new users who might want to try spectrwm out.\n\n* Spectrwm does not support [external compositing](https://dev.to/l04db4l4nc3r/compositors-in-linux-1hhb). Which means compton or picom will simply not work with it. You can say goodbye to window animations, drop shadows and transparency\n\n* As mentioned earlier, spectrwm does not support third party menu bars such as polybar, lemonbar or yabar. Which is kind of stupid due to it's similarities with i3 and dwm.\n\n* When you install spectrwm, [there is a bug](https://github.com/conformal/spectrwm/issues/11) which forces certain programs to open up on certain workspaces only. This is annoying if you are working on workspace 1 and you want to spawn a terminal on the same workspace but it ends up on workspace 6 without any reason. Although this bug can be solved by adding a simple quirk, but due to design decisions, it can not be included with the base spectrwm build. \n\n* While using spectrwm, I have noticed that it remembers the exact layout of your previously opened tiles in a particular workspace. For example if I open 3 terminals and resize each and every one of them, the next time I open 3 terminals on the same workspace, they are going to be the same size. This might be an annoyance if you don't want your windows to be the same size everytime. \n\n* I noticed a very weird thing that started happening in my *WM*. Whenever I opened some windows on a workspace which already has a window, they spawned behind the current window. This caused a lot of annoyance since I was not able to figure out if my windows were even being spawned or not. Later on I realized that it was because fullscreen mode and I had no indication that it was configured only for that particular workspace. As I mentioned earlier, spectrwm also memorizes layout on a per-workspace basis. Which is very different from other WMs.\n\n---\n\n### Verdict\n\nSpectrwm has it own array of annoyances and incompatibilities. But the more I think about its design philosophies, the more convinced I am that these incompatibilities are intentional. \n\nSpectrwm aims at being a very minimal and lightweight window manager, not just in terms of lines of code and bulk but in terms of usage. If you are someone who does not want any aesthetic distractions, wants to make the full use of screen real estate, then this is the WM for you. \n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: :heart: |\n| Learning curve (lesser is better)| :heart: :heart: :heart: |\n| Productivity | :heart: :heart: :heart: |\n| Fun | :heart: :heart: :heart: |",
		"cached_tag_list": "linux, ubuntu, opensource",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 3,
		"description": "Spectrwm, is a small and minimalist tiling window manager. It is unlike manual WMs like bspwm and has...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Ta4cyH3y--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/z0gfdfsu89dom3wjpdbg.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/spectrwm-the-compact-window-manager-3efl",
		"public_reactions_count": 10,
		"processed_html": "\u003cp\u003eSpectrwm, is a small and minimalist tiling window manager. It is unlike manual \u003cem\u003eWMs\u003c/em\u003e like bspwm and has more in common with dwm and i3. It was hilariously called scrotwm earlier. \u003c/p\u003e\n\n\u003cp\u003eSpectrwm is one of the more obscure window managers. I frankly didn't like it as much as some of the other WMs that I have tried so I had decided not to write an entry on it. But I realized that I gotta get my points out there since some of you guys might have different opinions about this window manager (and might be able to change mine as well).\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up\"\u003eSetting up\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-started\"\u003eGetting started\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tags\"\u003eTags\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#layouts\"\u003eLayouts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#why-i-dont-like-spectrwm\"\u003eWhy I don't like Spectrwm\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verdict\"\u003eVerdict\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt is a dynamic tiling window manager.\u003c/li\u003e\n\u003cli\u003eIt has a plaintext configuration file and can be reloaded during runtime. \u003c/li\u003e\n\u003cli\u003eIt strives to be small, compact and fast.\u003c/li\u003e\n\u003cli\u003eIt uses workspaces instead of tags for managing multiple windows.\u003c/li\u003e\n\u003cli\u003eAlthough spectrwm isn't well document by far (at least compared to i3), it is easy to configure due to the commented defaults. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"setting-up\" href=\"#setting-up\"\u003e\n  \u003c/a\u003e\n  Setting Up\n\u003c/h3\u003e\n\n\u003cp\u003eSpectrwm is available on most source repositories. In addition, you can download the release and build it from source.\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/conformal\"\u003e\n        conformal\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/conformal/spectrwm\"\u003e\n        spectrwm\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A small dynamic tiling window manager for X11.\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\nspectrwm\u003c/h1\u003e\n\u003cp dir=\"auto\"\u003espectrwm is a small, dynamic tiling and reparenting window manager for X11. It\ntries to stay out of the way so that valuable screen real estate can be used\nfor much more important stuff. It has sane defaults, and it does not require one to\nlearn a language to do any configuration. spectrwm is written by hackers for hackers\nand it strives to be small, compact, and fast.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003espectrwm was largely inspired by \u003ca href=\"http://xmonad.org\" rel=\"nofollow\"\u003exmonad\u003c/a\u003e and\n\u003ca href=\"http://dwm.suckless.org\" rel=\"nofollow\"\u003edwm\u003c/a\u003e. Both are fine products, but they suffer from things\nlike: crazy-unportable-language syndrome, silly defaults, asymmetrical window\nlayout, the 'how hard can it be?' (to code efficiently) problem, and good old NIH.  Nevertheless\n\u003ca href=\"http://dwm.suckless.org\" rel=\"nofollow\"\u003edwm\u003c/a\u003e was a phenomenal resource, and good ideas\nand code were borrowed from it. On the other hand, \u003ca href=\"http://xmonad.org\" rel=\"nofollow\"\u003exmonad\u003c/a\u003e\nhas great defaults and key bindings, plus xinerama support, but it is crippled by not\nbeing written in C.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003espectrwm is…\u003c/p\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/conformal/spectrwm\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThe easiest way to get started (on debian based systems) is this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003espectrwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eTo run it, simple add the following line in your \u003ccode\u003e~/.xsession\u003c/code\u003e file:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eexec spectrwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eLogout and log back in again, and boom! You are good to go.\u003c/p\u003e\n\n\u003cp\u003eWhen you login to spectrwm, you get a basic menu bar which contains details like:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhich monitor you are on.\u003c/li\u003e\n\u003cli\u003eWhich workspace you are on\u003c/li\u003e\n\u003cli\u003eDate and time\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSpectrwm does not support some popular menu bars such as the beloved polybar, yabar and lemonbar. If you want to customize the menu bar, you can either write your own script or use an alternative that works with spectrwm, namely \u003cstrong\u003econky\u003c/strong\u003e. In this blog we will be using conky to configure our menu bar.\u003c/p\u003e\n\n\u003cp\u003eAll of the default keybindings of spectrwm can be seen in its man page (which is surprisingly comprehensive). Almost any problem while setting up spectrwm can be resolved by RTFM (Reading the Freaking Manual).\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003eman spectrwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"layouts\" href=\"#layouts\"\u003e\n  \u003c/a\u003e\n  Layouts\n\u003c/h3\u003e\n\n\u003cp\u003eSpectrwm comes with 3 layouts mainly. You can switch between these layouts using the \u003ccode\u003eMod + Spacebar\u003c/code\u003e keys. The default modifier in spectrwm is the windows key (Mod4).\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eVertical Master-Stack Layout\u003c/strong\u003e: This is the default layout in spectrwm. Here your left window will be the master, and every window you create after that will keep on stacking on the right hand side. This is also the default layout in dwm.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WlcSzH8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnvd6hi2qhjr8xxd6kqw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WlcSzH8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnvd6hi2qhjr8xxd6kqw.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eHorizontal Master-Stack Layout\u003c/strong\u003e: This is similar to the master-stack layout only. But here the master is at the top horizontal window split and each new spawn vertically splits the bottom horizontal split of the window.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FOJ5n1oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k7fextejf4fwh57iucya.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FOJ5n1oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k7fextejf4fwh57iucya.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eFull Screen\u003c/strong\u003e: In this layout, all windows occupy 100% of your screen space. They can then be switched back and forth by using the \u003ccode\u003eMod + j|k\u003c/code\u003e keys.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--azMC-ksF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/234bw0fdf5ni47krwnxe.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--azMC-ksF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/234bw0fdf5ni47krwnxe.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"configuration\" href=\"#configuration\"\u003e\n  \u003c/a\u003e\n  Configuration\n\u003c/h3\u003e\n\n\u003cp\u003eThe default configuration file of spectrwm is \u003ccode\u003e~/.spectrwm.conf\u003c/code\u003e. There is an example configuration available at \u003ccode\u003e/etc/spectrwm.conf\u003c/code\u003e. You can copy it to your home folder to get started. \u003c/p\u003e\n\n\u003cp\u003eAs soon as you go inside the file, you will notice that all of the important functionalities that you might customize in a window manager are already commented. Whenever you make a change in the configuration, just press the \u003ccode\u003eMod + q\u003c/code\u003e key to restart spectrwm.\u003c/p\u003e\n\n\u003cp\u003eConfiguration in spectrwm is pretty self explanatory so I wont be diving deeper. I will just touch on these three subjects:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#key-bindings\"\u003eKey Bindings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#quirks\"\u003eQuirks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conky-bar-setup\"\u003eConky Bar Setup\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"key-bindings\" href=\"#key-bindings\"\u003e\n  \u003c/a\u003e\n  Key Bindings\n\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cstrong\u003ebind\u003c/strong\u003e function can be used for mapping programs to keys in spectrwm. Now this might not be obvious but there is a separate configuration file with a LOT of key bindings specified beforehand. You can head over to \u003ca href=\"https://github.com/conformal/spectrwm\"\u003ethe official spectrwm repository\u003c/a\u003e to take a look at the keybinding configurations. All of the configuration files with country ISO codes ahead of them (eg: spectrwm_fr.conf) are the files which you need to look at. \u003c/p\u003e\n\n\u003cp\u003eYou can paste the contents of \u003ca href=\"https://raw.githubusercontent.com/conformal/spectrwm/master/spectrwm_us.conf\"\u003espectrwm_us.conf\u003c/a\u003e in your \u003ccode\u003e~/.spectrwm.conf\u003c/code\u003e and fiddle around with the keybindings to suit your needs. The syntax is pretty easy to understand:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ebind[\u0026lt;action\u0026gt;] = \u0026lt;keybinding\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"quirks\" href=\"#quirks\"\u003e\n  \u003c/a\u003e\n  Quirks\n\u003c/h4\u003e\n\n\u003cp\u003eYou can associate a certain program to open a certain way using quirks. They can be thought of as modifiers which limit (or extend) the actions of a specific program in a window. For example:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e# quirk[Firefox:Dialog]         = FLOAT\n# quirk[Gimp:gimp]  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThe format of a quirk is the following:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003equirk[\u0026lt;class\u0026gt;:\u0026lt;name\u0026gt;] = [NONE | FLOAT | ANYWHERE | FULLSCREEN | FOCUSPREV]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThe class name of a program is actually the class name we get after selecting a window in \u003ccode\u003exprop\u003c/code\u003e mode. It is the official X11 name of a particular window:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# how to get the class name of a window\u003c/span\u003e\nxprop | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eWM_CLASS\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch4\u003e\n  \u003ca name=\"conky-bar-setup\" href=\"#conky-bar-setup\"\u003e\n  \u003c/a\u003e\n  Conky Bar Setup\n\u003c/h4\u003e\n\n\u003cp\u003eIf you take a closer look at the bar section of a spectrwm configuration, there is an option called \u003cstrong\u003ebar_action\u003c/strong\u003e. You can map it to a custom script if you want. You can also map it to conky, if you want to use it:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ebar_action = conky\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eConky is a lightweight system monitor for X11 that can be used to display any kind of information on your desktop. It needs a configuration file at \u003cstrong\u003e~/.conkyrc\u003c/strong\u003e. This is how my conkyrc looks like:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eout_to_x no\nout_to_console yes\nupdate_interval 1.0\ntotal_run_times 0\nuse_spacer none\nTEXT\n[ ${time %R %a,%d-%#b-%y} ] [ Mail:${new_mails} ] [ Up:${uptime_short} ] [ Temp:${acpitemp}C ] [ Battery: ${battery_percent BAT1}% ${alignr}${battery_bar 3,20 BAT1} ] [ ${addr wlp0s20f3} ] [ RAM:$memperc% ] [ CPU:${cpu}% ] [ ${downspeedf wlp0s20f3} Mbps ]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eRefresh your spectrwm and you will get a bar like this: \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZGEx2WFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/35eqsx27jyvwx8kjkk2g.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZGEx2WFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/35eqsx27jyvwx8kjkk2g.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"11\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eTo learn more about conky, you can head over to its official repository:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/brndnmtthws\"\u003e\n        brndnmtthws\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/brndnmtthws/conky\"\u003e\n        conky\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      Light-weight system monitor for X.\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ca href=\"https://github.com/brndnmtthws/conky/actions/workflows/build-and-test-linux.yaml\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gl2gIng5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/brndnmtthws/conky/actions/workflows/build-and-test-linux.yaml/badge.svg\" alt=\"Linux build\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e \u003ca href=\"https://github.com/brndnmtthws/conky/actions/workflows/build-and-test-macos.yaml\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HMNzX-oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/brndnmtthws/conky/actions/workflows/build-and-test-macos.yaml/badge.svg\" alt=\"macOS build\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e \u003ca href=\"https://github.com/brndnmtthws/conky/actions/workflows/docker.yaml\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2iTpCM-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/brndnmtthws/conky/actions/workflows/docker.yaml/badge.svg\" alt=\"Docker build\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e \u003ca href=\"https://github.com/brndnmtthws/conky/actions/workflows/publish-appimage.yml\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ongzxOlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/brndnmtthws/conky/actions/workflows/publish-appimage.yml/badge.svg\" alt=\"AppImage build\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://gitlab.com/brndnmtthws-oss/conky/commits/main\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/e4fb810a6ff012d0f13dcf323e23e77e5d96a0af9b4ce8829cdb08524abe147a/68747470733a2f2f6769746c61622e636f6d2f62726e646e6d74746877732d6f73732f636f6e6b792f6261646765732f6d61696e2f706970656c696e652e737667\" alt=\"pipeline status\" data-canonical-src=\"https://gitlab.com/brndnmtthws-oss/conky/badges/main/pipeline.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e \u003ca href=\"https://gitlab.com/brndnmtthws-oss/conky/commits/main\" rel=\"nofollow\"\u003e\u003cimg src=\"https://camo.githubusercontent.com/1c72a29af31fa826acef074c5504026dbc8fbc7bacf44c82bbbedffe3e36590f/68747470733a2f2f6769746c61622e636f6d2f62726e646e6d74746877732d6f73732f636f6e6b792f6261646765732f6d61696e2f636f7665726167652e737667\" alt=\"coverage report\" data-canonical-src=\"https://gitlab.com/brndnmtthws-oss/conky/badges/main/coverage.svg\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://matrix.to/#/#conky:frens.io\" rel=\"nofollow\"\u003e\u003cg-emoji class=\"g-emoji\" alias=\"speech_balloon\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png\"\u003e💬\u003c/g-emoji\u003e Join the Matrix chat\u003c/a\u003e\u003c/p\u003e\n\u003cp align=\"center\" dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/brndnmtthws/conkylogo/conky-logotype-horizontal-violet.png\"\u003e\u003cimg width=\"300\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5zeHqO6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/brndnmtthws/conkylogo/conky-logotype-horizontal-violet.png\" style=\"max-width: 100%;\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cstrong\u003eConky\u003c/strong\u003e is a free, light-weight system monitor for X, that displays\nany kind of information on your desktop.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003cg-emoji class=\"g-emoji\" alias=\"point_right\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f449.png\"\u003e👉\u003c/g-emoji\u003e Grab the \u003ca href=\"https://github.com/brndnmtthws/conky/releases/latest\"\u003elatest release from GitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://www.youtube.com/watch?v=bHtpLEoRKmg\u0026amp;t=19s\" rel=\"nofollow\"\u003e\u003cg-emoji class=\"g-emoji\" alias=\"video_camera\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4f9.png\"\u003e📹\u003c/g-emoji\u003e An introduction to Conky (YouTube)\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 dir=\"auto\"\u003e\nFeatures\u003c/h2\u003e\n\u003cp dir=\"auto\"\u003eConky can display more than 300 built-in objects, including support for:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eA plethora of OS stats (uname, uptime, \u003cstrong\u003eCPU usage\u003c/strong\u003e, \u003cstrong\u003emem\nusage\u003c/strong\u003e, disk usage, \u003cstrong\u003e\"top\"\u003c/strong\u003e like process stats, and \u003cstrong\u003enetwork\nmonitoring\u003c/strong\u003e, just to name a few).\u003c/li\u003e\n\u003cli\u003eBuilt-in \u003cstrong\u003eIMAP\u003c/strong\u003e and \u003cstrong\u003ePOP3\u003c/strong\u003e support.\u003c/li\u003e\n\u003cli\u003eBuilt-in support for many popular music players (\u003ca href=\"https://musicpd.org/\" rel=\"nofollow\"\u003eMPD\u003c/a\u003e\n\u003ca href=\"https://github.com/xmms2/wiki/wiki\"\u003eXMMS2\u003c/a\u003e, \u003ca href=\"https://audacious-media-player.org/\" rel=\"nofollow\"\u003eAudacious\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eCan be extended using built-in \u003ca href=\"https://github.com/brndnmtthws/conkylua\"\u003e\u003cstrong\u003eLua\u003c/strong\u003e\u003c/a\u003e support, or any of your\nown scripts and programs (\u003ca href=\"https://github.com/brndnmtthws/conky/wiki#tutorial\"\u003emore\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eBuilt-in \u003ca href=\"https://docs.enlightenment.org/api/imlib2/html/\" rel=\"nofollow\"\u003e\u003cstrong\u003eImlib2\u003c/strong\u003e\u003c/a\u003e and \u003ca href=\"https://www.cairographics.org/\" rel=\"nofollow\"\u003e\u003cstrong\u003eCairo\u003c/strong\u003e\u003c/a\u003e bindings for arbitrary drawing\nwith Lua (\u003ca href=\"https://github.com/brndnmtthws/conky/wiki/Lua\"\u003emore\u003c/a\u003e).\u003c/li\u003e\n\u003cli\u003eRuns on Linux, FreeBSD, OpenBSD, DragonFlyBSD, NetBSD, Solaris, Haiku, and macOS!\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://hub.docker.com/r/brndnmtthws/conky/\" rel=\"nofollow\"\u003eDocker image\u003c/a\u003e available for amd64, armv7, and aarch64 (aka armv8)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e…\u003c/p\u003e\u003c/article\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/brndnmtthws/conky\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"why-i-dont-like-spectrwm\" href=\"#why-i-dont-like-spectrwm\"\u003e\n  \u003c/a\u003e\n  Why I don't like spectrwm\n\u003c/h3\u003e\n\n\u003cp\u003eSome of you might not agree with this section. But know that some of these points are facts and others are just my opinions. They might not be a deal breaker for you. Some of these are some issues that I faced while dealing with spectrwm, even after \u003cem\u003eRTFM\u003c/em\u003e, so I felt like I needed to mention it for all of the new users who might want to try spectrwm out.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eSpectrwm does not support \u003ca href=\"https://dev.to/l04db4l4nc3r/compositors-in-linux-1hhb\"\u003eexternal compositing\u003c/a\u003e. Which means compton or picom will simply not work with it. You can say goodbye to window animations, drop shadows and transparency\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAs mentioned earlier, spectrwm does not support third party menu bars such as polybar, lemonbar or yabar. Which is kind of stupid due to it's similarities with i3 and dwm.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen you install spectrwm, \u003ca href=\"https://github.com/conformal/spectrwm/issues/11\"\u003ethere is a bug\u003c/a\u003e which forces certain programs to open up on certain workspaces only. This is annoying if you are working on workspace 1 and you want to spawn a terminal on the same workspace but it ends up on workspace 6 without any reason. Although this bug can be solved by adding a simple quirk, but due to design decisions, it can not be included with the base spectrwm build. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhile using spectrwm, I have noticed that it remembers the exact layout of your previously opened tiles in a particular workspace. For example if I open 3 terminals and resize each and every one of them, the next time I open 3 terminals on the same workspace, they are going to be the same size. This might be an annoyance if you don't want your windows to be the same size everytime. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eI noticed a very weird thing that started happening in my \u003cem\u003eWM\u003c/em\u003e. Whenever I opened some windows on a workspace which already has a window, they spawned behind the current window. This caused a lot of annoyance since I was not able to figure out if my windows were even being spawned or not. Later on I realized that it was because fullscreen mode and I had no indication that it was configured only for that particular workspace. As I mentioned earlier, spectrwm also memorizes layout on a per-workspace basis. Which is very different from other WMs.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h3\u003e\n\n\u003cp\u003eSpectrwm has it own array of annoyances and incompatibilities. But the more I think about its design philosophies, the more convinced I am that these incompatibilities are intentional. \u003c/p\u003e\n\n\u003cp\u003eSpectrwm aims at being a very minimal and lightweight window manager, not just in terms of lines of code and bulk but in terms of usage. If you are someone who does not want any aesthetic distractions, wants to make the full use of screen real estate, then this is the WM for you. \u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "spectrwm-the-compact-window-manager-3efl",
		"social_image": null,
		"title": "Spectrwm: The Compact Window Manager",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-26T19:01:33.634Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2022-01-09T03:24:44.145Z",
		"published_at": "2020-05-09T12:26:26.445Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "Ratpoison is an ambitious project that puts the GNU screen command as a first class citizen. This window manager professes minimalism and makes sure that the user does not need a mouse at all, hence the name.\n\nIf you are an emacs user then you will feel more in home with this window manager. For all other users, this *WM* is a bit complicated to get used to, yet very easy to configure. \n \n* [Features](#features)\n* [Setting up](#setting-up)\n* [Layouts](#layouts)\n* [Ratpoison Menu](#ratpoison-menu)\n* [Frame Navigation](#frame-navigation)\n* [Configuration](#configuration)\n* [Verdict](#verdict)\n\n---\n\n### Features\n\n* Ratpoison does not support window decoration, since it does not want you to use the mouse to manage windows. \n* Even though it's design philosophy does not put aesthetics in the highest regard, it has external compositor support (ahem ahem spectrwm).\n* Each window takes up a complete frame, so menu bars like polybar and conky are not compatible (and not recommended). \n* The default keybindings are more like key-chords. They are emacs centric but use `Ctrl + t` as the top level modifier rather than `Ctrl + x` in emacs due to it leading to \"key-clobbering\". The maintainers feel that the current keybindings are sufficient and you don't have to change them to get the most out of ratpoison. \n\n\n---\n\n### Setting Up\n\nRatpoison has a candidate for most distros. On debian it can be installed using `apt`: \n\n```sh\nsudo apt install ratpoison\n```\n\nAfter installing it, simply add the following line in your `~/.xinitrc`, logout and log back in again:\n\n```\nexec ratpoison\n```\n\nAfter you login, it will just show a black screen with nothing on it. But you will see an info bar on the top right corner informing you of how to open the help and application menu. \n\nPress `Ctrl + t + ?` to view the keybindings. The best part about this list is that when you create your own bindings, you will be able to see them getting updated in this list.\n\nRatpoison has excellent documentation. Distributed on [it's official website](https://www.nongnu.org/ratpoison/) as well as it's man pages. An exhaustive list of default keybindings is given [here](https://www.nongnu.org/ratpoison/doc/Default-Key-Bindings.html#Default-Key-Bindings). \n\n\n\n---\n\n\n### Layouts\n\nRatpoison is a tiling window manager and only supports 2 layouts: Horizontal and Vertical split. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ftwoaun2exe5892y4qi0.png)\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/iwr4q3xtz22zajdrul9a.png)\n\nWhenever you close a split, the windows get readjusted automatically. You don't have any control over how the adjusted layout will look like. So you are left wishing for the best result whenever you close a split. \n\n---\n\n### Ratpoison Menu\n\nRatpoison has its own awesome-style application menu. It can be activated using `Ctrl + t + .`. It isn't nearly as comprehensive as the menu we get in awesome, but it is useful for easy navigation to X11 apps.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/lwu9c9tfmlq6g5kh19d5.png)\n\n---\n\n### Frame Navigation\n\nEach window in ratpoison occupies an entire frame, with no overlapping of frames allowed. You can easily jump from one frame to the other by pressing `Ctrl + t + [num]` where num is the numeric identifier of that frame. One unique thing about ratpoison is that you can even rename your windows so that you can easily refer to them for navigation.\n\nFor viewing which frames are open, press `Ctrl + w`: \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/7m0bojfev7vd6krfj1cn.png)\n\nNotice how each window frame has a number next to it. That number can be used after hitting the top command to jump to that frame. You can also jump to the previous and the next frame using the `Ctrl + t + n|p` commands.\n\n---\n\n### Configuration\n\nConfiguring ratpoison is very easy, primarily due to it being well documented. Ratpoison client has a set of commands that can be used to interact with the window manager. To pass in the client native commands, you can do `Ctrl + t + :`. For running terminal commands, you can do `Ctrl + t + !`. \n\nTo start configuring ratpoison, create a file called `~/.ratpoisonrc`. Here is what my configuration looks like:\n\n```sh\n# exec command can be used to execute shell commands\n# this command starts up the compositor\nexec picom \u0026\n\n# this command sets the wallpaper\nexec nitrogen --set-scaled /usr/share/backgrounds/Manhattan_Sunset_by_Giacomo_Ferroni.jpg\n\n# this command sets up the battery alert\nexec /usr/local/bin/battery_alert 100 \u0026\n\n# c-t r will restart ratpoison\nbind r restart \n\n# c-t f will execute firefox\nbind f exec firefox\n\n# vim-like nav commands\n# difference between bind and definekey is that \n# definekey does not require the top command to be run first\ndefinekey top M-l focusright\ndefinekey top M-h focusleft\ndefinekey top M-j focusdown\ndefinekey top M-k focusup\n\n# For having multiple workspaces\n# Can be shifter by Alt-F1-6\nexec /usr/bin/rpws init 6 -k\n```\n\nYou can read more about how to configure your ratpoison from [here](https://www.nongnu.org/ratpoison/doc/). Ratpoison requires minimum configuration for the most part. That is a huge perk in its favour. \n\n---\n\n### Verdict\n\nRatpoison aims at only one thing: Getting rid of the mouse. And it succeeds keeping user away from the mouse for the most part. I noticed that ratpoison is extremely hard to use with its default keybindings and inflexible window splits. Especially due to the fact that I come from a vim environment rather than emacs. \n\nI can see how ratpoison will be ideal for someone coming from emacs, but I still feel that there are more feature rich window managers out there which can be used in a minimal fashion to ensure minimal mouse usage. In lieu of this, I certainly wouldn't recommend ratpoison for a newcomer. If you are a veteran emacs user then this *WM* might be for you. I personally prefer spectrwm over ratpoison when it comes to following \"no wasted screen real-estate\" philosophy. \n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: :heart: |\n| Learning curve (lesser is better)| :heart: :heart: :heart: :heart: |\n| Productivity | :heart: :heart: |\n| Fun | :heart: |",
		"cached_tag_list": "linux, opensource",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 2,
		"description": "Ratpoison is an ambitious project that puts the GNU screen command as a first class citizen. This win...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--4vXGQ74E--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/emsirdnlps64le81bdpb.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/ratpoison-forget-about-your-mouse-1391",
		"public_reactions_count": 6,
		"processed_html": "\u003cp\u003eRatpoison is an ambitious project that puts the GNU screen command as a first class citizen. This window manager professes minimalism and makes sure that the user does not need a mouse at all, hence the name.\u003c/p\u003e\n\n\u003cp\u003eIf you are an emacs user then you will feel more in home with this window manager. For all other users, this \u003cem\u003eWM\u003c/em\u003e is a bit complicated to get used to, yet very easy to configure. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up\"\u003eSetting up\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#layouts\"\u003eLayouts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#ratpoison-menu\"\u003eRatpoison Menu\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#frame-navigation\"\u003eFrame Navigation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verdict\"\u003eVerdict\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eRatpoison does not support window decoration, since it does not want you to use the mouse to manage windows. \u003c/li\u003e\n\u003cli\u003eEven though it's design philosophy does not put aesthetics in the highest regard, it has external compositor support (ahem ahem spectrwm).\u003c/li\u003e\n\u003cli\u003eEach window takes up a complete frame, so menu bars like polybar and conky are not compatible (and not recommended). \u003c/li\u003e\n\u003cli\u003eThe default keybindings are more like key-chords. They are emacs centric but use \u003ccode\u003eCtrl + t\u003c/code\u003e as the top level modifier rather than \u003ccode\u003eCtrl + x\u003c/code\u003e in emacs due to it leading to \"key-clobbering\". The maintainers feel that the current keybindings are sufficient and you don't have to change them to get the most out of ratpoison. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"setting-up\" href=\"#setting-up\"\u003e\n  \u003c/a\u003e\n  Setting Up\n\u003c/h3\u003e\n\n\u003cp\u003eRatpoison has a candidate for most distros. On debian it can be installed using \u003ccode\u003eapt\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003eratpoison\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAfter installing it, simply add the following line in your \u003ccode\u003e~/.xinitrc\u003c/code\u003e, logout and log back in again:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eexec ratpoison\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAfter you login, it will just show a black screen with nothing on it. But you will see an info bar on the top right corner informing you of how to open the help and application menu. \u003c/p\u003e\n\n\u003cp\u003ePress \u003ccode\u003eCtrl + t + ?\u003c/code\u003e to view the keybindings. The best part about this list is that when you create your own bindings, you will be able to see them getting updated in this list.\u003c/p\u003e\n\n\u003cp\u003eRatpoison has excellent documentation. Distributed on \u003ca href=\"https://www.nongnu.org/ratpoison/\"\u003eit's official website\u003c/a\u003e as well as it's man pages. An exhaustive list of default keybindings is given \u003ca href=\"https://www.nongnu.org/ratpoison/doc/Default-Key-Bindings.html#Default-Key-Bindings\"\u003ehere\u003c/a\u003e. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"layouts\" href=\"#layouts\"\u003e\n  \u003c/a\u003e\n  Layouts\n\u003c/h3\u003e\n\n\u003cp\u003eRatpoison is a tiling window manager and only supports 2 layouts: Horizontal and Vertical split. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wgp-hMku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ftwoaun2exe5892y4qi0.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wgp-hMku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ftwoaun2exe5892y4qi0.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--b3qhE6h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iwr4q3xtz22zajdrul9a.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--b3qhE6h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iwr4q3xtz22zajdrul9a.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWhenever you close a split, the windows get readjusted automatically. You don't have any control over how the adjusted layout will look like. So you are left wishing for the best result whenever you close a split. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"ratpoison-menu\" href=\"#ratpoison-menu\"\u003e\n  \u003c/a\u003e\n  Ratpoison Menu\n\u003c/h3\u003e\n\n\u003cp\u003eRatpoison has its own awesome-style application menu. It can be activated using \u003ccode\u003eCtrl + t + .\u003c/code\u003e. It isn't nearly as comprehensive as the menu we get in awesome, but it is useful for easy navigation to X11 apps.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sQVXIb4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lwu9c9tfmlq6g5kh19d5.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sQVXIb4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lwu9c9tfmlq6g5kh19d5.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"448\" height=\"232\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"frame-navigation\" href=\"#frame-navigation\"\u003e\n  \u003c/a\u003e\n  Frame Navigation\n\u003c/h3\u003e\n\n\u003cp\u003eEach window in ratpoison occupies an entire frame, with no overlapping of frames allowed. You can easily jump from one frame to the other by pressing \u003ccode\u003eCtrl + t + [num]\u003c/code\u003e where num is the numeric identifier of that frame. One unique thing about ratpoison is that you can even rename your windows so that you can easily refer to them for navigation.\u003c/p\u003e\n\n\u003cp\u003eFor viewing which frames are open, press \u003ccode\u003eCtrl + w\u003c/code\u003e: \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mDu904d7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7m0bojfev7vd6krfj1cn.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mDu904d7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7m0bojfev7vd6krfj1cn.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"480\" height=\"53\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNotice how each window frame has a number next to it. That number can be used after hitting the top command to jump to that frame. You can also jump to the previous and the next frame using the \u003ccode\u003eCtrl + t + n|p\u003c/code\u003e commands.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"configuration\" href=\"#configuration\"\u003e\n  \u003c/a\u003e\n  Configuration\n\u003c/h3\u003e\n\n\u003cp\u003eConfiguring ratpoison is very easy, primarily due to it being well documented. Ratpoison client has a set of commands that can be used to interact with the window manager. To pass in the client native commands, you can do \u003ccode\u003eCtrl + t + :\u003c/code\u003e. For running terminal commands, you can do \u003ccode\u003eCtrl + t + !\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eTo start configuring ratpoison, create a file called \u003ccode\u003e~/.ratpoisonrc\u003c/code\u003e. Here is what my configuration looks like:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# exec command can be used to execute shell commands\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# this command starts up the compositor\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eexec \u003c/span\u003epicom \u0026amp;\n\n\u003cspan class=\"c\"\u003e# this command sets the wallpaper\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eexec \u003c/span\u003enitrogen \u003cspan class=\"nt\"\u003e--set-scaled\u003c/span\u003e /usr/share/backgrounds/Manhattan_Sunset_by_Giacomo_Ferroni.jpg\n\n\u003cspan class=\"c\"\u003e# this command sets up the battery alert\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eexec\u003c/span\u003e /usr/local/bin/battery_alert 100 \u0026amp;\n\n\u003cspan class=\"c\"\u003e# c-t r will restart ratpoison\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ebind \u003c/span\u003er restart \n\n\u003cspan class=\"c\"\u003e# c-t f will execute firefox\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ebind \u003c/span\u003ef \u003cspan class=\"nb\"\u003eexec \u003c/span\u003efirefox\n\n\u003cspan class=\"c\"\u003e# vim-like nav commands\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# difference between bind and definekey is that \u003c/span\u003e\n\u003cspan class=\"c\"\u003e# definekey does not require the top command to be run first\u003c/span\u003e\ndefinekey top M-l focusright\ndefinekey top M-h focusleft\ndefinekey top M-j focusdown\ndefinekey top M-k focusup\n\n\u003cspan class=\"c\"\u003e# For having multiple workspaces\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Can be shifter by Alt-F1-6\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eexec\u003c/span\u003e /usr/bin/rpws init 6 \u003cspan class=\"nt\"\u003e-k\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYou can read more about how to configure your ratpoison from \u003ca href=\"https://www.nongnu.org/ratpoison/doc/\"\u003ehere\u003c/a\u003e. Ratpoison requires minimum configuration for the most part. That is a huge perk in its favour. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h3\u003e\n\n\u003cp\u003eRatpoison aims at only one thing: Getting rid of the mouse. And it succeeds keeping user away from the mouse for the most part. I noticed that ratpoison is extremely hard to use with its default keybindings and inflexible window splits. Especially due to the fact that I come from a vim environment rather than emacs. \u003c/p\u003e\n\n\u003cp\u003eI can see how ratpoison will be ideal for someone coming from emacs, but I still feel that there are more feature rich window managers out there which can be used in a minimal fashion to ensure minimal mouse usage. In lieu of this, I certainly wouldn't recommend ratpoison for a newcomer. If you are a veteran emacs user then this \u003cem\u003eWM\u003c/em\u003e might be for you. I personally prefer spectrwm over ratpoison when it comes to following \"no wasted screen real-estate\" philosophy. \u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "ratpoison-forget-about-your-mouse-1391",
		"social_image": null,
		"title": "Ratpoison: Forget About Your Mouse",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-27T06:43:43.569Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-05-04T10:34:53.300Z",
		"published_at": "2020-05-04T10:34:53.300Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "## Introduction\n\nOne of the reasons that people go for IDEs is that the moment you open one, you have everything exactly how you want it. With a file browser on the left hand side, coding window on the right and an attached terminal below. But whenever you open vim, you have to open the file browser and terminal from scratch. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/99v0jx3o6pairkzjtfsx.png)\n\nWell there is a quick way around it. You can actually store sessions in vim. You can then open that particular session to see exactly what you want to see.\n\n---\n\n## Creating a session in vim\n\nOpen vim. Now open the programs that you want to see in your session. Let us open the **Lex** file browser:\n\n```vimscript\n:Lex\n```\nNow let us open any file, and the open a terminal below by running the following command:\n\n```vimscript\n:bel term\n```\n\nTo save a session, you can use the `mks[ession]` command. Note that all sessions have a `.vim` extension. Vim sessions also store the split sizes, so feel free to resize your terminal without worrying about ever doing it again after opening vim\n\n```vimscript\n:mks session.vim\n```\n\nYou can now safely exit out of vim without worrying about loosing your layout. You will be able to see a `session.vim` file in your current directory. To open it use the **-S** flag in vim:\n\n```sh\nvim -S session.vim\n``` \n\n---\n\n## A few things to note\n\n* If you add a **!** symbol after `mks`, it overwrites the file you specify.\n* If no file name is supplied then the default file is **Session.vim**\n* Want to store multiple files open on multiple tabs? Go ahead!\n* Want to use additional UI details while opening a session? Go ahead and create a **x.vim** file in the same directory and go ahead.\n\n",
		"cached_tag_list": "vim, linux, tutorial, todayilearned",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction   One of the reasons that people go for IDEs is that the moment you open one, y...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--6gAxEDL2--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/l139ond5ng96j2149yjj.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-sessions-344b",
		"public_reactions_count": 13,
		"processed_html": "\u003ch2\u003e\n  \u003ca name=\"introduction\" href=\"#introduction\"\u003e\n  \u003c/a\u003e\n  Introduction\n\u003c/h2\u003e\n\n\u003cp\u003eOne of the reasons that people go for IDEs is that the moment you open one, you have everything exactly how you want it. With a file browser on the left hand side, coding window on the right and an attached terminal below. But whenever you open vim, you have to open the file browser and terminal from scratch. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xL0uDHL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/99v0jx3o6pairkzjtfsx.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xL0uDHL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/99v0jx3o6pairkzjtfsx.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWell there is a quick way around it. You can actually store sessions in vim. You can then open that particular session to see exactly what you want to see.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"creating-a-session-in-vim\" href=\"#creating-a-session-in-vim\"\u003e\n  \u003c/a\u003e\n  Creating a session in vim\n\u003c/h2\u003e\n\n\u003cp\u003eOpen vim. Now open the programs that you want to see in your session. Let us open the \u003cstrong\u003eLex\u003c/strong\u003e file browser:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003eLex\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNow let us open any file, and the open a terminal below by running the following command:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003ebel\u003c/span\u003e \u003cspan class=\"nb\"\u003eterm\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eTo save a session, you can use the \u003ccode\u003emks[ession]\u003c/code\u003e command. Note that all sessions have a \u003ccode\u003e.vim\u003c/code\u003e extension. Vim sessions also store the split sizes, so feel free to resize your terminal without worrying about ever doing it again after opening vim\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003emks\u003c/span\u003e session\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"k\"\u003evim\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYou can now safely exit out of vim without worrying about loosing your layout. You will be able to see a \u003ccode\u003esession.vim\u003c/code\u003e file in your current directory. To open it use the \u003cstrong\u003e-S\u003c/strong\u003e flag in vim:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003evim \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e session.vim\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"a-few-things-to-note\" href=\"#a-few-things-to-note\"\u003e\n  \u003c/a\u003e\n  A few things to note\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you add a \u003cstrong\u003e!\u003c/strong\u003e symbol after \u003ccode\u003emks\u003c/code\u003e, it overwrites the file you specify.\u003c/li\u003e\n\u003cli\u003eIf no file name is supplied then the default file is \u003cstrong\u003eSession.vim\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eWant to store multiple files open on multiple tabs? Go ahead!\u003c/li\u003e\n\u003cli\u003eWant to use additional UI details while opening a session? Go ahead and create a \u003cstrong\u003ex.vim\u003c/strong\u003e file in the same directory and go ahead.\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-sessions-344b",
		"social_image": null,
		"title": "Vim to the rescue: Sessions",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-27T06:44:53.018Z",
		"crossposted_at": null,
		"edited_at": "2020-05-01T15:23:12.344Z",
		"last_comment_at": "2020-05-01T17:09:10.713Z",
		"published_at": "2020-04-28T15:39:02.525Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "I have faced loads of situations where there is a large block of text which needs a particular action performed per line. This can easily be done using a macro in vim. But when we use vim, we care about efficiency. So we will be seeing how it can be done by using the `visual block mode` in vim.\n\n---\n\n## Visual Block Mode\n\nThe visual block mode in vim is used to visually select multiple lines/block of text in vim and perform a certain action on it. This action can be anything ranging from an insertion to a deletion. This action is then reflected in each and every line of the block of text just like you would use multiple cursors in an IDE like VS Code. \n\nTo activate visual block mode, press **Ctrl + v**. Now you can select lines horizontally/vertically by using the navigation keys:\n\n```\n[num]h|j|k|l\n```\n\nOnce you select a block of text, you can press any of the vim's keybindings for performing actions on the block. For example, you can press **d** to delete the block.\n\n---\n\n## Line by line operation in visual block mode\n\n\nTo insert/delete text on a line-by-line basis, press **I** to go into insert mode in the visual block or **A** to go into append mode. Once you do that, It will deselect the block and take you to the top line. Perform your desired action there and press escape. This action will then be reflected in each and very line of the visual block.\n\n![Visual Block Mode](https://dev-to-uploads.s3.amazonaws.com/i/lpue4p5js0b75czf5wk9.gif)\n\n---\n\n## Incrementing numbers in a list\n\nImagine that you have to make a long list of incremental numbers. What would you do? \n\nThere is a very easy way to do this in vim using the visual block mode. Let us say we need to write numbers from 1 to 100. Follow the following steps:\n\n* Write 1 and a newline and copy it a 100 times by typing: **y1j**. Now paste it a 100 times using **100p**.\n\n* Go to the visual block mode **Ctrl + v** and select the number block from the second 1, using **99j**.\n\n* Press **g** and then **Ctrl a**. The latter is used to increment numbers and the former makes sure that the global context of numbers in a visual block is realized.\n\n![Increment Integers](https://dev-to-uploads.s3.amazonaws.com/i/egracmuld8fk04ftxyh5.gif)\n\n\n---\n\n## Indenting a block of code\n\nA block of code can be effortlessly indented using the visual block mode. Select a block using **Ctrl + v** and the navigation keys. Then hit **\u003e\u003e** for right indentation and **\u003c\u003c** for left indentation.\n\nThe **o** button can be used to go to the other side of the selected text in visual block mode, in addition to using **$**. The latter will take you to the end of a line rather than the end of the highlighted block.\n\n![Indentation](https://dev-to-uploads.s3.amazonaws.com/i/bsabv3fi8auf6nlx8275.gif)",
		"cached_tag_list": "vim, tutorial, productivity, todayilearned",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 4,
		"description": "I have faced loads of situations where there is a large block of text which needs a particular action...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--cmMLwSAq--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/si56jzdixtyswfxasm7e.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-multiple-cursors-c67",
		"public_reactions_count": 10,
		"processed_html": "\u003cp\u003eI have faced loads of situations where there is a large block of text which needs a particular action performed per line. This can easily be done using a macro in vim. But when we use vim, we care about efficiency. So we will be seeing how it can be done by using the \u003ccode\u003evisual block mode\u003c/code\u003e in vim.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"visual-block-mode\" href=\"#visual-block-mode\"\u003e\n  \u003c/a\u003e\n  Visual Block Mode\n\u003c/h2\u003e\n\n\u003cp\u003eThe visual block mode in vim is used to visually select multiple lines/block of text in vim and perform a certain action on it. This action can be anything ranging from an insertion to a deletion. This action is then reflected in each and every line of the block of text just like you would use multiple cursors in an IDE like VS Code. \u003c/p\u003e\n\n\u003cp\u003eTo activate visual block mode, press \u003cstrong\u003eCtrl + v\u003c/strong\u003e. Now you can select lines horizontally/vertically by using the navigation keys:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[num]h|j|k|l\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eOnce you select a block of text, you can press any of the vim's keybindings for performing actions on the block. For example, you can press \u003cstrong\u003ed\u003c/strong\u003e to delete the block.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"line-by-line-operation-in-visual-block-mode\" href=\"#line-by-line-operation-in-visual-block-mode\"\u003e\n  \u003c/a\u003e\n  Line by line operation in visual block mode\n\u003c/h2\u003e\n\n\u003cp\u003eTo insert/delete text on a line-by-line basis, press \u003cstrong\u003eI\u003c/strong\u003e to go into insert mode in the visual block or \u003cstrong\u003eA\u003c/strong\u003e to go into append mode. Once you do that, It will deselect the block and take you to the top line. Perform your desired action there and press escape. This action will then be reflected in each and very line of the visual block.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Fey6Nu3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lpue4p5js0b75czf5wk9.gif\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Fey6Nu3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lpue4p5js0b75czf5wk9.gif\" alt=\"Visual Block Mode\" loading=\"lazy\" width=\"880\" height=\"505\" data-animated=\"true\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"incrementing-numbers-in-a-list\" href=\"#incrementing-numbers-in-a-list\"\u003e\n  \u003c/a\u003e\n  Incrementing numbers in a list\n\u003c/h2\u003e\n\n\u003cp\u003eImagine that you have to make a long list of incremental numbers. What would you do? \u003c/p\u003e\n\n\u003cp\u003eThere is a very easy way to do this in vim using the visual block mode. Let us say we need to write numbers from 1 to 100. Follow the following steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWrite 1 and a newline and copy it a 100 times by typing: \u003cstrong\u003ey1j\u003c/strong\u003e. Now paste it a 100 times using \u003cstrong\u003e100p\u003c/strong\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGo to the visual block mode \u003cstrong\u003eCtrl + v\u003c/strong\u003e and select the number block from the second 1, using \u003cstrong\u003e99j\u003c/strong\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePress \u003cstrong\u003eg\u003c/strong\u003e and then \u003cstrong\u003eCtrl a\u003c/strong\u003e. The latter is used to increment numbers and the former makes sure that the global context of numbers in a visual block is realized.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XVDxJDHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/egracmuld8fk04ftxyh5.gif\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XVDxJDHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/egracmuld8fk04ftxyh5.gif\" alt=\"Increment Integers\" loading=\"lazy\" width=\"880\" height=\"522\" data-animated=\"true\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"indenting-a-block-of-code\" href=\"#indenting-a-block-of-code\"\u003e\n  \u003c/a\u003e\n  Indenting a block of code\n\u003c/h2\u003e\n\n\u003cp\u003eA block of code can be effortlessly indented using the visual block mode. Select a block using \u003cstrong\u003eCtrl + v\u003c/strong\u003e and the navigation keys. Then hit \u003cstrong\u003e\u0026gt;\u0026gt;\u003c/strong\u003e for right indentation and \u003cstrong\u003e\u0026lt;\u0026lt;\u003c/strong\u003e for left indentation.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eo\u003c/strong\u003e button can be used to go to the other side of the selected text in visual block mode, in addition to using \u003cstrong\u003e$\u003c/strong\u003e. The latter will take you to the end of a line rather than the end of the highlighted block.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Sh9awoAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bsabv3fi8auf6nlx8275.gif\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Sh9awoAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bsabv3fi8auf6nlx8275.gif\" alt=\"Indentation\" loading=\"lazy\" width=\"880\" height=\"505\" data-animated=\"true\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-multiple-cursors-c67",
		"social_image": null,
		"title": "Vim to the rescue: Multiple Cursors",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-04-27T10:41:19.349Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-06-06T04:29:59.375Z",
		"published_at": "2020-05-26T15:21:08.088Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "## Introduction\n\nHow many times have you ran a command on your terminal and copy pasted its output to vim? Maybe you want to include some terminal output data, or maybe you want to create an issue on github by editing it in vim first. \n\nIn this blog we will be learning how to get the output of shell commands in your current vim buffer. \n\nFor reference, here is what we are going to achieve:\n\n{% youtube euwcDjaBOxI %}\n\n\n## Getting the output of a script\n\n* You can take the output of any shell script and paste it after your cursor position by using the following command:\n\n```vimscript\n\" . means current line\n:.! \u003cshell_command\u003e\n```\n\n* Additionally you can take your cursor to the position where the command output ends:\n\n```vimscript\n:r! \u003cshell_command\u003e\n```\n\n* The best part about this is that you can use the text inside your vim buffer and pass it through the command line. For example if your current buffer contains something like this:\n\n```\nMy cow says:\n\ncowsay \"Hello, World\"\n```\n\nYou can go over to the cowsay command and press the following keys to get the output right in your buffer:\n\n```vimscript\n\" passes the current line through a shell\n:.!$SHELL\n```\n\nYou will get an output like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/om9i6q9xkz9is80tm1yz.png)\n\n* Not only this, you can take the text from any line and paste its output:\n\n```vimscript\n\" takes the text in the 5th line as input\n:5!$SHELL\n```\n\n## Mapping the madness\n\nI have mapped `\u003cShift\u003e + q` to the `.!$SHELL` command. So pressing the keybinding instantaneously returns the output of the current line when ran through a shell.\n\n```vimscript\nnoremap Q !!$SHELL\u003cCR\u003e\n```\n",
		"cached_tag_list": "vim, todayilearned, productivity, linux",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 1,
		"description": "Introduction   How many times have you ran a command on your terminal and copy pasted its ou...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--3xqVYQUI--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/kj1tcgo9jn3mxv72nx0m.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-subduing-the-shell-2500",
		"public_reactions_count": 7,
		"processed_html": "\u003ch2\u003e\n  \u003ca name=\"introduction\" href=\"#introduction\"\u003e\n  \u003c/a\u003e\n  Introduction\n\u003c/h2\u003e\n\n\u003cp\u003eHow many times have you ran a command on your terminal and copy pasted its output to vim? Maybe you want to include some terminal output data, or maybe you want to create an issue on github by editing it in vim first. \u003c/p\u003e\n\n\u003cp\u003eIn this blog we will be learning how to get the output of shell commands in your current vim buffer. \u003c/p\u003e\n\n\u003cp\u003eFor reference, here is what we are going to achieve:\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/euwcDjaBOxI\" allowfullscreen loading=\"lazy\"\u003e\n\u003c/iframe\u003e\n\u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"getting-the-output-of-a-script\" href=\"#getting-the-output-of-a-script\"\u003e\n  \u003c/a\u003e\n  Getting the output of a script\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou can take the output of any shell script and paste it after your cursor position by using the following command:\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\" . means current line\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:.!\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003eshell_command\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eAdditionally you can take your cursor to the position where the command output ends:\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003eshell_command\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe best part about this is that you can use the text inside your vim buffer and pass it through the command line. For example if your current buffer contains something like this:\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eMy cow says:\n\ncowsay \"Hello, World\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYou can go over to the cowsay command and press the following keys to get the output right in your buffer:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\" passes the current line through a shell\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:.!\u003c/span\u003e$SHELL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYou will get an output like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O80J9Fi7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/om9i6q9xkz9is80tm1yz.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O80J9Fi7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/om9i6q9xkz9is80tm1yz.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"506\" height=\"315\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNot only this, you can take the text from any line and paste its output:\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\" takes the text in the 5th line as input\u003c/span\u003e\n\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"m\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e$SHELL\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003ch2\u003e\n  \u003ca name=\"mapping-the-madness\" href=\"#mapping-the-madness\"\u003e\n  \u003c/a\u003e\n  Mapping the madness\n\u003c/h2\u003e\n\n\u003cp\u003eI have mapped \u003ccode\u003e\u0026lt;Shift\u0026gt; + q\u003c/code\u003e to the \u003ccode\u003e.!$SHELL\u003c/code\u003e command. So pressing the keybinding instantaneously returns the output of the current line when ran through a shell.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003enoremap\u003c/span\u003e Q \u003cspan class=\"p\"\u003e!!\u003c/span\u003e$SHELL\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-subduing-the-shell-2500",
		"social_image": null,
		"title": "Vim to the rescue: Subduing the Shell",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-01T14:43:09.861Z",
		"crossposted_at": null,
		"edited_at": "2020-05-14T11:32:36.839Z",
		"last_comment_at": "2020-05-14T11:08:24.204Z",
		"published_at": "2020-05-14T11:08:24.204Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "## Introduction\n\nI was recently working on some C++ code using vim and had to switch to a terminal to compile the code everytime I wanted to test it. Granted that this problem can be solved by installing a plugin which compiles on save, but I wanted an intuitive attached terminal instead.\n\nThe problem with terminals inside vim is that they open either in a new tab or in a new split pane. By default, a terminal in vim looks like this:\n\n```\n:term\n```\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/z558w3qtckhz53yy92sc.png)\n\n---\n\n## What can be better\n\nIn the screenshot above, there are a few problems:\n\n* The split pane is too big, and occupies half of the screen\n* You have to enter a command everytime you want a terminal, it is slow\n* The split pane opens up in the top part of the screen by default\n\n---\n\n## What we want to achieve\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/zcusgrmeti1vp8fvqmkd.png)\n\nThe benefits we get here are:\n\n* The terminal opens at the bottom (like it should)\n* The size of the attached terminal is ideal\n* The whole action is bound to a key, so it is fast\n\nTo configure your attached terminal this way, you can add the following lines in your **.vimrc**:\n\n```vimscript\n\" SpawnTern function\n\" To add a terminal at the bottom\nfunction SpawnTern()\n\t\" spawn terminal below\n\tbel term\n\n\t\" Decrease split size by 15 words\n\t15winc -\nendfunction\n\n\" We bind the control+x keys to spawn the terminal\nnoremap \u003cc-x\u003e :call SpawnTern()\u003cCR\u003e\n```",
		"cached_tag_list": "vim, todayilearned, tutorial, productivity",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction   I was recently working on some C++ code using vim and had to switch to a term...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--nVH8keJQ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/b2ddkf07dthib4vwkm24.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-attached-terminal-3e9m",
		"public_reactions_count": 10,
		"processed_html": "\u003ch2\u003e\n  \u003ca name=\"introduction\" href=\"#introduction\"\u003e\n  \u003c/a\u003e\n  Introduction\n\u003c/h2\u003e\n\n\u003cp\u003eI was recently working on some C++ code using vim and had to switch to a terminal to compile the code everytime I wanted to test it. Granted that this problem can be solved by installing a plugin which compiles on save, but I wanted an intuitive attached terminal instead.\u003c/p\u003e\n\n\u003cp\u003eThe problem with terminals inside vim is that they open either in a new tab or in a new split pane. By default, a terminal in vim looks like this:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e:term\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0zJNTkvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z558w3qtckhz53yy92sc.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0zJNTkvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z558w3qtckhz53yy92sc.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"what-can-be-better\" href=\"#what-can-be-better\"\u003e\n  \u003c/a\u003e\n  What can be better\n\u003c/h2\u003e\n\n\u003cp\u003eIn the screenshot above, there are a few problems:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe split pane is too big, and occupies half of the screen\u003c/li\u003e\n\u003cli\u003eYou have to enter a command everytime you want a terminal, it is slow\u003c/li\u003e\n\u003cli\u003eThe split pane opens up in the top part of the screen by default\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"what-we-want-to-achieve\" href=\"#what-we-want-to-achieve\"\u003e\n  \u003c/a\u003e\n  What we want to achieve\n\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FsVWU_OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zcusgrmeti1vp8fvqmkd.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FsVWU_OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zcusgrmeti1vp8fvqmkd.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"485\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe benefits we get here are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe terminal opens at the bottom (like it should)\u003c/li\u003e\n\u003cli\u003eThe size of the attached terminal is ideal\u003c/li\u003e\n\u003cli\u003eThe whole action is bound to a key, so it is fast\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTo configure your attached terminal this way, you can add the following lines in your \u003cstrong\u003e.vimrc\u003c/strong\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\" SpawnTern function\u003c/span\u003e\n\u003cspan class=\"c\"\u003e\" To add a terminal at the bottom\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e SpawnTern\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e\" spawn terminal below\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ebel\u003c/span\u003e \u003cspan class=\"nb\"\u003eterm\u003c/span\u003e\n\n    \u003cspan class=\"c\"\u003e\" Decrease split size by 15 words\u003c/span\u003e\n    \u003cspan class=\"m\"\u003e15\u003c/span\u003e\u003cspan class=\"k\"\u003ewinc\u003c/span\u003e \u003cspan class=\"p\"\u003e-\u003c/span\u003e\n\u003cspan class=\"k\"\u003eendfunction\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e\" We bind the control+x keys to spawn the terminal\u003c/span\u003e\n\u003cspan class=\"nb\"\u003enoremap\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"k\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e-\u003c/span\u003e\u003cspan class=\"k\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003ecall\u003c/span\u003e SpawnTern\u003cspan class=\"p\"\u003e()\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-attached-terminal-3e9m",
		"social_image": null,
		"title": "Vim to the rescue: Attached Terminal",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-01T14:45:43.365Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-05-22T10:26:18.525Z",
		"published_at": "2020-05-21T04:07:59.806Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "Monsterwm is a dynamic tiling window manager forked from **dminimalwm**, which was inspired by dwm. It has a lot of similarities with dwm and feels like home for people who have used suckless tools. Read my blog on dwm to get additional insight on this particular *WM*, but you don't *need* to do so to understand this window manager:\n\n{% link https://dev.to/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji %}\n\nMonsterwm aims to keep its codebase under 700 SLOC (source lines of code), as compared to dwm's 2000 SLOC limit. It does so by removing the status bar altogether. It believes that the status bar should not be the responsibility of a window manager. \n\n* [Features](#features)\n* [Setting up](#setting-up)\n* [Layouts](#getting-started)\n* [Configuration and patching](#configuration-and-patching) \n  * [The monsterwm source](#the-monsterwm-source)\n  * [Changing keybindings](#changing-keybindings)\n  * [Installing patches](#installing-patches)\n  * [Setting up a status bar](#setting-up-a-status-bar)\n* [Verdict](#verdict)\n* [References](#references)\n\n---\n\n### Features\n\n* Monsterwm is only a single binary, and its source code is intended to never exceed 700 SLOC.\n\n* Customization is done by editing the source code, which is very easy to understand.\n\n* It is extremely fast and packed with bare essentials. Additional layouts and functionalities can be added by patching, as is the suckless anti-bloat philosophy. \n\n* It does not ship with a status bar, but outputs information about the desktop which external panels (like conky, dzen etc) can use. \n\n---\n\n### Setting Up\n\nExecute the following commands to get started with monsterwm:\n\n```sh\n# clone the source repository\ngit clone https://github.com/c00kiemon5ter/monsterwm.git\n\n# enter the directory\ncd monsterwm\n\n# run a clean installation\nmake clean install\n```\nNow simply add the following line in your `~/.xinitrc`:\n\n```sh\nexec monsterwm\n```\n\nNow that you are all set, logout and log back in again. Once you do, you will see a blank screen. \n\n\n\n---\n\n### Layouts\n\nTo spin up a terminal in monsterwm, just press the following: `\u003cAlt\u003e + \u003cshift\u003e + \u003cEnter\u003e`. If it doesn't work then checkout the [changing keybindings](#changing-keybindings) section where I talk about remapping the key bindings and customizing which terminal should open up. \n\nIf you keep on opening terminals up then you will notice that the focus shifts to the newest terminal in the stack. A stack is a LIFO (last in first out) data structure. Monsterwm makes sure that the most attention goes to the recently opened program. \n\nMonsterwm has the following layouts by default:\n\n* **Common tiling mode**: It is like the master and stack layout in dwm. The master comes on the left hand side. The focus is shifted to the newest spawn by default:\n\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/cxmelyl9kebsh3c5i23w.png)\n\n* **Bottom stack (bstack) tiling mode**: Here, the newly spawned windows are stacked in the bottom:\n\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/l448xy0fhqyh7rm1ju6c.png)\n\n* **Grid tiling mode**: In grid mode, each window is given an equal amount of space and thus windows tile themselves like a grid:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/um5tl0p2rk90ypsz98pv.png)\n\n* **Floating mode**: In addition to tiling modes, windows can also be made to float over each other: \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/l7dupghmt6rdpa81v5km.png)\n\n* In addition to these modes, monsterwm also has a monocle or fullscreen mode. Additional modes  (like fibionacci mode) can be added by patching, which we will se in the upcoming section. \n\n\n---\n\n### Configuration and Patching\n\nConfiguring and patching monsterwm might be difficult for beginners. The source code configuration file is similar to dwm, so if you have used dwm, then monsterwm will be even easier. \n\n---\n\n#### The Monsterwm Source\n\nUsing your terminal, go to whichever folder you have cloned monsterwm in and type `ls`.\n\nYou may notice the configuration files in the directory.\n\n`config.h` and `config.def.h` are the files that you will need to edit when you are configuring monsterwm.\n\nOpen the Makefile and edit clean recipe to add the following line of code in it:\n\n```\nrm config.h\n```\n\nThis will make sure that whenever you are configuring a patch, you won't have to make changes in both `config.h` as well as `config.def.h`. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/9tliwavtmbrcebp5x81n.png)\n\nNow whenever you make a change in the `config.def.h`, simply run `make clean install` for re-building monsterwm from scratch. Then logout and log back in again for the changes to take effect. Monsterwm requires its source to be rebuilt every time there is a configuration change, which is exactly like dwm.\n\n---\n\n#### Changing Keybindings\n\nOpen the `config.def.h` in vim.\n\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ut7p8x07amc81dks4x6t.png)\n\nThe `Key_key` array stores all of the keybindings. The modifier key (\u003cAlt\u003e by default) is named `MODKEY`. Shift is called `ShiftMask`. All other keys are prefixed by `XK_`. For example, if I am talking about the \"i\" key then I will write `XK_i`. If I am talking about \u003cEnter\u003e then I will write `XK_Return`. \n\nNow let us look at line 3, where the keybinding for opening up a terminal is defined. By default, this line is the following:\n\n```\n/* modifier            key       function        argument */\nMODKEY|ShiftMask     XK_Return    spawn         {.v = termcmd}\n```\nIt means that for `spawning` a terminal, you would have to hit `\u003cAlt\u003e + \u003cShift\u003e + \u003cEnter\u003e`. You can already see in the screenshot above, that I have removed `ShiftMask` from this line. So for opening up the terminal I simply do `\u003cAlt\u003e + \u003cEnter\u003e`. \n\nIn this way, by changing the modifier or keys, you can define custom keybindings. You can even add lines here to define some of your own keybindings. \n\nNow for the changes to take effect, simply compile the code again by running the following commands, log back in, and you are good to go:\n\n```\nmake clean install\n```\n\n---\n\n#### Installing patches\n\nSome extensions to monsterwm are supported in the form of patches. Easiest way to apply a patch, is to git merge that branch. Here is a list of patches for monsterwm:\n\n\n * [centerwindow]   : center new floating windows on the screen and  center any window with a shortcut\n * [fibonacci]      : adds fibonacci layout mode\n * [initlayouts]    : define initial layouts for every desktop\n * [monocleborders] : adds borders to the monocle layout\n * [nmaster]        : adds nmaster layout - multiple master windows for BSTACK and TILE layouts\n * [rectangle]      : draws only a rectangle when moving/resizing windows to keep resources low (ie through an ssh forwarded session)\n * [showhide]       : adds a function to show and hide all windows on all desktops\n * [uselessgaps]    : adds gaps around every window on screen\n * [warpcursor]     : cursors follows and is placed in the center of the current window\n * [windowtitles]   : along with the rest desktop info, output the title of the current window\n\n  [centerwindow]:   https://github.com/c00kiemon5ter/monsterwm/tree/centerwindow\n  [fibonacci]:      https://github.com/c00kiemon5ter/monsterwm/tree/fibonacci\n  [initlayouts]:    https://github.com/c00kiemon5ter/monsterwm/tree/initlayouts\n  [monocleborders]: https://github.com/c00kiemon5ter/monsterwm/tree/monocleborders\n  [nmaster]:        https://github.com/c00kiemon5ter/monsterwm/tree/nmaster\n  [rectangle]:      https://github.com/c00kiemon5ter/monsterwm/tree/rectangle\n  [showhide]:       https://github.com/c00kiemon5ter/monsterwm/tree/showhide\n  [uselessgaps]:    https://github.com/c00kiemon5ter/monsterwm/tree/uselessgaps\n  [warpcursor]:     https://github.com/c00kiemon5ter/monsterwm/tree/warpcursor\n  [windowtitles]:   https://github.com/c00kiemon5ter/monsterwm/tree/windowtitles\n\nLet us install the **fibonacci** layout. For doing so, simply run the following commands in the source repository:\n\n```sh\ngit merge origin/fibonacci\nmake clean install\n```\n\nAfter doing so, simply restart the window manager. Look in the config.def.h for the changes added (as well as the keybinding). Activating this patch will make your windows spawn like a spiral:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/k25ofxw8wzalwqwpxyyg.png)\n\n---\n\n#### Setting up a status bar\n\n\nMonsterwm does not support a status bar but allocates (by default) 18 pixel on the top part of the screen for a custom status bar. This allocation is of course customizable. Whenever we run **monsterwm**, it outputs the workspace information as a stream. This stream can then be piped and the output can be shown to a terminal. In the following case, I am outputting the monsterwm to a temporary file. Let us name this file **startup.monsterwm**\n\n```sh\n#!/bin/bash\n\nmonsterwm \u003e /tmp/monsterwm.fifo\n```\n\nIn my `.xinitrc`, I will add the following, instead of executing monsterwm directly:\n\n```\nexec startup.monsterwm\n```\n\nNow when my monsterwm is up and running, let us switch workspaces and see the terminal output by `catting` the file in which we are piping our output:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/94gedxgloeik3gni4c0m.gif)\n\nYou can see that it outputs real time information such as which monitor is being used, as well as how many windows are open per desktop. We can use this output as an input to dzen to show a status bar like this:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/5p86km1unfg4m7tgp2de.png)\n\nCheck out [these gists](https://gist.github.com/c00kiemon5ter/1905427) for some ready made scripts for setting up status bars. Copy any script you like to a file, and exec that in your `.xinitrc`. \n\n\n---\n\n### Verdict\n\nFor those of you who thought dwm was minimal, monsterwm goes one step ahead to ensure a separation of concern between a window manager and its status bar, stripping down a lot of code in the process. It is one of the most lightweight and fast window managers. \n\nMonsterwm is difficult to configure than your traditional window manager (like awesome or i3). But its patches are stable and do not break with monsterwm versions (ahem ahem dwm). Documentation can come from multiple sources since its configuration is almost exactly like dwm.\n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: |\n| Learning curve (lesser is better)| :heart: :heart: :heart: :heart: |\n| Productivity | :heart: :heart: :heart: :heart: |\n| Fun | :heart: :heart: :heart: :heart: :heart: |\n\n---\n\n### References\n\n* [Suckless Philosophy](https://dev.to/l04db4l4nc3r/what-is-suckless-all-about-4hp)\n* [Official Repository](https://github.com/c00kiemon5ter/monsterwm)\n* [My configuration](https://github.com/L04DB4L4NC3R/monsterwm-config)",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 2,
		"description": "Monsterwm is a dynamic tiling window manager forked from dminimalwm, which was inspired by dwm. It ha...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--jVbh0DIS--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/58xuum6eiqvpto0h3bq4.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/monsterwm-700-lines-of-pure-beast-hl4",
		"public_reactions_count": 29,
		"processed_html": "\u003cp\u003eMonsterwm is a dynamic tiling window manager forked from \u003cstrong\u003edminimalwm\u003c/strong\u003e, which was inspired by dwm. It has a lot of similarities with dwm and feels like home for people who have used suckless tools. Read my blog on dwm to get additional insight on this particular \u003cem\u003eWM\u003c/em\u003e, but you don't \u003cem\u003eneed\u003c/em\u003e to do so to understand this window manager:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag__link\"\u003e\n  \u003ca href=\"/l04db4l4nc3r\" class=\"ltag__link__link\"\u003e\n    \u003cdiv class=\"ltag__link__pic\"\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Llv5B6bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---Q54OzKD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197603/a4320666-6350-4843-b37e-07bcfa168f55.png\" alt=\"l04db4l4nc3r\" loading=\"lazy\"\u003e\n    \u003c/div\u003e\n  \u003c/a\u003e\n  \u003ca href=\"/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji\" class=\"ltag__link__link\"\u003e\n    \u003cdiv class=\"ltag__link__content\"\u003e\n      \u003ch2\u003eDwm: The Suckless Window Manager\u003c/h2\u003e\n      \u003ch3\u003eAngad Sharma ・ Apr 7 '20 ・ 7 min read\u003c/h3\u003e\n      \u003cdiv class=\"ltag__link__taglist\"\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#linux\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#opensource\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#ubuntu\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eMonsterwm aims to keep its codebase under 700 SLOC (source lines of code), as compared to dwm's 2000 SLOC limit. It does so by removing the status bar altogether. It believes that the status bar should not be the responsibility of a window manager. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#features\"\u003eFeatures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up\"\u003eSetting up\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#getting-started\"\u003eLayouts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"#configuration-and-patching\"\u003eConfiguration and patching\u003c/a\u003e \n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#the-monsterwm-source\"\u003eThe monsterwm source\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#changing-keybindings\"\u003eChanging keybindings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#installing-patches\"\u003eInstalling patches\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#setting-up-a-status-bar\"\u003eSetting up a status bar\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#verdict\"\u003eVerdict\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eMonsterwm is only a single binary, and its source code is intended to never exceed 700 SLOC.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCustomization is done by editing the source code, which is very easy to understand.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt is extremely fast and packed with bare essentials. Additional layouts and functionalities can be added by patching, as is the suckless anti-bloat philosophy. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt does not ship with a status bar, but outputs information about the desktop which external panels (like conky, dzen etc) can use. \u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"setting-up\" href=\"#setting-up\"\u003e\n  \u003c/a\u003e\n  Setting Up\n\u003c/h3\u003e\n\n\u003cp\u003eExecute the following commands to get started with monsterwm:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# clone the source repository\u003c/span\u003e\ngit clone https://github.com/c00kiemon5ter/monsterwm.git\n\n\u003cspan class=\"c\"\u003e# enter the directory\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecd \u003c/span\u003emonsterwm\n\n\u003cspan class=\"c\"\u003e# run a clean installation\u003c/span\u003e\nmake clean \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNow simply add the following line in your \u003ccode\u003e~/.xinitrc\u003c/code\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eexec \u003c/span\u003emonsterwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNow that you are all set, logout and log back in again. Once you do, you will see a blank screen. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"layouts\" href=\"#layouts\"\u003e\n  \u003c/a\u003e\n  Layouts\n\u003c/h3\u003e\n\n\u003cp\u003eTo spin up a terminal in monsterwm, just press the following: \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;shift\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e. If it doesn't work then checkout the \u003ca href=\"#changing-keybindings\"\u003echanging keybindings\u003c/a\u003e section where I talk about remapping the key bindings and customizing which terminal should open up. \u003c/p\u003e\n\n\u003cp\u003eIf you keep on opening terminals up then you will notice that the focus shifts to the newest terminal in the stack. A stack is a LIFO (last in first out) data structure. Monsterwm makes sure that the most attention goes to the recently opened program. \u003c/p\u003e\n\n\u003cp\u003eMonsterwm has the following layouts by default:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eCommon tiling mode\u003c/strong\u003e: It is like the master and stack layout in dwm. The master comes on the left hand side. The focus is shifted to the newest spawn by default:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iIRUDL-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cxmelyl9kebsh3c5i23w.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iIRUDL-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cxmelyl9kebsh3c5i23w.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eBottom stack (bstack) tiling mode\u003c/strong\u003e: Here, the newly spawned windows are stacked in the bottom:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2iHul1c6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l448xy0fhqyh7rm1ju6c.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2iHul1c6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l448xy0fhqyh7rm1ju6c.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eGrid tiling mode\u003c/strong\u003e: In grid mode, each window is given an equal amount of space and thus windows tile themselves like a grid:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WfZ4X0vx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/um5tl0p2rk90ypsz98pv.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WfZ4X0vx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/um5tl0p2rk90ypsz98pv.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eFloating mode\u003c/strong\u003e: In addition to tiling modes, windows can also be made to float over each other: \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dVNHp7e6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l7dupghmt6rdpa81v5km.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dVNHp7e6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l7dupghmt6rdpa81v5km.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIn addition to these modes, monsterwm also has a monocle or fullscreen mode. Additional modes  (like fibionacci mode) can be added by patching, which we will se in the upcoming section. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"configuration-and-patching\" href=\"#configuration-and-patching\"\u003e\n  \u003c/a\u003e\n  Configuration and Patching\n\u003c/h3\u003e\n\n\u003cp\u003eConfiguring and patching monsterwm might be difficult for beginners. The source code configuration file is similar to dwm, so if you have used dwm, then monsterwm will be even easier. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"the-monsterwm-source\" href=\"#the-monsterwm-source\"\u003e\n  \u003c/a\u003e\n  The Monsterwm Source\n\u003c/h4\u003e\n\n\u003cp\u003eUsing your terminal, go to whichever folder you have cloned monsterwm in and type \u003ccode\u003els\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may notice the configuration files in the directory.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003econfig.h\u003c/code\u003e and \u003ccode\u003econfig.def.h\u003c/code\u003e are the files that you will need to edit when you are configuring monsterwm.\u003c/p\u003e\n\n\u003cp\u003eOpen the Makefile and edit clean recipe to add the following line of code in it:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003erm config.h\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis will make sure that whenever you are configuring a patch, you won't have to make changes in both \u003ccode\u003econfig.h\u003c/code\u003e as well as \u003ccode\u003econfig.def.h\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TIgiD0A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9tliwavtmbrcebp5x81n.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TIgiD0A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9tliwavtmbrcebp5x81n.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"680\" height=\"141\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNow whenever you make a change in the \u003ccode\u003econfig.def.h\u003c/code\u003e, simply run \u003ccode\u003emake clean install\u003c/code\u003e for re-building monsterwm from scratch. Then logout and log back in again for the changes to take effect. Monsterwm requires its source to be rebuilt every time there is a configuration change, which is exactly like dwm.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"changing-keybindings\" href=\"#changing-keybindings\"\u003e\n  \u003c/a\u003e\n  Changing Keybindings\n\u003c/h4\u003e\n\n\u003cp\u003eOpen the \u003ccode\u003econfig.def.h\u003c/code\u003e in vim.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ma6IEPKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ut7p8x07amc81dks4x6t.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Ma6IEPKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ut7p8x07amc81dks4x6t.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"565\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eKey_key\u003c/code\u003e array stores all of the keybindings. The modifier key ( by default) is named \u003ccode\u003eMODKEY\u003c/code\u003e. Shift is called \u003ccode\u003eShiftMask\u003c/code\u003e. All other keys are prefixed by \u003ccode\u003eXK_\u003c/code\u003e. For example, if I am talking about the \"i\" key then I will write \u003ccode\u003eXK_i\u003c/code\u003e. If I am talking about  then I will write \u003ccode\u003eXK_Return\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eNow let us look at line 3, where the keybinding for opening up a terminal is defined. By default, this line is the following:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/* modifier            key       function        argument */\nMODKEY|ShiftMask     XK_Return    spawn         {.v = termcmd}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIt means that for \u003ccode\u003espawning\u003c/code\u003e a terminal, you would have to hit \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Shift\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e. You can already see in the screenshot above, that I have removed \u003ccode\u003eShiftMask\u003c/code\u003e from this line. So for opening up the terminal I simply do \u003ccode\u003e\u0026lt;Alt\u0026gt; + \u0026lt;Enter\u0026gt;\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eIn this way, by changing the modifier or keys, you can define custom keybindings. You can even add lines here to define some of your own keybindings. \u003c/p\u003e\n\n\u003cp\u003eNow for the changes to take effect, simply compile the code again by running the following commands, log back in, and you are good to go:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emake clean install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"installing-patches\" href=\"#installing-patches\"\u003e\n  \u003c/a\u003e\n  Installing patches\n\u003c/h4\u003e\n\n\u003cp\u003eSome extensions to monsterwm are supported in the form of patches. Easiest way to apply a patch, is to git merge that branch. Here is a list of patches for monsterwm:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/centerwindow\"\u003ecenterwindow\u003c/a\u003e   : center new floating windows on the screen and  center any window with a shortcut\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/fibonacci\"\u003efibonacci\u003c/a\u003e      : adds fibonacci layout mode\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/initlayouts\"\u003einitlayouts\u003c/a\u003e    : define initial layouts for every desktop\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/monocleborders\"\u003emonocleborders\u003c/a\u003e : adds borders to the monocle layout\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/nmaster\"\u003enmaster\u003c/a\u003e        : adds nmaster layout - multiple master windows for BSTACK and TILE layouts\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/rectangle\"\u003erectangle\u003c/a\u003e      : draws only a rectangle when moving/resizing windows to keep resources low (ie through an ssh forwarded session)\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/showhide\"\u003eshowhide\u003c/a\u003e       : adds a function to show and hide all windows on all desktops\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/uselessgaps\"\u003euselessgaps\u003c/a\u003e    : adds gaps around every window on screen\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/warpcursor\"\u003ewarpcursor\u003c/a\u003e     : cursors follows and is placed in the center of the current window\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm/tree/windowtitles\"\u003ewindowtitles\u003c/a\u003e   : along with the rest desktop info, output the title of the current window\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet us install the \u003cstrong\u003efibonacci\u003c/strong\u003e layout. For doing so, simply run the following commands in the source repository:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003egit merge origin/fibonacci\nmake clean \u003cspan class=\"nb\"\u003einstall\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eAfter doing so, simply restart the window manager. Look in the config.def.h for the changes added (as well as the keybinding). Activating this patch will make your windows spawn like a spiral:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UgJJbSwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k25ofxw8wzalwqwpxyyg.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UgJJbSwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k25ofxw8wzalwqwpxyyg.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"setting-up-a-status-bar\" href=\"#setting-up-a-status-bar\"\u003e\n  \u003c/a\u003e\n  Setting up a status bar\n\u003c/h4\u003e\n\n\u003cp\u003eMonsterwm does not support a status bar but allocates (by default) 18 pixel on the top part of the screen for a custom status bar. This allocation is of course customizable. Whenever we run \u003cstrong\u003emonsterwm\u003c/strong\u003e, it outputs the workspace information as a stream. This stream can then be piped and the output can be shown to a terminal. In the following case, I am outputting the monsterwm to a temporary file. Let us name this file \u003cstrong\u003estartup.monsterwm\u003c/strong\u003e\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\nmonsterwm \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /tmp/monsterwm.fifo\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIn my \u003ccode\u003e.xinitrc\u003c/code\u003e, I will add the following, instead of executing monsterwm directly:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eexec startup.monsterwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eNow when my monsterwm is up and running, let us switch workspaces and see the terminal output by \u003ccode\u003ecatting\u003c/code\u003e the file in which we are piping our output:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3B6fPJ1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/94gedxgloeik3gni4c0m.gif\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3B6fPJ1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/94gedxgloeik3gni4c0m.gif\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"491\" data-animated=\"true\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can see that it outputs real time information such as which monitor is being used, as well as how many windows are open per desktop. We can use this output as an input to dzen to show a status bar like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nVh3QEL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5p86km1unfg4m7tgp2de.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nVh3QEL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5p86km1unfg4m7tgp2de.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"235\" height=\"21\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eCheck out \u003ca href=\"https://gist.github.com/c00kiemon5ter/1905427\"\u003ethese gists\u003c/a\u003e for some ready made scripts for setting up status bars. Copy any script you like to a file, and exec that in your \u003ccode\u003e.xinitrc\u003c/code\u003e. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h3\u003e\n\n\u003cp\u003eFor those of you who thought dwm was minimal, monsterwm goes one step ahead to ensure a separation of concern between a window manager and its status bar, stripping down a lot of code in the process. It is one of the most lightweight and fast window managers. \u003c/p\u003e\n\n\u003cp\u003eMonsterwm is difficult to configure than your traditional window manager (like awesome or i3). But its patches are stable and do not break with monsterwm versions (ahem ahem dwm). Documentation can come from multiple sources since its configuration is almost exactly like dwm.\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/l04db4l4nc3r/what-is-suckless-all-about-4hp\"\u003eSuckless Philosophy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/c00kiemon5ter/monsterwm\"\u003eOfficial Repository\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/monsterwm-config\"\u003eMy configuration\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "monsterwm-700-lines-of-pure-beast-hl4",
		"social_image": null,
		"title": "Monsterwm: 700 lines of pure beast",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-11T16:10:24.553Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-06-01T12:07:33.190Z",
		"published_at": "2020-06-01T12:07:33.190Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "## Introduction\n\nSome time ago, I was writing my resume. People suggested writing it in [LaTeX](https://www.latex-project.org/get/). So I started reading up on it. Then I stumbled upon a tool called [groff](https://www.gnu.org/software/groff/) and found it much easier, faster and less bloat than LaTeX. \n\nBoth of these tools are used to write documents that can be converted into PDFs. I wanted a solution in vim so that I could live preview these PDFs as I was writing them. So I decided to make a vim plugin that does so:\n\n{% github L04DB4L4NC3R/texgroff.vim %}\n\nIt supports LaTeX, groff, as well as markdown.\n\n---\n\n## What we are going to use\n\n* **Zathura**: It is a very minimalist PDF reader for vim users.\n* **Groff**: The GNU document parser. It is installed by default on most linux systems\n* **Pandoc**: It is the general purpose document conversion tool. See my blog on pandoc:\n\n{% link https://dev.to/l04db4l4nc3r/presentable-dev-posts-with-pandoc-56pc %}\n\nAll of these tools are already available in most official linux repositories and can be downloaded using your vanilla packet manager:\n\n```sh\nsudo apt install groff pandoc zathura\n```\n\nOn Arch based distros, `zathura-pdf-poppler` needs to be downloaded in addition. \n\n---\n\n## What we want\n\nWe want that the `\\ + q` keybinding to compile the document we are working on into a PDF and the `\\ + p` keybinding to preview the PDF in zathura after compiling it.\n\n\n```sh\n# Compiling Markdown to PDF:\npandoc curr.md -s -o /tmp/op.pdf\n\n# Compiling LaTeX to PDF: \npandoc -f latex -t latex curr.tex -o /tmp/op.pdf\n\n# Compiling Groff (ms macro) to PDF:\ngroff -ms curr.ms -T pdf \u003e /tmp/op.pdf\n```\n\n---\n\n## Getting to the vim script\n\nThe following code divides the process into 2 functions, namely `Compile` and `Preview`. The former checks our current file type and applies the appropriate compilation command to it. The latter opens up the output PDF in zathura. Add the following code in your **~/.vimrc**:\n\n\n```vimscript\nlet mapleader=\"\\\\\"\n\n\" Call compile\n\" Open the PDF from /tmp/\nfunction! Preview()\n\t\t:call Compile()\u003cCR\u003e\u003cCR\u003e\n\t\texecute \"! zathura /tmp/op.pdf \u0026\"\nendfunction\n\n\" [1] Get the extension of the file\n\" [2] Apply appropriate compilation command\n\" [3] Save PDF as /tmp/op.pdf\nfunction! Compile()\n\t\tlet extension = expand('%:e')\n\t\tif extension == \"ms\"\n\t\t\t\texecute \"! groff -ms % -T pdf \u003e /tmp/op.pdf\"\n\t\telseif extension == \"tex\"\n\t\t\t\texecute \"! pandoc -f latex -t latex % -o /tmp/op.pdf\"\n\t\telseif extension == \"md\"\n\t\t\t\texecute \"! pandoc % -s -o /tmp/op.pdf\"\n\t\tendif\nendfunction\n\n\" map \\ + p to preview\nnoremap \u003cleader\u003ep :call Preview()\u003cCR\u003e\u003cCR\u003e\u003cCR\u003e\n\n\" map \\ + q to compile\nnoremap \u003cleader\u003eq :call Compile()\u003cCR\u003e\u003cCR\u003e\n```\n\nWhen we press preview, our zathura instance opens up. Now the best thing about zathura is that it watches the opened file. So after you press preview for the very first time, you don't have to press it again. Simply compile to view the changes in the PDF. Here is what our extension looks like:\n\n{% youtube s4gVmJafKf0 %}\n",
		"cached_tag_list": "vim, todayilearned, tutorial, productivity",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction   Some time ago, I was writing my resume. People suggested writing it in LaTeX....",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--SkBVlTSu--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/cgl903ugf8afzvixj6t1.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/vim-to-the-rescue-pdf-preview-2e10",
		"public_reactions_count": 8,
		"processed_html": "\u003ch2\u003e\n  \u003ca name=\"introduction\" href=\"#introduction\"\u003e\n  \u003c/a\u003e\n  Introduction\n\u003c/h2\u003e\n\n\u003cp\u003eSome time ago, I was writing my resume. People suggested writing it in \u003ca href=\"https://www.latex-project.org/get/\"\u003eLaTeX\u003c/a\u003e. So I started reading up on it. Then I stumbled upon a tool called \u003ca href=\"https://www.gnu.org/software/groff/\"\u003egroff\u003c/a\u003e and found it much easier, faster and less bloat than LaTeX. \u003c/p\u003e\n\n\u003cp\u003eBoth of these tools are used to write documents that can be converted into PDFs. I wanted a solution in vim so that I could live preview these PDFs as I was writing them. So I decided to make a vim plugin that does so:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag-github-readme-tag\"\u003e\n  \u003cdiv class=\"readme-overview\"\u003e\n    \u003ch2\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003e\n      \u003ca href=\"https://github.com/L04DB4L4NC3R\"\u003e\n        L04DB4L4NC3R\n      \u003c/a\u003e / \u003ca style=\"font-weight: 600;\" href=\"https://github.com/L04DB4L4NC3R/texgroff.vim\"\u003e\n        texgroff.vim\n      \u003c/a\u003e\n    \u003c/h2\u003e\n    \u003ch3\u003e\n      A plugin to open groff output pdf in preview\n    \u003c/h3\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"ltag-github-body\"\u003e\n    \n\u003cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003e\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ch1 dir=\"auto\"\u003e\ntexgroff.vim\u003c/h1\u003e\n\u003cp dir=\"auto\"\u003eA plugin to open groff/latex/markdown live pdf preview\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 dir=\"auto\"\u003e\nRequirements\u003c/h3\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cstrong\u003egroff\u003c/strong\u003e with the \u003ccode\u003egroff_ms\u003c/code\u003e macro\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003epandoc\u003c/strong\u003e for markdown and latex\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ezathura\u003c/strong\u003e pdf viewer\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 dir=\"auto\"\u003e\nInstallation\u003c/h3\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eWithout vim package management system\u003c/code\u003e: Copy the main.vim file to your \u003ccode\u003e.vim/autoload\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003ePathogen\u003c/code\u003e:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight highlight-source-shell notranslate position-relative overflow-auto js-code-highlight\" data-snippet-clipboard-copy-content=\"git clone https://github.com/L04DB4L4NC3R/texgroff.vim ~/.vim/bundle/texgroff.vim\"\u003e\n\u003cpre\u003egit clone https://github.com/L04DB4L4NC3R/texgroff.vim \u003cspan class=\"pl-k\"\u003e~\u003c/span\u003e/.vim/bundle/texgroff.vim\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003chr\u003e\n\u003ch3 dir=\"auto\"\u003e\nKeybindings\u003c/h3\u003e\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"center\"\u003eLeader\u003c/th\u003e\n\u003cth align=\"center\"\u003eKey\u003c/th\u003e\n\u003cth align=\"center\"\u003eAction\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e/\u003c/td\u003e\n\u003ctd align=\"center\"\u003ep\u003c/td\u003e\n\u003ctd align=\"center\"\u003eOpen live PDF Preview\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"center\"\u003e/\u003c/td\u003e\n\u003ctd align=\"center\"\u003eq\u003c/td\u003e\n\u003ctd align=\"center\"\u003eCompile groff(.ms)/latex(.tex)/markdown(.md)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\u003chr\u003e\n\u003ch3 dir=\"auto\"\u003e\nDemonstration\u003c/h3\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://youtu.be/s4gVmJafKf0\" rel=\"nofollow\"\u003eView the demo on Youtube\u003c/a\u003e\u003c/p\u003e\n\n\n\u003cp dir=\"auto\"\u003eMade with \u003cg-emoji class=\"g-emoji\" alias=\"heart\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2764.png\"\u003e❤️\u003c/g-emoji\u003e by Angad Sharma\u003c/p\u003e\n\n\u003c/article\u003e\u003c/div\u003e\n\u003cbr\u003e\n\u003cbr\u003e\n  \u003c/div\u003e\n\u003cbr\u003e\n  \u003cdiv class=\"gh-btn-container\"\u003e\u003ca class=\"gh-btn\" href=\"https://github.com/L04DB4L4NC3R/texgroff.vim\"\u003eView on GitHub\u003c/a\u003e\u003c/div\u003e\n\u003cbr\u003e\n\u003c/div\u003e\n\u003cbr\u003e\n\n\n\u003cp\u003eIt supports LaTeX, groff, as well as markdown.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"what-we-are-going-to-use\" href=\"#what-we-are-going-to-use\"\u003e\n  \u003c/a\u003e\n  What we are going to use\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eZathura\u003c/strong\u003e: It is a very minimalist PDF reader for vim users.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eGroff\u003c/strong\u003e: The GNU document parser. It is installed by default on most linux systems\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ePandoc\u003c/strong\u003e: It is the general purpose document conversion tool. See my blog on pandoc:\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003cdiv class=\"ltag__link\"\u003e\n  \u003ca href=\"/l04db4l4nc3r\" class=\"ltag__link__link\"\u003e\n    \u003cdiv class=\"ltag__link__pic\"\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Llv5B6bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---Q54OzKD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197603/a4320666-6350-4843-b37e-07bcfa168f55.png\" alt=\"l04db4l4nc3r\" loading=\"lazy\"\u003e\n    \u003c/div\u003e\n  \u003c/a\u003e\n  \u003ca href=\"/l04db4l4nc3r/presentable-dev-posts-with-pandoc-56pc\" class=\"ltag__link__link\"\u003e\n    \u003cdiv class=\"ltag__link__content\"\u003e\n      \u003ch2\u003ePresentable DEV posts with Pandoc\u003c/h2\u003e\n      \u003ch3\u003eAngad Sharma ・ Apr 21 '20 ・ 4 min read\u003c/h3\u003e\n      \u003cdiv class=\"ltag__link__taglist\"\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#tutorial\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#showdev\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#todayilearned\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#todayisearched\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eAll of these tools are already available in most official linux repositories and can be downloaded using your vanilla packet manager:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eapt \u003cspan class=\"nb\"\u003einstall \u003c/span\u003egroff pandoc zathura\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eOn Arch based distros, \u003ccode\u003ezathura-pdf-poppler\u003c/code\u003e needs to be downloaded in addition. \u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"what-we-want\" href=\"#what-we-want\"\u003e\n  \u003c/a\u003e\n  What we want\n\u003c/h2\u003e\n\n\u003cp\u003eWe want that the \u003ccode\u003e\\ + q\u003c/code\u003e keybinding to compile the document we are working on into a PDF and the \u003ccode\u003e\\ + p\u003c/code\u003e keybinding to preview the PDF in zathura after compiling it.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# Compiling Markdown to PDF:\u003c/span\u003e\npandoc curr.md \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e /tmp/op.pdf\n\n\u003cspan class=\"c\"\u003e# Compiling LaTeX to PDF: \u003c/span\u003e\npandoc \u003cspan class=\"nt\"\u003e-f\u003c/span\u003e latex \u003cspan class=\"nt\"\u003e-t\u003c/span\u003e latex curr.tex \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e /tmp/op.pdf\n\n\u003cspan class=\"c\"\u003e# Compiling Groff (ms macro) to PDF:\u003c/span\u003e\ngroff \u003cspan class=\"nt\"\u003e-ms\u003c/span\u003e curr.ms \u003cspan class=\"nt\"\u003e-T\u003c/span\u003e pdf \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e /tmp/op.pdf\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"getting-to-the-vim-script\" href=\"#getting-to-the-vim-script\"\u003e\n  \u003c/a\u003e\n  Getting to the vim script\n\u003c/h2\u003e\n\n\u003cp\u003eThe following code divides the process into 2 functions, namely \u003ccode\u003eCompile\u003c/code\u003e and \u003ccode\u003ePreview\u003c/code\u003e. The former checks our current file type and applies the appropriate compilation command to it. The latter opens up the output PDF in zathura. Add the following code in your \u003cstrong\u003e~/.vimrc\u003c/strong\u003e:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight viml\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003elet\u003c/span\u003e mapleader\u003cspan class=\"p\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\\\\\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e\" Call compile\u003c/span\u003e\n\u003cspan class=\"c\"\u003e\" Open the PDF from /tmp/\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e Preview\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003ecall\u003c/span\u003e Compile\u003cspan class=\"p\"\u003e()\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eexecute\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"! zathura /tmp/op.pdf \u0026amp;\"\u003c/span\u003e\n\u003cspan class=\"k\"\u003eendfunction\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e\" [1] Get the extension of the file\u003c/span\u003e\n\u003cspan class=\"c\"\u003e\" [2] Apply appropriate compilation command\u003c/span\u003e\n\u003cspan class=\"c\"\u003e\" [3] Save PDF as /tmp/op.pdf\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e!\u003c/span\u003e Compile\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n        \u003cspan class=\"k\"\u003elet\u003c/span\u003e extension \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eexpand\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'%:e'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e extension \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"ms\"\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eexecute\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"! groff -ms % -T pdf \u0026gt; /tmp/op.pdf\"\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelseif\u003c/span\u003e extension \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"tex\"\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eexecute\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"! pandoc -f latex -t latex % -o /tmp/op.pdf\"\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelseif\u003c/span\u003e extension \u003cspan class=\"p\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"md\"\u003c/span\u003e\n                \u003cspan class=\"nb\"\u003eexecute\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"! pandoc % -s -o /tmp/op.pdf\"\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eendif\u003c/span\u003e\n\u003cspan class=\"k\"\u003eendfunction\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e\" map \\ + p to preview\u003c/span\u003e\n\u003cspan class=\"nb\"\u003enoremap\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003eleader\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"k\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003ecall\u003c/span\u003e Preview\u003cspan class=\"p\"\u003e()\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e\" map \\ + q to compile\u003c/span\u003e\n\u003cspan class=\"nb\"\u003enoremap\u003c/span\u003e \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003eleader\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"k\"\u003eq\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"k\"\u003ecall\u003c/span\u003e Compile\u003cspan class=\"p\"\u003e()\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003eCR\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eWhen we press preview, our zathura instance opens up. Now the best thing about zathura is that it watches the opened file. So after you press preview for the very first time, you don't have to press it again. Simply compile to view the changes in the PDF. Here is what our extension looks like:\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/s4gVmJafKf0\" allowfullscreen loading=\"lazy\"\u003e\n\u003c/iframe\u003e\n\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "vim-to-the-rescue-pdf-preview-2e10",
		"social_image": null,
		"title": "Vim to the rescue: PDF Preview",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-14T11:17:11.669Z",
		"crossposted_at": null,
		"edited_at": "2020-07-02T16:31:30.681Z",
		"last_comment_at": "2020-05-15T07:39:41.085Z",
		"published_at": "2020-05-14T11:17:11.633Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "I was doing some digging and checking out varius RSS feeds and figured out that you can actually link your Medium articles to DEV! So whenever you publish something on Medium, the article is automatically added to your DEV dashboard as a draft. This can be done with other RSS providers also (not just medium). To enable this feature simply go to your DEV settings, to this page:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/1gve5b7pjow8erznslcq.png)\n\nExpect to see some of my popular medium articles on DEV in the coming few days :)",
		"cached_tag_list": "todayilearned, writing",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 2,
		"description": "I was doing some digging and checking out varius RSS feeds and figured out that you can actually link...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--uOucmfPX--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/vq8d24e0onh1z3pwp564.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/medium-blogs-on-dev-2e6a",
		"public_reactions_count": 4,
		"processed_html": "\u003cp\u003eI was doing some digging and checking out varius RSS feeds and figured out that you can actually link your Medium articles to DEV! So whenever you publish something on Medium, the article is automatically added to your DEV dashboard as a draft. This can be done with other RSS providers also (not just medium). To enable this feature simply go to your DEV settings, to this page:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qbT_YjkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1gve5b7pjow8erznslcq.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qbT_YjkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1gve5b7pjow8erznslcq.png\" alt=\"Alt Text\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eExpect to see some of my popular medium articles on DEV in the coming few days :)\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "medium-blogs-on-dev-2e6a",
		"social_image": null,
		"title": "Medium Blogs on DEV",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-14T16:30:57.581Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2017-01-01T05:00:00.000Z",
		"published_at": null,
		"canonical_url": null,
		"feed_source_url": "https://medium.com/@angadsharma1016/the-dispatcher-pat-man-of-processes-6370da07a211",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: The Dispatcher: pat-man of processes\npublished: false\ndate: 2019-05-05 10:24:07 UTC\ntags: process,os,programming,scheduler\ncanonical_url: \n---\n\n[![](https://cdn-images-1.medium.com/max/2600/0*q4BAxzKfOSzua7L-)](https://medium.com/@angadsharma1016/the-dispatcher-pat-man-of-processes-6370da07a211?source=rss-14899f3695b2------2)\n\nIntroduction\n\n[Continue reading on Medium »](https://medium.com/@angadsharma1016/the-dispatcher-pat-man-of-processes-6370da07a211?source=rss-14899f3695b2------2)",
		"cached_tag_list": "process, os, programming, scheduler",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Introduction  Continue reading on Medium »",
		"main_image": null,
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/the-dispatcher-pat-man-of-processes-22kl-temp-slug-8235452",
		"public_reactions_count": 0,
		"processed_html": "\u003cp\u003e\u003ca href=\"https://medium.com/@angadsharma1016/the-dispatcher-pat-man-of-processes-6370da07a211?source=rss-14899f3695b2------2\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6BuHK9ZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2600/0%2Aq4BAxzKfOSzua7L-\" alt=\"\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIntroduction\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://medium.com/@angadsharma1016/the-dispatcher-pat-man-of-processes-6370da07a211?source=rss-14899f3695b2------2\"\u003eContinue reading on Medium »\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": false,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "the-dispatcher-pat-man-of-processes-22kl-temp-slug-8235452",
		"social_image": null,
		"title": "The Dispatcher: pat-man of processes",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-14T16:30:57.995Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2017-01-01T05:00:00.000Z",
		"published_at": null,
		"canonical_url": null,
		"feed_source_url": "https://medium.com/gdg-vit/challenges-of-neo4j-at-the-heart-of-software-9c99dd11ac3c",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: Challenges of Neo4j at the heart of software\npublished: false\ndate: 2019-08-30 20:32:31 UTC\ntags: design,system,golang,neo4j\ncanonical_url: \n---\n\n![](https://cdn-images-1.medium.com/max/1024/0*GgqQ5x90-Br5JnMC)\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@maxvdo?utm_source=medium\u0026amp;utm_medium=referral\"\u003eMax van den Oetelaar\u003c/a\u003e on \u003ca href=\"https://unsplash.com?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\n\n**Introduction**\n\nNeo4j is a noSQL database which stores and represents data in the form of graphs. Each node of the graph has a specific tag which is used to identify the type of node. Edges between two nodes specify the relationship between the two nodes. The best use case of neo4j is in the case of highly embedded relational queries.\n\nNote, you can read my article on [setting up a go-neo4j ecosystem](https://medium.com/@angadsharma1016/optimizing-go-neo4j-concurrency-patterns-810dff25f88f) as a primer.\n\n**Hurdles to adoption**\n\nI started working on one of my biggest projects around last year. Since my learning mechanism solely revolves around using new technologies in real life projects, I was pretty keen on giving graph databases a go. It was then that I came across what came to be the backbone of my project, neo4j. But getting to this point wasn’t easy, mainly because of the following hurdles:\n\n- Lack of comprehensive documentation around neo4j drivers in golang (which my project was being written in).\n- Overall write-performance issues relative to SQL databases.\n- Lack of sophisticated indexing mechanisms.\n- Garbage collection pauses.\n\n![](https://cdn-images-1.medium.com/max/880/0*BWGjrqubK7uIDc06.png)\n\n**Understanding the WHY**\n\nNeo4j is a read friendly database. Which means that it is extremely fast when it comes to reading data. So much so that it paves a path to real time graph use cases.\n\nWhile being read friendly, writes still come at a cost. Mainly because of the following reasons:\n\n- Neo4j follows a master-slave architecture and writes are always done on the master. Even if you try to write on a slave, it will internally be cascaded to the master. When the master dies, a new one is elected automatically.\n\n![](https://cdn-images-1.medium.com/max/880/0*GWHICvIuO5qKOQzM.jpg)\n\n- All data resides on each machine. This is to protect referential integrity. Once data set search queries become larger than the available RAM, the system will slow down dramatically.\n- Neo4j is also not optimized for searching. Very much so when compared with technologies such as elasticsearch.\n- See the point about garbage collector pauses [here](https://qr.ae/TWrgCn)\n\n**Solving some of the problems at the application level**\n\nTo solve the problem of write latency, I made sure that all of the functions I wrote executed concurrently. But this didn’t stop the fact that there was still a bottleneck because writes are always done on one node. This raised the issue of mutual exclusion.\n\nWhile neo4j does not offer read locks on data, it does so for writes. But the locks are explicit in a lot of driver implementations. So I spent a lot of time debugging my code and fishing for errors which caused my bulk writes to crash. I then implemented mutex locks in the application layer itself. It was as simple as doing the following:\n\n```\n// create a new node with given label and participant data struct (FOR COORDINATORS)\nfunc CreateParticipant(e Event, label string, c chan error, mutex \\*sync.Mutex) {\n\n    mutex.Lock()\n\n        // Critical section begins\n\n    \\_, err := con.ExecNeo(`MATCH(a:EVENT) WHERE a.name=$EventName\n    CREATE (n:INCHARGE {name:$name, registrationNumber:$registrationNumber,\n        email:$email, phoneNumber:$phoneNumber, gender: $gender})\u003c-[:`+label+`]-(a) `, map[string]interface{}{\n        \"EventName\": e.Name,\n        \"name\": e.GetField(label, \"Name\"),\n        \"registrationNumber\": e.GetField(label, \"RegistrationNumber\"),\n        \"email\": e.GetField(label, \"Email\"),\n        \"phoneNumber\": e.GetField(label, \"PhoneNumber\"),\n        \"gender\": e.GetField(label, \"Gender\"),\n    })\n    if err != nil {\n        c \u003c- err\n        return\n    }\n\n        // Critical section ends\n\n    mutex.Unlock()\n\n    log.Printf(\"Created %s node\", label)\n    c \u003c- nil\n    return\n}\n```\n\nThis gave me the power to execute hundereds of goroutines at once without worrying about mutual exclusion. Granted that this could be achieved at the database level itself, it wasn’t obvious at the time. The project timeline required that I followed the _Just make it work_ ideology, but got to learn a lot about neo4j in the process.\n\n**Conclusion**\n\nNeo4j, being a relatively newer concept in a world of SQLites and Mongooses, has the potential to be one of the most expressive databases, especially in the budding world of data visualization. While it has its caveats, a lot of them can be handled at the application level itself. While the documentation for some of the driver implementations leave a lot to be desired, in the end, there is nothing that a targetted google search can’t solve.\n\n* * *",
		"cached_tag_list": "design, system, go, neo4j",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Photo by Max van den Oetelaar on Unsplash  Introduction  Neo4j is a noSQL database which stores and...",
		"main_image": null,
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/challenges-of-neo4j-at-the-heart-of-software-5211-temp-slug-8969176",
		"public_reactions_count": 0,
		"processed_html": "\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BiCJWrRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2AGgqQ5x90-Br5JnMC\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BiCJWrRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2AGgqQ5x90-Br5JnMC\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"586\"\u003e\u003c/a\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@maxvdo?utm_source=medium\u0026amp;utm_medium=referral\"\u003eMax van den Oetelaar\u003c/a\u003e on \u003ca href=\"https://unsplash.com?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNeo4j is a noSQL database which stores and represents data in the form of graphs. Each node of the graph has a specific tag which is used to identify the type of node. Edges between two nodes specify the relationship between the two nodes. The best use case of neo4j is in the case of highly embedded relational queries.\u003c/p\u003e\n\n\u003cp\u003eNote, you can read my article on \u003ca href=\"https://medium.com/@angadsharma1016/optimizing-go-neo4j-concurrency-patterns-810dff25f88f\"\u003esetting up a go-neo4j ecosystem\u003c/a\u003e as a primer.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHurdles to adoption\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eI started working on one of my biggest projects around last year. Since my learning mechanism solely revolves around using new technologies in real life projects, I was pretty keen on giving graph databases a go. It was then that I came across what came to be the backbone of my project, neo4j. But getting to this point wasn’t easy, mainly because of the following hurdles:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLack of comprehensive documentation around neo4j drivers in golang (which my project was being written in).\u003c/li\u003e\n\u003cli\u003eOverall write-performance issues relative to SQL databases.\u003c/li\u003e\n\u003cli\u003eLack of sophisticated indexing mechanisms.\u003c/li\u003e\n\u003cli\u003eGarbage collection pauses.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--P24742Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2ABWGjrqubK7uIDc06.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--P24742Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2ABWGjrqubK7uIDc06.png\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"430\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUnderstanding the WHY\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNeo4j is a read friendly database. Which means that it is extremely fast when it comes to reading data. So much so that it paves a path to real time graph use cases.\u003c/p\u003e\n\n\u003cp\u003eWhile being read friendly, writes still come at a cost. Mainly because of the following reasons:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNeo4j follows a master-slave architecture and writes are always done on the master. Even if you try to write on a slave, it will internally be cascaded to the master. When the master dies, a new one is elected automatically.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GfcVc9X7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2AGWHICvIuO5qKOQzM.jpg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GfcVc9X7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/0%2AGWHICvIuO5qKOQzM.jpg\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAll data resides on each machine. This is to protect referential integrity. Once data set search queries become larger than the available RAM, the system will slow down dramatically.\u003c/li\u003e\n\u003cli\u003eNeo4j is also not optimized for searching. Very much so when compared with technologies such as elasticsearch.\u003c/li\u003e\n\u003cli\u003eSee the point about garbage collector pauses \u003ca href=\"https://qr.ae/TWrgCn\"\u003ehere\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eSolving some of the problems at the application level\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eTo solve the problem of write latency, I made sure that all of the functions I wrote executed concurrently. But this didn’t stop the fact that there was still a bottleneck because writes are always done on one node. This raised the issue of mutual exclusion.\u003c/p\u003e\n\n\u003cp\u003eWhile neo4j does not offer read locks on data, it does so for writes. But the locks are explicit in a lot of driver implementations. So I spent a lot of time debugging my code and fishing for errors which caused my bulk writes to crash. I then implemented mutex locks in the application layer itself. It was as simple as doing the following:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// create a new node with given label and participant data struct (FOR COORDINATORS)\nfunc CreateParticipant(e Event, label string, c chan error, mutex \\*sync.Mutex) {\n\n    mutex.Lock()\n\n        // Critical section begins\n\n    \\_, err := con.ExecNeo(`MATCH(a:EVENT) WHERE a.name=$EventName\n    CREATE (n:INCHARGE {name:$name, registrationNumber:$registrationNumber,\n        email:$email, phoneNumber:$phoneNumber, gender: $gender})\u0026lt;-[:`+label+`]-(a) `, map[string]interface{}{\n        \"EventName\": e.Name,\n        \"name\": e.GetField(label, \"Name\"),\n        \"registrationNumber\": e.GetField(label, \"RegistrationNumber\"),\n        \"email\": e.GetField(label, \"Email\"),\n        \"phoneNumber\": e.GetField(label, \"PhoneNumber\"),\n        \"gender\": e.GetField(label, \"Gender\"),\n    })\n    if err != nil {\n        c \u0026lt;- err\n        return\n    }\n\n        // Critical section ends\n\n    mutex.Unlock()\n\n    log.Printf(\"Created %s node\", label)\n    c \u0026lt;- nil\n    return\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis gave me the power to execute hundereds of goroutines at once without worrying about mutual exclusion. Granted that this could be achieved at the database level itself, it wasn’t obvious at the time. The project timeline required that I followed the \u003cem\u003eJust make it work\u003c/em\u003e ideology, but got to learn a lot about neo4j in the process.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNeo4j, being a relatively newer concept in a world of SQLites and Mongooses, has the potential to be one of the most expressive databases, especially in the budding world of data visualization. While it has its caveats, a lot of them can be handled at the application level itself. While the documentation for some of the driver implementations leave a lot to be desired, in the end, there is nothing that a targetted google search can’t solve.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n",
		"published": false,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "challenges-of-neo4j-at-the-heart-of-software-5211-temp-slug-8969176",
		"social_image": null,
		"title": "Challenges of Neo4j at the heart of software",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-14T16:30:59.995Z",
		"crossposted_at": "2020-06-05T18:35:25.468Z",
		"edited_at": "2020-06-05T18:38:05.974Z",
		"last_comment_at": "2020-06-09T11:57:25.034Z",
		"published_at": "2020-01-12T07:31:35.000Z",
		"canonical_url": null,
		"feed_source_url": "https://medium.com/gdg-vit/clean-architecture-the-right-way-d83b81ecac6",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "A practical guide to _Clean Architecture_, with a personal touch.\n\nJust last Sunday, I was randomly browsing GitHub, (like most of my Sundays usually go) and I stumbled upon a very popular repository, with over 10K commits. Now I am not going to name which project it was but it should suffice to say that even though I knew the stack of the project, the code itself was completely alien to me. Some features were randomly thrown adrift a sea of loosely cohesive functions inside directories called “_utils”_ or worse, “_helpers”._\n\nThe catch with big projects is that overtime, they become so complex that it is actually cheaper to re-write them rather than training new talent to actually understand the code and then contribute.\n\nThis brings me to the ulterior motive of the rather practical anecdote, which is to talk about Clean Architecture, at an implementation level. Now this blog is going to contain some Go code, but fret not, even if you are not familiar with the beautiful language, the concepts are fairly easy to grok.\n\n### What is so _Clean_ about Clean Architecture?\n\n![](https://cdn-images-1.medium.com/max/772/1*B7LkQDyDqLN3rRSrNYkETA.jpeg)\n\nIn short, you get the following benefits from using Clean Architecture:\n\n- **Database Agnostic** : Your core business logic does not care if you are using Postgres, MongoDB, or Neo4J for that matter.\n- **Client Interface Agnostic:** The core business logic does not care if you are using a CLI, a REST API, or even gRPC.\n- **Framework Agnostic:** Using vanilla nodeJS, express, fastify? Your core business logic does not care about that either.\n\nNow if you want to read more about how clean architecture works, you can read the fantastic blog, [The Clean Architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html), by _Uncle Bob_. For now, lets jump to the implementation. To follow along, view the repository [here](https://github.com/L04DB4L4NC3R/clean-architecture-sample.git).\n\n```\nClean-Architecture-Sample\n├── api\n│ ├── handler\n│ │ ├── admin.go\n│ │ └── user.go\n│ ├── main.go\n│ ├── middleware\n│ │ ├── auth.go\n│ │ └── cors.go\n│ └── views\n│ └── errors.go\n├── bin\n│ └── main\n├── config.json\n├── docker-compose.yml\n├── go.mod\n├── go.sum\n├── Makefile\n├── pkg\n│ ├── admin\n│ │ ├── entity.go\n│ │ ├── postgres.go\n│ │ ├── repository.go\n│ │ └── service.go\n│ ├── errors.go\n│ └── user\n│ ├── entity.go\n│ ├── postgres.go\n│ ├── repository.go\n│ └── service.go\n├── README.md\n```\n\n**Entities**\n\nEntities are the core business objects that can be realized by functions. In MVC terms, they are the model layer of the clean architecture. All entities and services are enclosed in a directory called pkg. This is actually what we want to abstract away from the rest of the application.\n\nIf you take a look at _entity.go_ for user, it looks like this:\n\n{% gist https://gist.github.com/L04DB4L4NC3R/04efd6e4659f7aab367523e52b0aa839 %}\n\nEntities are used in the **Repository** _i_nterface, which can be implemented for any database. In this case we have implemented it for Postgre, in _postgres.go._ Since repositories can be realized for any database, therefore they are independent of all of their implementation details.\n\n{% gist https://gist.github.com/L04DB4L4NC3R/0f6862642ff871b1a754af9829c2ac18 %}\n\n**Services**\n\nServices include interfaces for higher level business logic oriented functions. For example, _FindByID,_ might be a repository function, but _login_ or _signup_ are service functions. Services are a layer of abstraction over repositories by the fact that they do not interact with the database, rather they interact with the repository interface.\n\n{% gist https://gist.github.com/L04DB4L4NC3R/9a457875a046e438fd0a76115db272f7 %}\n\nServices are implemented at the user interface level.\n\n**Interface Adapters**\n\nEach user interface has it’s separate directory. In our case, since we have an API as an interface, we have a directory called _api_.\n\nNow since each user-interface listens to requests differently, interface adapters have their own _main.go_ files, which are tasked with the following:\n\n- Creating Repositories\n- Wrapping Repositories inside Services\n- Wrap Services inside Handlers\n\nHere, Handlers are simply user-interface level implementation of the Request-Response model. Each service has its own Handler. See _user.go_\n\n{% gist https://gist.github.com/L04DB4L4NC3R/1b85ee1ac967163139465dda80a0f3b5 %}\n\n### **Error Handling**\n\n![](https://cdn-images-1.medium.com/max/481/1*Ps25a0vjZLWu_Tam4pklew.png)\u003cfigcaption\u003eError flow in Clean Architecture\u003c/figcaption\u003e\n\nThe basic principle behind error handling in Clean Architecture is the following:\n\n\u003e Repository errors should be uniform and should be wrapped and implemented differently for each interface adapter.\n\nWhat this essentially means is that all of the database level errors should be handled by the user interfaces differently. For example, if the user interface in question is a REST API then errors should be manifested in the form of HTTP status codes, in this case, code 500. Whereas if it is a CLI then it should exit with status code 1.\n\nIn Clean Architecture, Repository errors can be at the root of _pkg_ so that Repository functions is able to call them in case of a control flow miscarriage, as seen below:\n\n{% gist https://gist.github.com/L04DB4L4NC3R/42c6d8fdc9885666707e1cc680b213f0 %}\n\nThe same errors can then be implemented according to the specific user interface, and can most often be wrapped in views, at the Handler level, as seen below:\n\n{% gist https://gist.github.com/L04DB4L4NC3R/c407b1530a0ca915372cd0ba4652dec8 %}\n\nEach Repository level error, or otherwise, is wrapped inside a map, which returns an HTTP status code corresponding to the appropriate error.\n\n### **Conclusion**\n\nClean Architecture is a great way to structure your code and then forget about all of the complexities that might arise due to agile iterations or rapid prototyping. Being database, user interface, as well as framework independent, Clean Architecture clearly takes the cake for living up to its name.\n\n### References\n\n- [L04DB4L4NC3R/clean-architecture-sample](https://github.com/L04DB4L4NC3R/clean-architecture-sample)\n- [Clean Coder Blog](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)\n\n---\n\nThis Article was originally published [on Medium](https://medium.com/gdg-vit/clean-architecture-the-right-way-d83b81ecac6) under [Developer Student Clubs VIT, Powered By Google Developers](https://dscvit.com/). [Follow us](https://medium.com/gdg-vit) on Medium.\n\n* * *",
		"cached_tag_list": "go, productivity",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 1,
		"description": "A practical guide to Clean Architecture, with a personal touch.  Just last Sunday, I was randomly bro...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Asc-PTnU--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/2ffsp4xeks4jxhbb0elk.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/clean-architecture-the-right-way-1dfk",
		"public_reactions_count": 32,
		"processed_html": "\u003cp\u003eA practical guide to \u003cem\u003eClean Architecture\u003c/em\u003e, with a personal touch.\u003c/p\u003e\n\n\u003cp\u003eJust last Sunday, I was randomly browsing GitHub, (like most of my Sundays usually go) and I stumbled upon a very popular repository, with over 10K commits. Now I am not going to name which project it was but it should suffice to say that even though I knew the stack of the project, the code itself was completely alien to me. Some features were randomly thrown adrift a sea of loosely cohesive functions inside directories called “\u003cem\u003eutils”\u003c/em\u003e or worse, “\u003cem\u003ehelpers”.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe catch with big projects is that overtime, they become so complex that it is actually cheaper to re-write them rather than training new talent to actually understand the code and then contribute.\u003c/p\u003e\n\n\u003cp\u003eThis brings me to the ulterior motive of the rather practical anecdote, which is to talk about Clean Architecture, at an implementation level. Now this blog is going to contain some Go code, but fret not, even if you are not familiar with the beautiful language, the concepts are fairly easy to grok.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"what-is-so-clean-about-clean-architecture\" href=\"#what-is-so-clean-about-clean-architecture\"\u003e\n  \u003c/a\u003e\n  What is so \u003cem\u003eClean\u003c/em\u003e about Clean Architecture?\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--m3CVuQX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/772/1%2AB7LkQDyDqLN3rRSrNYkETA.jpeg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--m3CVuQX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/772/1%2AB7LkQDyDqLN3rRSrNYkETA.jpeg\" alt=\"\" loading=\"lazy\" width=\"772\" height=\"567\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIn short, you get the following benefits from using Clean Architecture:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eDatabase Agnostic\u003c/strong\u003e : Your core business logic does not care if you are using Postgres, MongoDB, or Neo4J for that matter.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eClient Interface Agnostic:\u003c/strong\u003e The core business logic does not care if you are using a CLI, a REST API, or even gRPC.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eFramework Agnostic:\u003c/strong\u003e Using vanilla nodeJS, express, fastify? Your core business logic does not care about that either.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow if you want to read more about how clean architecture works, you can read the fantastic blog, \u003ca href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\"\u003eThe Clean Architecture\u003c/a\u003e, by \u003cem\u003eUncle Bob\u003c/em\u003e. For now, lets jump to the implementation. To follow along, view the repository \u003ca href=\"https://github.com/L04DB4L4NC3R/clean-architecture-sample.git\"\u003ehere\u003c/a\u003e.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eClean-Architecture-Sample\n├── api\n│ ├── handler\n│ │ ├── admin.go\n│ │ └── user.go\n│ ├── main.go\n│ ├── middleware\n│ │ ├── auth.go\n│ │ └── cors.go\n│ └── views\n│ └── errors.go\n├── bin\n│ └── main\n├── config.json\n├── docker-compose.yml\n├── go.mod\n├── go.sum\n├── Makefile\n├── pkg\n│ ├── admin\n│ │ ├── entity.go\n│ │ ├── postgres.go\n│ │ ├── repository.go\n│ │ └── service.go\n│ ├── errors.go\n│ └── user\n│ ├── entity.go\n│ ├── postgres.go\n│ ├── repository.go\n│ └── service.go\n├── README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eEntities\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eEntities are the core business objects that can be realized by functions. In MVC terms, they are the model layer of the clean architecture. All entities and services are enclosed in a directory called pkg. This is actually what we want to abstract away from the rest of the application.\u003c/p\u003e\n\n\u003cp\u003eIf you take a look at \u003cem\u003eentity.go\u003c/em\u003e for user, it looks like this:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/04efd6e4659f7aab367523e52b0aa839.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eEntities are used in the \u003cstrong\u003eRepository\u003c/strong\u003e \u003cem\u003ei_nterface, which can be implemented for any database. In this case we have implemented it for Postgre, in _postgres.go.\u003c/em\u003e Since repositories can be realized for any database, therefore they are independent of all of their implementation details.\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/0f6862642ff871b1a754af9829c2ac18.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eServices\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eServices include interfaces for higher level business logic oriented functions. For example, \u003cem\u003eFindByID,\u003c/em\u003e might be a repository function, but \u003cem\u003elogin\u003c/em\u003e or \u003cem\u003esignup\u003c/em\u003e are service functions. Services are a layer of abstraction over repositories by the fact that they do not interact with the database, rather they interact with the repository interface.\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/9a457875a046e438fd0a76115db272f7.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eServices are implemented at the user interface level.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInterface Adapters\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eEach user interface has it’s separate directory. In our case, since we have an API as an interface, we have a directory called \u003cem\u003eapi\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow since each user-interface listens to requests differently, interface adapters have their own \u003cem\u003emain.go\u003c/em\u003e files, which are tasked with the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreating Repositories\u003c/li\u003e\n\u003cli\u003eWrapping Repositories inside Services\u003c/li\u003e\n\u003cli\u003eWrap Services inside Handlers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere, Handlers are simply user-interface level implementation of the Request-Response model. Each service has its own Handler. See \u003cem\u003euser.go\u003c/em\u003e\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/1b85ee1ac967163139465dda80a0f3b5.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\u003ch3\u003e\n  \u003ca name=\"error-handling\" href=\"#error-handling\"\u003e\n  \u003c/a\u003e\n  \u003cstrong\u003eError Handling\u003c/strong\u003e\n\u003c/h3\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OHamKpzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/481/1%2APs25a0vjZLWu_Tam4pklew.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OHamKpzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/481/1%2APs25a0vjZLWu_Tam4pklew.png\" alt=\"\" loading=\"lazy\" width=\"481\" height=\"421\"\u003e\u003c/a\u003e\u003cfigcaption\u003eError flow in Clean Architecture\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003cp\u003eThe basic principle behind error handling in Clean Architecture is the following:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eRepository errors should be uniform and should be wrapped and implemented differently for each interface adapter.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhat this essentially means is that all of the database level errors should be handled by the user interfaces differently. For example, if the user interface in question is a REST API then errors should be manifested in the form of HTTP status codes, in this case, code 500. Whereas if it is a CLI then it should exit with status code 1.\u003c/p\u003e\n\n\u003cp\u003eIn Clean Architecture, Repository errors can be at the root of \u003cem\u003epkg\u003c/em\u003e so that Repository functions is able to call them in case of a control flow miscarriage, as seen below:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/42c6d8fdc9885666707e1cc680b213f0.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThe same errors can then be implemented according to the specific user interface, and can most often be wrapped in views, at the Handler level, as seen below:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag_gist-liquid-tag\"\u003e\n  \u003cscript id=\"gist-ltag\" src=\"https://gist.github.com/L04DB4L4NC3R/c407b1530a0ca915372cd0ba4652dec8.js\"\u003e\u003c/script\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eEach Repository level error, or otherwise, is wrapped inside a map, which returns an HTTP status code corresponding to the appropriate error.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"conclusion\" href=\"#conclusion\"\u003e\n  \u003c/a\u003e\n  \u003cstrong\u003eConclusion\u003c/strong\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eClean Architecture is a great way to structure your code and then forget about all of the complexities that might arise due to agile iterations or rapid prototyping. Being database, user interface, as well as framework independent, Clean Architecture clearly takes the cake for living up to its name.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/clean-architecture-sample\"\u003eL04DB4L4NC3R/clean-architecture-sample\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\"\u003eClean Coder Blog\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003cp\u003eThis Article was originally published \u003ca href=\"https://medium.com/gdg-vit/clean-architecture-the-right-way-d83b81ecac6\"\u003eon Medium\u003c/a\u003e under \u003ca href=\"https://dscvit.com/\"\u003eDeveloper Student Clubs VIT, Powered By Google Developers\u003c/a\u003e. \u003ca href=\"https://medium.com/gdg-vit\"\u003eFollow us\u003c/a\u003e on Medium.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n",
		"published": true,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "clean-architecture-the-right-way-1dfk",
		"social_image": null,
		"title": "Clean Architecture, the right way",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-14T16:31:01.263Z",
		"crossposted_at": "2020-06-12T12:06:35.301Z",
		"edited_at": null,
		"last_comment_at": "2021-12-26T13:42:27.407Z",
		"published_at": "2020-06-12T12:06:35.301Z",
		"canonical_url": null,
		"feed_source_url": "https://medium.com/gdg-vit/editor-almighty-79807100f10c",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "\nHow my search for the perfect text editor took me to SpaceVim\n\n\u003e What compels people to migrate from their comfort zone? Is it boredom, monotony, or the bland impracticality of their ever so inertial state. I call it an itch, just waiting to be scratched.\n\nThis ever so inexplicable itch is what became the driving force behind my rather opinionated journey across editors.\n\nOne thing to clear right off the bat is that this blog, in no way, declares the superiority of one editor over the other, it merely explains which editor boosted _my_ productivity. Feel free to form your own opinion after reading this post. Without further ado, let us get started.\n\n![](https://cdn-images-1.medium.com/max/1024/0*6jrTd4O_RZZrsNax)\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@sergeytrofimov?utm_source=medium\u0026amp;utm_medium=referral\"\u003eSerghei Trofimov\u003c/a\u003e on \u003ca href=\"https://unsplash.com?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\n\n#### **What I started off with**\n\nI started my development journey, like most people do, with a minimal and easy to use a text editor called [Atom](https://atom.io/). I soon learnt that [VSCode](https://code.visualstudio.com/) (Visual Studio Code) was all of the buzzes, and I caught that fad pretty early on. Subsequently, I was amazed at the wide array of extensions that VSCode had to offer. From VCS to advanced debugging tools, and more.\n\n#### Why I decided to drop VSCode\n\n- I had to depend on the mouse for navigation to an extent, even with vim bindings.\n- There was no real feeling of personal satisfaction when everything was handed over in a plate (personal choice).\n- I wanted something fast(er) and cheaper on my memory.\n- I did a lot of development on remote servers, which didn’t have VSCode at that time (now we have [VSCodium,](https://github.com/VSCodium/vscodium) which I still don’t prefer).\n\n#### Journey to the centre of vim\n\nDuring the same time, I got interested in DevOps, and so felt a natural pull towards terminal-based editors. Emacs felt too intimidating, so the natural course took me to vim.\n\nI was amazed at the world of opportunities that vim created for me, from granular customization to fast versatility, I couldn’t get enough of setting up my own .vimrc. Now at the same time, I had my semester finals (which obviously didn't go too well).\n\nAs my exams ended (along with a part of me), I figured out my perfect build. It included some popular plugins like:\n\n![](https://cdn-images-1.medium.com/max/225/1*sSxN3_F2fXSxY30_0mJ-vg.png)\n\n- [vim-go](https://github.com/fatih/vim-go.git)\n- [ctrlp.vim](https://github.com/kien/ctrlp.vim.git)\n- [vim-fugitive](https://github.com/tpope/vim-fugitive.git)\n- [nerdtree](https://github.com/scrooloose/nerdtree.git)\n- [YouCompleteMe](https://github.com/ycm-core/YouCompleteMe.git)\n- [pathogen](https://github.com/tpope/vim-pathogen.git)\n\nAnd the following terminal tools (yes, I shifted to zsh):\n\n![](https://cdn-images-1.medium.com/max/337/1*VWNcnaDGBZGas0LYqvvnKQ.png)\n\n- [Oh my zsh](https://github.com/robbyrussell/oh-my-zsh.git)\n- [terminator config](https://www.systutorials.com/docs/linux/man/5-terminator_config/)\n- [zsh plugins](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins)\n- [shell themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n\nSo my environment started looking visually verbose, which is just the way I prefer:\n\n![](https://cdn-images-1.medium.com/max/880/1*wTqHwvjDN0pc6aow5tebsQ.png)\u003cfigcaption\u003e\u003cem\u003eTerminator split panes with CLI tools\u003c/em\u003e\u003c/figcaption\u003e\n\n#### Scaling the learning curve\n\nI had the perfect setup I wanted, especially for development and operations. It was fast, highly customizable, and intuitive. But there was still something missing. I still hadn’t memorized the vim shortcuts and had a lot of trouble staying away from the mouse while working. Trouble in paradise!\n\n![](https://cdn-images-1.medium.com/max/1024/0*nAgkP6Cw7gxAadY4)\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@officestock?utm_source=medium\u0026amp;utm_medium=referral\"\u003eSebastian Herrmann\u003c/a\u003e on \u003ca href=\"https://unsplash.com?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\n\nDuring this time, I would occasionally switch between VSCode and vim in order to boost productivity, although it was doing more harm than good. I followed the following guidelines which helped me be 2X more productive in vim that I ever was in VSCode:\n\n- **Restrict yourself** : Unplug your mouse, close all other editors, and no matter how slow you type, keep grinding. I was a back-end intern at [Atlan](https://atlan.com/) during this time and I didn’t even install any other editor on my work computer other than vim itself. The first week was tough, but I soon got the hang of it and subsequently became quite productive.\n- **Understand rather than memorize** : In vim, all of the key bindings have a reason to be there. Understand the meaning of the commands that you are typing in. Vim will soon sound like a poem to you. For example: w means _word_ in vim and c means _change_. Doing a c + i + w over a word in vim essentially means change in word.\n- **Do what works for you** : Do you want to change the key bindings? Sure, go ahead! Want to change the fonts, tab/spaces? Knock yourself out! Want to change how tiling works in vim? The world is your oyster! In the end, it is about productivity above all else. Never be afraid to seek help from others. Vim has a great community and you can learn a lot by simply watching the vim conference screen-casts on YouTube.\n\n#### Shortcomings of vim\n\nFast forward a few months and I was using vim bindings everywhere, even in my [browsers](https://vimium.github.io/)! Vim showed me how typing can actually be poetic, even though you might be writing something as mundane as skeletal HTML. It had some shortcomings though:\n\n- **Built Synchronous:** Vim (before 8.0) was built to be synchronous, which started causing a lot of problems after adding a plethora of plugins. Loading times would take seconds, even with vim v8+(might not sound like it, but actually that is very slow for an editor)!\n- **Lack of out-of-the-box plugins:** There are some plugins that you got to have. For instance, [YouCompleteMe](https://github.com/ycm-core/YouCompleteMe) is a plugin for code auto-completion and [nerdtree](https://github.com/preservim/nerdtree) is a plugin for viewing a file directory structure in vim. These are some of the extensions that should come in-built, due to the nature of their utility.\n- **Requirement of explicit plugin managers:** Plugin managers like [pathogen](https://github.com/tpope/vim-pathogen), [vundle](https://github.com/VundleVim/Vundle.vim) or [plug](https://github.com/junegunn/vim-plug) are required for installing and configuring extensions in vim. This causes a lot of hassle when you are using one particular plugin but an extension only supports the other.\n\n#### SpaceVim to the rescue!\n\n[SpaceVim](https://spacevim.org/) is a community-driven _vim distribution._ What this essentially means is that it is a set of vim configurations which add an abstraction over vim. The following are the salient features of SpaceVim which attracted me:\n\n- **Super easy installation:** Installing SpaceVim involves running just a single command on your terminal. You get instant gratification. Fair warning though, your existing vim configurations are going to be overwritten.\n- **Asynchronous plugin manager:** SpaceVim has a [neovim](https://github.com/neovim/neovim) inspired plugin system. It only loads the most essential plugins during the initial runtime cycle and defers the loading of the rest of the plugins. This _lazy-loading_ of plugins creates a seamless typing experience for the user.\n\n![](https://cdn-images-1.medium.com/max/961/1*kD4lZRkcUjW9tm3Q3C_NwQ.png)\n\n- **Layer based plugin system:** SpaceVim installs plugins in layers. Each layer defines a set of plugins, grouped together to offer maximum functionality to the user, per download. Each and every plugin inside a particular layer, as well as in different layers, is downloaded asynchronously by the SpaceVim _PlugManager._\n- **A plethora of off-the-shelf features:** SpaceVim comes loaded with a ton of features right of the box. From asynchronous grep on the fly, to fancy TODO managers. It brings a lot to the table in order to add value to the users’ typing experience.\n\n![](https://cdn-images-1.medium.com/max/1024/1*US5IJBiRmZ1HaR2MbUcnCg.png)\n\n- **Spacebar oriented:** As the name ever so discretely suggests, SpaceVim is big on using spaces as a macro for invoking a lot of in-built functionality. This is a fresh change from vim, where the spacebar has virtually no functionality in normal mode, even though it is the easiest key to hit on the keyboard, due to both its size and its stature. And no, SpaceVim has nothing to do with outer space.\n- **Over 78 language packs supported:** Language packs are layers (set of plugins) which offer a lot of functionality for development in a particular language. For example, a lang#go layer will offer functionality for go development.\n\n![](https://cdn-images-1.medium.com/max/1024/1*lwKNGzLaiRY4_rJFR0Bhrw.png)\n\nAll of these can be installed by simple adding the following lines to your **~/.SpaceVim.d/init.toml**\n\n```\n[[layers]]\nname = \"lang#go\"\n```\n\n#### Conclusion\n\nSpaceVim is not the endgame. Nothing is. The aim is to keep on finding, and mastering whatever boosts productivity.\n\n\u003e Efficiency is doing something which has already been done before, better.\n\n\u003e YOU are the most important resource when it comes to productivity. So choose the editor which boosts YOUR productivity. After all, no one knows better than you :)\n\n#### References\n\n- [Home](https://spacevim.org/)\n- [vim/vim](https://github.com/vim/vim)\n- [L04DB4L4NC3R/DEC](https://github.com/L04DB4L4NC3R/DEC)\n\n* * *\n\nThis Article was originally published [on Medium](https://medium.com/gdg-vit/editor-almighty-79807100f10c) under [Developer Student Clubs VIT, Powered By Google Developers](https://dscvit.com/). [Follow us](https://medium.com/gdg-vit) on Medium.",
		"cached_tag_list": "vim",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 3,
		"description": "How my search for the perfect text editor took me to SpaceVim   What compels people to migrate from t...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--IUeBqACF--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/xti5km3trvkfavi5r320.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/editor-almighty-2de6",
		"public_reactions_count": 8,
		"processed_html": "\u003cp\u003eHow my search for the perfect text editor took me to SpaceVim\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhat compels people to migrate from their comfort zone? Is it boredom, monotony, or the bland impracticality of their ever so inertial state. I call it an itch, just waiting to be scratched.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis ever so inexplicable itch is what became the driving force behind my rather opinionated journey across editors.\u003c/p\u003e\n\n\u003cp\u003eOne thing to clear right off the bat is that this blog, in no way, declares the superiority of one editor over the other, it merely explains which editor boosted \u003cem\u003emy\u003c/em\u003e productivity. Feel free to form your own opinion after reading this post. Without further ado, let us get started.\u003c/p\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hhndqWHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2A6jrTd4O_RZZrsNax\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hhndqWHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2A6jrTd4O_RZZrsNax\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"396\"\u003e\u003c/a\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@sergeytrofimov?utm_source=medium\u0026amp;utm_medium=referral\"\u003eSerghei Trofimov\u003c/a\u003e on \u003ca href=\"https://unsplash.com?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"what-i-started-off-with\" href=\"#what-i-started-off-with\"\u003e\n  \u003c/a\u003e\n  \u003cstrong\u003eWhat I started off with\u003c/strong\u003e\n\u003c/h4\u003e\n\n\u003cp\u003eI started my development journey, like most people do, with a minimal and easy to use a text editor called \u003ca href=\"https://atom.io/\"\u003eAtom\u003c/a\u003e. I soon learnt that \u003ca href=\"https://code.visualstudio.com/\"\u003eVSCode\u003c/a\u003e (Visual Studio Code) was all of the buzzes, and I caught that fad pretty early on. Subsequently, I was amazed at the wide array of extensions that VSCode had to offer. From VCS to advanced debugging tools, and more.\u003c/p\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"why-i-decided-to-drop-vscode\" href=\"#why-i-decided-to-drop-vscode\"\u003e\n  \u003c/a\u003e\n  Why I decided to drop VSCode\n\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eI had to depend on the mouse for navigation to an extent, even with vim bindings.\u003c/li\u003e\n\u003cli\u003eThere was no real feeling of personal satisfaction when everything was handed over in a plate (personal choice).\u003c/li\u003e\n\u003cli\u003eI wanted something fast(er) and cheaper on my memory.\u003c/li\u003e\n\u003cli\u003eI did a lot of development on remote servers, which didn’t have VSCode at that time (now we have \u003ca href=\"https://github.com/VSCodium/vscodium\"\u003eVSCodium,\u003c/a\u003e which I still don’t prefer).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"journey-to-the-centre-of-vim\" href=\"#journey-to-the-centre-of-vim\"\u003e\n  \u003c/a\u003e\n  Journey to the centre of vim\n\u003c/h4\u003e\n\n\u003cp\u003eDuring the same time, I got interested in DevOps, and so felt a natural pull towards terminal-based editors. Emacs felt too intimidating, so the natural course took me to vim.\u003c/p\u003e\n\n\u003cp\u003eI was amazed at the world of opportunities that vim created for me, from granular customization to fast versatility, I couldn’t get enough of setting up my own .vimrc. Now at the same time, I had my semester finals (which obviously didn't go too well).\u003c/p\u003e\n\n\u003cp\u003eAs my exams ended (along with a part of me), I figured out my perfect build. It included some popular plugins like:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JF9VupGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/225/1%2AsSxN3_F2fXSxY30_0mJ-vg.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JF9VupGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/225/1%2AsSxN3_F2fXSxY30_0mJ-vg.png\" alt=\"\" loading=\"lazy\" width=\"225\" height=\"225\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/fatih/vim-go.git\"\u003evim-go\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kien/ctrlp.vim.git\"\u003ectrlp.vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tpope/vim-fugitive.git\"\u003evim-fugitive\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/scrooloose/nerdtree.git\"\u003enerdtree\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ycm-core/YouCompleteMe.git\"\u003eYouCompleteMe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tpope/vim-pathogen.git\"\u003epathogen\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd the following terminal tools (yes, I shifted to zsh):\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XCKVl8cX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/337/1%2AVWNcnaDGBZGas0LYqvvnKQ.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XCKVl8cX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/337/1%2AVWNcnaDGBZGas0LYqvvnKQ.png\" alt=\"\" loading=\"lazy\" width=\"337\" height=\"208\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh.git\"\u003eOh my zsh\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.systutorials.com/docs/linux/man/5-terminator_config/\"\u003eterminator config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\"\u003ezsh plugins\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Themes\"\u003eshell themes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo my environment started looking visually verbose, which is just the way I prefer:\u003c/p\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SV4r_ckY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/1%2AwTqHwvjDN0pc6aow5tebsQ.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SV4r_ckY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/880/1%2AwTqHwvjDN0pc6aow5tebsQ.png\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003cem\u003eTerminator split panes with CLI tools\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"scaling-the-learning-curve\" href=\"#scaling-the-learning-curve\"\u003e\n  \u003c/a\u003e\n  Scaling the learning curve\n\u003c/h4\u003e\n\n\u003cp\u003eI had the perfect setup I wanted, especially for development and operations. It was fast, highly customizable, and intuitive. But there was still something missing. I still hadn’t memorized the vim shortcuts and had a lot of trouble staying away from the mouse while working. Trouble in paradise!\u003c/p\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hQce7NIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2AnAgkP6Cw7gxAadY4\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hQce7NIE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2AnAgkP6Cw7gxAadY4\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"586\"\u003e\u003c/a\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@officestock?utm_source=medium\u0026amp;utm_medium=referral\"\u003eSebastian Herrmann\u003c/a\u003e on \u003ca href=\"https://unsplash.com?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003cp\u003eDuring this time, I would occasionally switch between VSCode and vim in order to boost productivity, although it was doing more harm than good. I followed the following guidelines which helped me be 2X more productive in vim that I ever was in VSCode:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eRestrict yourself\u003c/strong\u003e : Unplug your mouse, close all other editors, and no matter how slow you type, keep grinding. I was a back-end intern at \u003ca href=\"https://atlan.com/\"\u003eAtlan\u003c/a\u003e during this time and I didn’t even install any other editor on my work computer other than vim itself. The first week was tough, but I soon got the hang of it and subsequently became quite productive.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eUnderstand rather than memorize\u003c/strong\u003e : In vim, all of the key bindings have a reason to be there. Understand the meaning of the commands that you are typing in. Vim will soon sound like a poem to you. For example: w means \u003cem\u003eword\u003c/em\u003e in vim and c means \u003cem\u003echange\u003c/em\u003e. Doing a c + i + w over a word in vim essentially means change in word.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eDo what works for you\u003c/strong\u003e : Do you want to change the key bindings? Sure, go ahead! Want to change the fonts, tab/spaces? Knock yourself out! Want to change how tiling works in vim? The world is your oyster! In the end, it is about productivity above all else. Never be afraid to seek help from others. Vim has a great community and you can learn a lot by simply watching the vim conference screen-casts on YouTube.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"shortcomings-of-vim\" href=\"#shortcomings-of-vim\"\u003e\n  \u003c/a\u003e\n  Shortcomings of vim\n\u003c/h4\u003e\n\n\u003cp\u003eFast forward a few months and I was using vim bindings everywhere, even in my \u003ca href=\"https://vimium.github.io/\"\u003ebrowsers\u003c/a\u003e! Vim showed me how typing can actually be poetic, even though you might be writing something as mundane as skeletal HTML. It had some shortcomings though:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eBuilt Synchronous:\u003c/strong\u003e Vim (before 8.0) was built to be synchronous, which started causing a lot of problems after adding a plethora of plugins. Loading times would take seconds, even with vim v8+(might not sound like it, but actually that is very slow for an editor)!\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eLack of out-of-the-box plugins:\u003c/strong\u003e There are some plugins that you got to have. For instance, \u003ca href=\"https://github.com/ycm-core/YouCompleteMe\"\u003eYouCompleteMe\u003c/a\u003e is a plugin for code auto-completion and \u003ca href=\"https://github.com/preservim/nerdtree\"\u003enerdtree\u003c/a\u003e is a plugin for viewing a file directory structure in vim. These are some of the extensions that should come in-built, due to the nature of their utility.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eRequirement of explicit plugin managers:\u003c/strong\u003e Plugin managers like \u003ca href=\"https://github.com/tpope/vim-pathogen\"\u003epathogen\u003c/a\u003e, \u003ca href=\"https://github.com/VundleVim/Vundle.vim\"\u003evundle\u003c/a\u003e or \u003ca href=\"https://github.com/junegunn/vim-plug\"\u003eplug\u003c/a\u003e are required for installing and configuring extensions in vim. This causes a lot of hassle when you are using one particular plugin but an extension only supports the other.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"spacevim-to-the-rescue\" href=\"#spacevim-to-the-rescue\"\u003e\n  \u003c/a\u003e\n  SpaceVim to the rescue!\n\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://spacevim.org/\"\u003eSpaceVim\u003c/a\u003e is a community-driven \u003cem\u003evim distribution.\u003c/em\u003e What this essentially means is that it is a set of vim configurations which add an abstraction over vim. The following are the salient features of SpaceVim which attracted me:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eSuper easy installation:\u003c/strong\u003e Installing SpaceVim involves running just a single command on your terminal. You get instant gratification. Fair warning though, your existing vim configurations are going to be overwritten.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eAsynchronous plugin manager:\u003c/strong\u003e SpaceVim has a \u003ca href=\"https://github.com/neovim/neovim\"\u003eneovim\u003c/a\u003e inspired plugin system. It only loads the most essential plugins during the initial runtime cycle and defers the loading of the rest of the plugins. This \u003cem\u003elazy-loading\u003c/em\u003e of plugins creates a seamless typing experience for the user.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--oeNT8gyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/961/1%2AkD4lZRkcUjW9tm3Q3C_NwQ.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--oeNT8gyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/961/1%2AkD4lZRkcUjW9tm3Q3C_NwQ.png\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"950\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eLayer based plugin system:\u003c/strong\u003e SpaceVim installs plugins in layers. Each layer defines a set of plugins, grouped together to offer maximum functionality to the user, per download. Each and every plugin inside a particular layer, as well as in different layers, is downloaded asynchronously by the SpaceVim \u003cem\u003ePlugManager.\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eA plethora of off-the-shelf features:\u003c/strong\u003e SpaceVim comes loaded with a ton of features right of the box. From asynchronous grep on the fly, to fancy TODO managers. It brings a lot to the table in order to add value to the users’ typing experience.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--354a6CFM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AUS5IJBiRmZ1HaR2MbUcnCg.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--354a6CFM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AUS5IJBiRmZ1HaR2MbUcnCg.png\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"118\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eSpacebar oriented:\u003c/strong\u003e As the name ever so discretely suggests, SpaceVim is big on using spaces as a macro for invoking a lot of in-built functionality. This is a fresh change from vim, where the spacebar has virtually no functionality in normal mode, even though it is the easiest key to hit on the keyboard, due to both its size and its stature. And no, SpaceVim has nothing to do with outer space.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eOver 78 language packs supported:\u003c/strong\u003e Language packs are layers (set of plugins) which offer a lot of functionality for development in a particular language. For example, a lang#go layer will offer functionality for go development.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bYthcWWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AlwKNGzLaiRY4_rJFR0Bhrw.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bYthcWWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AlwKNGzLaiRY4_rJFR0Bhrw.png\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"82\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAll of these can be installed by simple adding the following lines to your \u003cstrong\u003e~/.SpaceVim.d/init.toml\u003c/strong\u003e\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[[layers]]\nname = \"lang#go\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003ch4\u003e\n  \u003ca name=\"conclusion\" href=\"#conclusion\"\u003e\n  \u003c/a\u003e\n  Conclusion\n\u003c/h4\u003e\n\n\u003cp\u003eSpaceVim is not the endgame. Nothing is. The aim is to keep on finding, and mastering whatever boosts productivity.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eEfficiency is doing something which has already been done before, better.\u003c/p\u003e\n\n\u003cp\u003eYOU are the most important resource when it comes to productivity. So choose the editor which boosts YOUR productivity. After all, no one knows better than you :)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://spacevim.org/\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vim/vim\"\u003evim/vim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/DEC\"\u003eL04DB4L4NC3R/DEC\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003cp\u003eThis Article was originally published \u003ca href=\"https://medium.com/gdg-vit/editor-almighty-79807100f10c\"\u003eon Medium\u003c/a\u003e under \u003ca href=\"https://dscvit.com/\"\u003eDeveloper Student Clubs VIT, Powered By Google Developers\u003c/a\u003e. \u003ca href=\"https://medium.com/gdg-vit\"\u003eFollow us\u003c/a\u003e on Medium.\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "editor-almighty-2de6",
		"social_image": null,
		"title": "Editor Almighty",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-14T23:32:40.534Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2017-01-01T05:00:00.000Z",
		"published_at": null,
		"canonical_url": null,
		"feed_source_url": "https://medium.com/@angadsharma1016/i-can-see-why-someone-might-think-that-5ce49e40e383",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: I can see why someone might think that.\npublished: false\ndate: 2020-01-17 14:04:05 UTC\ntags: domain-driven-design,software-architectur,software-engineering\ncanonical_url: \n---\n\nI can see why someone might think that. Domain Driven Design (DDD) was designed to keep the domain model at the core of the whole project. Clean Architecture, though derived from the DDD ideology, is a more modern approach to complex problems where we might have more than one type of user interface.\n\nClean Architecture is explicitly designed to be interface agnostic, in addition to the offerings of DDD. Also, Domain Driven Design introduces DAOs (Data Access Objects) whereas _services_ in Clean Architecture are a more expressive approach.",
		"cached_tag_list": "domaindrivendesign, softwarearchitectur, softwareengineering",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "I can see why someone might think that. Domain Driven Design (DDD) was designed to keep the domain mo...",
		"main_image": null,
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/i-can-see-why-someone-might-think-that-11n2-temp-slug-1828283",
		"public_reactions_count": 0,
		"processed_html": "\u003cp\u003eI can see why someone might think that. Domain Driven Design (DDD) was designed to keep the domain model at the core of the whole project. Clean Architecture, though derived from the DDD ideology, is a more modern approach to complex problems where we might have more than one type of user interface.\u003c/p\u003e\n\n\u003cp\u003eClean Architecture is explicitly designed to be interface agnostic, in addition to the offerings of DDD. Also, Domain Driven Design introduces DAOs (Data Access Objects) whereas \u003cem\u003eservices\u003c/em\u003e in Clean Architecture are a more expressive approach.\u003c/p\u003e\n\n",
		"published": false,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "i-can-see-why-someone-might-think-that-11n2-temp-slug-1828283",
		"social_image": null,
		"title": "I can see why someone might think that.",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-05-17T16:16:51.852Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2020-05-21T15:10:27.434Z",
		"published_at": "2020-05-17T17:12:52.657Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "This one time, I pushed some code to my branch and later on I saw that I had pushed the `.env` branch with a lot of secrets on the repo. I panicked. Even more so by seeing that the `.env` file was in all of my commits for that branch. I started looking for git commands that can be used to completely erase the existence of a file from the whole commit history and found a very obsure and VERY long command which for the life of me I can't find again. \n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/xd6yijtlwmzhst9hn0ml.jpg)\n\nAnyways, after a copy paste later, I had created a duplicate commit for each of my commit in the tree. Each pair consisted of one commit that had the `.env` file and one that didn't. My 50 commits became 100 commits and my project lead was of course furious and curious as to why I had pushed 50 more commits at once. I explained the whole situation to him. \n\nTurns out they themselves had pushed the `.env` file on the master branch and all of the credentials inside it were of the development cluster. When I asked why it is so, they said that the repository is private anyway :shrug:. \n\nFeel free to share your stupid work story :)",
		"cached_tag_list": "discuss, watercooler",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 7,
		"description": "This one time, I pushed some code to my branch and later on I saw that I had pushed the .env branch w...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--oFfYpxkX--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/jfs35x8x8sm1qp5frx4j.jpg",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/what-is-the-stupidest-thing-you-have-done-at-work-4k5h",
		"public_reactions_count": 3,
		"processed_html": "\u003cp\u003eThis one time, I pushed some code to my branch and later on I saw that I had pushed the \u003ccode\u003e.env\u003c/code\u003e branch with a lot of secrets on the repo. I panicked. Even more so by seeing that the \u003ccode\u003e.env\u003c/code\u003e file was in all of my commits for that branch. I started looking for git commands that can be used to completely erase the existence of a file from the whole commit history and found a very obsure and VERY long command which for the life of me I can't find again. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dVKake1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xd6yijtlwmzhst9hn0ml.jpg\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dVKake1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xd6yijtlwmzhst9hn0ml.jpg\" alt=\"Alt Text\" loading=\"lazy\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAnyways, after a copy paste later, I had created a duplicate commit for each of my commit in the tree. Each pair consisted of one commit that had the \u003ccode\u003e.env\u003c/code\u003e file and one that didn't. My 50 commits became 100 commits and my project lead was of course furious and curious as to why I had pushed 50 more commits at once. I explained the whole situation to him. \u003c/p\u003e\n\n\u003cp\u003eTurns out they themselves had pushed the \u003ccode\u003e.env\u003c/code\u003e file on the master branch and all of the credentials inside it were of the development cluster. When I asked why it is so, they said that the repository is private anyway 🤷. \u003c/p\u003e\n\n\u003cp\u003eFeel free to share your stupid work story :)\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "what-is-the-stupidest-thing-you-have-done-at-work-4k5h",
		"social_image": null,
		"title": "What is the stupidest thing you have done at work?",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-06-09T00:39:55.069Z",
		"crossposted_at": null,
		"edited_at": "2020-06-15T14:13:37.855Z",
		"last_comment_at": "2020-10-18T14:00:48.396Z",
		"published_at": "2020-06-15T14:13:12.041Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "I started using Xmonad a month ago. Usually I live in a Window Manager for a week or so before writing a post about it but took my sweet time with this particular *WM*, primarily because XMonad has so much to it that even a month of usage doesn't give me enough credibility to do it justice in my posts. Still I will make sure that a beginner can understand how to use it, and most importantly, **whether to use** it.\n\nIf you don't have time to read through the whole thing and want to Keep your confirmation bias at its peak check out [some of the cool things you can do with XMonad](#some-cool-things-you-can-do-with-xmonad)\n\n---\n\n### Key Features\n\n* Suckless in nature and has configuration written in the haskell programming language.\n* Reload and recompile on the fly.\n* Dynamic tiling window manager with the ability to add additional layouts yourself.\n* Custom run menu.\n* Tags and multi-monitor support.\n* Lightweight, no-bloat, and blazing fast\n\n---\n\n## Installation\n\nXMonad has different ways to install on different linux distributions. The main thing to note is that it has a core library (called `xmonad`) and a community library for additional feature support (called `xmonad-contrib`).\n\nInstallation can be done from source (using haskell cabal) or through the distro repositories. For example, in Arch Linux you can run the following to install XMonad:\n\n```sh\nsudo pacman -S xmonad xmonad-contrib\n```\n\nThe installation is different for ubuntu/debian based systems. I suggest you [read the documentation](https://xmonad.org/download.html) for the same.\n\nNote that XMonad itself is minimal but it requires the whole haskell ecosystem to be downloaded on your machine, including the bloated `ghc` haskell compiler and it might install [cabal](https://www.haskell.org/cabal/) too, based on the type of installation you opt for. Generally you can build from source, use cabal, or use the distro repositories to name a few.\n\nTo start xmonad write the following in your `~/.xinitrc` and restart your system.\n\n```sh\nexec xmonad\n```\n\nOnce you do so, you will be greeted with a black screen, and nothing else. You won't even know if you have logged in or not unless you press a right keybinding to spawn a window. You can press `mod + shift + enter` to spawn the terminal, where `mod` is the modifier key (windows key by default).\n\n---\n\n## How to approach configuration\n\nXMonad is not like i3 or dwm where you have a pre-populated configuration file which you can edit to your heart's content. The best way to approach it is to look at other people's configuration files. The alternative would be to learn haskell from scratch, look at the step by step guide and learn how to create a configuration of your own. While it is a fun and well documented strategy, it is a long one. If you want a fast result then you can use and edit what other people have spent months configuring. And no, it does not make you a pirate, in fact it is what the XMonad developers suggest on their [official guide](https://wiki.haskell.org/Xmonad/Config_archive/John_Goerzen's_Configuration).\n\nLet us take a look at a minimal configuration. Your config should reside in the following path: `~/.xmonad/xmonad.hs`. You can recompile and reload your WM in real-time using the `mod + q` keybinding. \n\n```hs\n\nimport XMonad\nimport Data.Monoid\nimport System.Exit\nimport qualified XMonad.StackSet as W\nimport qualified Data.Map        as M\n\nmyTerminal      = \"alacritty\"\nmyFocusFollowsMouse :: Bool\nmyFocusFollowsMouse = True\nmyBorderWidth   = 1\nmyModMask       = mod1Mask\n-- The default number of workspaces (virtual screens) and their names.\nmyWorkspaces    = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\nmyNormalBorderColor  = \"#dddddd\"\nmyFocusedBorderColor = \"#ff0000\"\n```\n\nEven though you might not be familiar with the haskell programming language, still the configuration is quite readable. `mod1Mask` is your standard windows key. If you are like me and prefer to use Alt as a modifier then you can use the `mod4Mask` key. `--` is for comments in haskell. I have added my configuration in the references. Changing keybinding is fairly simple:\n\n\n```hs\n  -- launch dmenu\n    , ((modm,               xK_p     ), spawn \"exe=`dmenu_path | dmenu` \u0026\u0026 eval \\\"exec $exe\\\"\")\n\n    -- close focused window\n    , ((modm .|. shiftMask, xK_c     ), kill)\n\n     -- Rotate through the available layout algorithms\n    , ((modm,               xK_space ), sendMessage NextLayout)\n\n    -- Move focus to the next window\n    , ((modm,               xK_Tab   ), windows W.focusDown)\n```\n\nThe first part in the parenthesis defines the key combination, where `modm` is your modifier key. If you want more than one modifier with a minor key then you can use the `.|.` syntax like I have used to close the focused window. All of these functions are well documented in the step by step guide if you want to learn about them more.\n\n---\n\n**Custom Layouts**\n\nIf you take a look at the end of the xmonad.hs file, there is a configuration map:\n\n```hs\ndefaults = defaultConfig {\n        terminal           = myTerminal,\n        focusFollowsMouse  = myFocusFollowsMouse,\n        borderWidth        = myBorderWidth,\n        modMask            = myModMask,\n        workspaces         = myWorkspaces,\n        normalBorderColor  = myNormalBorderColor,\n        focusedBorderColor = myFocusedBorderColor,\n\n      -- key bindings\n        keys               = myKeys,\n        mouseBindings      = myMouseBindings,\n\n      -- hooks, layouts\n        layoutHook         = myLayout,\n        manageHook         = myManageHook,\n        handleEventHook    = myEventHook,\n        logHook            = myLogHook,\n        startupHook        = myStartupHook\n    }\n```\n\nThis config map is very powerful because you can add custom functions in it for handing some of the basic functionality of XMonad. For example, you can add your custom keymaps, logs, startup applications, mouse bindings, terminal etc. You can even add your custom layout in XMonad, which by default features with the master and stack layout variants. The `myLayout` is a layout map we have defined earlier in the file:\n\n```hs\nmyLayout = tiled ||| Mirror tiled ||| Full\n  where\n    -- default tiling algorithm partitions the screen into two panes\n    tiled   = Tall nmaster delta ratio\n\n    -- The default number of windows in the master pane\n    nmaster = 1\n\n    -- Default proportion of screen occupied by master pane\n    ratio   = 1/2\n\n    -- Percent of screen to increment by when resizing panes\n    delta   = 3/100\n```\n\nYou can create custom modes of your own. Want a layout where 3/4th screen is horizontal and the rest is verticaly split? You can do that easily by following the xmonad documentation. With the help of distrotube, which I have linked in the description, I have some awesome layouts in my copy of the configuration file. Here are some of my favourites:\n\n**Tall Layout**\nThis is the traditional master and stack layout that is very popular in all window managers. The new window comes on the left and all older windows are stacked onto the right hand side of the screen.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/xn528z81f6hz1ztm0tr6.png)\n\n**Grid Layout**\nEach and every window is given the same amount of space on the screen. This results in a grid formation of spawnables.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/ont7ecau7ppu886i41wd.png)\n\n**One Big Layout**\nThis is a custom layout where 4 windows are allowed in tiling mode. After the 4th window, all subsequent windows keep stacking up on the last window. It gives more focus to the top left corner of the screen. It is perfect for a Dev + Ops operation where you might need 2 additional smaller windows for monitoring logs while you develop and deploy using the other two.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/tev7hao3051x9j9a1yir.png)\n\n**Space Layout**\nThis layout is exactly lke the One Big layout, but it adds additonal spaces between windows for a more aesthetically pleasing look. Perfect for r/unixporn.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/4f3fqsdvj9qbhwwsjo95.png)\n\n---\n\n## XMobar, the hackable status bar\n\nBeing suckless also means pluggability. Although XMonad does not impose any restrictions on using any status bars like dzen2, polybar or conky, but if you are going through the pain of learning and installng a WM that uses haskell, might as well use a status bar that goes along with it. XMobar is exactly what you want:\n\n```sh\nsudo pacman -S xmobar\n```\n\nYou essentially need to write an xmobar script which you can then call from your `xmonad.hs` like the following:\n\n```hs\nimport XMonad.Hooks.DynamicLog (dynamicLogWithPP, defaultPP, wrap, pad, xmobarPP, xmobarColor, shorten, PP(..))\n\n-- the following line can be used to include xmobar in xmonad\nxmproc0 \u003c- spawnPipe \"xmobar -x 0 ~/.config/xmobar/xmobarrc0\"\n```\n\nThe language is very straightforward but might feel intimidating at first. For example, [here](https://github.com/L04DB4L4NC3R/DEC/blob/master/config/xmobar/xmobarrc0) are the contents of my xmobarrc.\n\nNotice that you can even define custom fonts and colours for each and every section of your status bar. I have it configured so that it shows me my CPU, memory and hard disk usage, along with my upload and download speeds, battery, date-time and my workspaces.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/mu9pb03fe98ulboph051.png)\n\n---\n\n## Some cool things you can do with XMonad\n\nHere is a list of what xmonad can do (at least what all I have discovered so far).\n\n* **Custom Layout Definition**. You can decide how windows are drawn  on the screen and come up with your own layouts, like this hilarious space layout:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/4f3fqsdvj9qbhwwsjo95.png)\n\n* **Open Applications Grid**. You can switch between all the applications you have open no matter which workspace they are on, using a grid that is spawned on screen:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/wlaygc3wmwgth6n6241d.png)\n\n* **Application Spawn Grid**. You can define a grid to spawn that can be used to open any applications that you want, using the vim-key selection:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/od0yf5slb7mq111gtp0s.png)\n\n* **Promote Master**. In a master and stack layout, you can promote a window to be your master. You can also demote the same. It is ideal when you want to shift focus without swapping the windows entirely.\n\n* **Move a window to every workspace**. You can copy a particular window to each and every workspace. The window will still remain in the first one but its copies will be made across every workspace. It is ideal if you are screen recording and want your front camera window to be on every workspace. You can also kill all other copies except the first one.\n\n* **Custom window rules**. Want your Gimp to always spawn in floating mode? Or your browser to always be on the third workspace. You can do that using managed hooks.\n\n* **Different Prompts**. You don't need to use dmenu as a run prompt. XMonad has a built in run prompt. In fact it has many other prompts, namely manpage prompt, ssh prompt among others. You can even create your own custom prompt for one liner command line outputs.\n\n* **Key Sub-Maps**. Running out of keybindings? You can have custom key maps. For example, for opening custom prompts, you can assign `Mod + p` to prompts and subsequently press the `m` button for the manpage prompt or `r` for the run prompt. So the whole command will end up being `Mod + p + r` for the run prompt and `Mod + p + m` for the manpage prompt.\n\n\n---\n\n## At what cost?\n\nTime! Time is the only thing you need to understand this beast and extend it to your liking. Although you can copy someone else's config, and there is nothing wrong with that, in fact it is a great way to start with XMonad, but learning the basics and being able to create your own config from scratch is an experience altogether. You don't need to be a haskell god for using it, but any functionality you want can be looked up in the awesome haskell wiki called [hackage](). It has syntactical queues and useful examples to build a config of your dreams. \n\n\n## Verdict\n\nWhile XMonad is a very difficult window manager to configure in the beginning, especially if you are doing it from scratch, it is one of the most hackable, fast and reliable window managers that I have ever used. This *WM* is very old but there is a reason it is so popular even now. Some might argue that it is more suckless than dwm itself, and I agree, but it is certainly harder to setup than dwm due to the fact that you might end up writing (or copy pasting) a lot of code in a language you are likely not familiar with.\n\nWith that being said, I think I will use xmonad for another month or so before I make the next window manager hop!\n\n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: :heart: :heart: |\n| Simplicity of Configuration | :heart: |\n| Learning curve (lesser is better) | :heart: :heart: :heart: :heart: |\n| Productivity | :heart: :heart: :heart: :heart: :heart: |\n| Fun | :heart: :heart: :heart: :heart: :heart: |\n\n\n---\n\n## References\n\n* [My XMonad Config](https://github.com/L04DB4L4NC3R/DEC/tree/master/.xmonad)\n* [Derek Taylor's XMonad Config](https://gitlab.com/dwt1/dotfiles/-/tree/master/.xmonad)\n* [Distrotube](https://distrotube.com/)\n* [My Dotfiles](https://github.com/L04DB4L4NC3R/DEC)\n",
		"cached_tag_list": "linux, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 1,
		"description": "I started using Xmonad a month ago. Usually I live in a Window Manager for a week or so before writin...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--GiX1dOnC--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/4da4nr3sfkc39c4fjbxd.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/xmonad-hackability-at-a-cost-390a",
		"public_reactions_count": 41,
		"processed_html": "\u003cp\u003eI started using Xmonad a month ago. Usually I live in a Window Manager for a week or so before writing a post about it but took my sweet time with this particular \u003cem\u003eWM\u003c/em\u003e, primarily because XMonad has so much to it that even a month of usage doesn't give me enough credibility to do it justice in my posts. Still I will make sure that a beginner can understand how to use it, and most importantly, \u003cstrong\u003ewhether to use\u003c/strong\u003e it.\u003c/p\u003e\n\n\u003cp\u003eIf you don't have time to read through the whole thing and want to Keep your confirmation bias at its peak check out \u003ca href=\"#some-cool-things-you-can-do-with-xmonad\"\u003esome of the cool things you can do with XMonad\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"key-features\" href=\"#key-features\"\u003e\n  \u003c/a\u003e\n  Key Features\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eSuckless in nature and has configuration written in the haskell programming language.\u003c/li\u003e\n\u003cli\u003eReload and recompile on the fly.\u003c/li\u003e\n\u003cli\u003eDynamic tiling window manager with the ability to add additional layouts yourself.\u003c/li\u003e\n\u003cli\u003eCustom run menu.\u003c/li\u003e\n\u003cli\u003eTags and multi-monitor support.\u003c/li\u003e\n\u003cli\u003eLightweight, no-bloat, and blazing fast\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"installation\" href=\"#installation\"\u003e\n  \u003c/a\u003e\n  Installation\n\u003c/h2\u003e\n\n\u003cp\u003eXMonad has different ways to install on different linux distributions. The main thing to note is that it has a core library (called \u003ccode\u003exmonad\u003c/code\u003e) and a community library for additional feature support (called \u003ccode\u003exmonad-contrib\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eInstallation can be done from source (using haskell cabal) or through the distro repositories. For example, in Arch Linux you can run the following to install XMonad:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003epacman \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e xmonad xmonad-contrib\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe installation is different for ubuntu/debian based systems. I suggest you \u003ca href=\"https://xmonad.org/download.html\"\u003eread the documentation\u003c/a\u003e for the same.\u003c/p\u003e\n\n\u003cp\u003eNote that XMonad itself is minimal but it requires the whole haskell ecosystem to be downloaded on your machine, including the bloated \u003ccode\u003eghc\u003c/code\u003e haskell compiler and it might install \u003ca href=\"https://www.haskell.org/cabal/\"\u003ecabal\u003c/a\u003e too, based on the type of installation you opt for. Generally you can build from source, use cabal, or use the distro repositories to name a few.\u003c/p\u003e\n\n\u003cp\u003eTo start xmonad write the following in your \u003ccode\u003e~/.xinitrc\u003c/code\u003e and restart your system.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eexec \u003c/span\u003exmonad\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eOnce you do so, you will be greeted with a black screen, and nothing else. You won't even know if you have logged in or not unless you press a right keybinding to spawn a window. You can press \u003ccode\u003emod + shift + enter\u003c/code\u003e to spawn the terminal, where \u003ccode\u003emod\u003c/code\u003e is the modifier key (windows key by default).\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"how-to-approach-configuration\" href=\"#how-to-approach-configuration\"\u003e\n  \u003c/a\u003e\n  How to approach configuration\n\u003c/h2\u003e\n\n\u003cp\u003eXMonad is not like i3 or dwm where you have a pre-populated configuration file which you can edit to your heart's content. The best way to approach it is to look at other people's configuration files. The alternative would be to learn haskell from scratch, look at the step by step guide and learn how to create a configuration of your own. While it is a fun and well documented strategy, it is a long one. If you want a fast result then you can use and edit what other people have spent months configuring. And no, it does not make you a pirate, in fact it is what the XMonad developers suggest on their \u003ca href=\"https://wiki.haskell.org/Xmonad/Config_archive/John_Goerzen's_Configuration\"\u003eofficial guide\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet us take a look at a minimal configuration. Your config should reside in the following path: \u003ccode\u003e~/.xmonad/xmonad.hs\u003c/code\u003e. You can recompile and reload your WM in real-time using the \u003ccode\u003emod + q\u003c/code\u003e keybinding.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight haskell\"\u003e\u003ccode\u003e\n\u003cspan class=\"kr\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eXMonad\u003c/span\u003e\n\u003cspan class=\"kr\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eData.Monoid\u003c/span\u003e\n\u003cspan class=\"kr\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eSystem.Exit\u003c/span\u003e\n\u003cspan class=\"kr\"\u003eimport\u003c/span\u003e \u003cspan class=\"k\"\u003equalified\u003c/span\u003e \u003cspan class=\"nn\"\u003eXMonad.StackSet\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003eW\u003c/span\u003e\n\u003cspan class=\"kr\"\u003eimport\u003c/span\u003e \u003cspan class=\"k\"\u003equalified\u003c/span\u003e \u003cspan class=\"nn\"\u003eData.Map\u003c/span\u003e        \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003eM\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emyTerminal\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\"alacritty\"\u003c/span\u003e\n\u003cspan class=\"n\"\u003emyFocusFollowsMouse\u003c/span\u003e \u003cspan class=\"o\"\u003e::\u003c/span\u003e \u003cspan class=\"kt\"\u003eBool\u003c/span\u003e\n\u003cspan class=\"n\"\u003emyFocusFollowsMouse\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eTrue\u003c/span\u003e\n\u003cspan class=\"n\"\u003emyBorderWidth\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"n\"\u003emyModMask\u003c/span\u003e       \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emod1Mask\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e-- The default number of workspaces (virtual screens) and their names.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emyWorkspaces\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\"1\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"2\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"3\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"4\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"5\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"6\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"7\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"8\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\"9\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003emyNormalBorderColor\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\"#dddddd\"\u003c/span\u003e\n\u003cspan class=\"n\"\u003emyFocusedBorderColor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\"#ff0000\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eEven though you might not be familiar with the haskell programming language, still the configuration is quite readable. \u003ccode\u003emod1Mask\u003c/code\u003e is your standard windows key. If you are like me and prefer to use Alt as a modifier then you can use the \u003ccode\u003emod4Mask\u003c/code\u003e key. \u003ccode\u003e--\u003c/code\u003e is for comments in haskell. I have added my configuration in the references. Changing keybinding is fairly simple:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight haskell\"\u003e\u003ccode\u003e  \u003cspan class=\"c1\"\u003e-- launch dmenu\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003emodm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e               \u003cspan class=\"n\"\u003exK_p\u003c/span\u003e     \u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003espawn\u003c/span\u003e \u003cspan class=\"s\"\u003e\"exe=`dmenu_path | dmenu` \u0026amp;\u0026amp; eval \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\"\u003c/span\u003e\u003cspan class=\"s\"\u003eexec $exe\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\"\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e-- close focused window\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003emodm\u003c/span\u003e \u003cspan class=\"o\"\u003e.|.\u003c/span\u003e \u003cspan class=\"n\"\u003eshiftMask\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003exK_c\u003c/span\u003e     \u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ekill\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n     \u003cspan class=\"c1\"\u003e-- Rotate through the available layout algorithms\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003emodm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e               \u003cspan class=\"n\"\u003exK_space\u003c/span\u003e \u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003esendMessage\u003c/span\u003e \u003cspan class=\"kt\"\u003eNextLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e-- Move focus to the next window\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003emodm\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e               \u003cspan class=\"n\"\u003exK_Tab\u003c/span\u003e   \u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ewindows\u003c/span\u003e \u003cspan class=\"kt\"\u003eW\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efocusDown\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe first part in the parenthesis defines the key combination, where \u003ccode\u003emodm\u003c/code\u003e is your modifier key. If you want more than one modifier with a minor key then you can use the \u003ccode\u003e.|.\u003c/code\u003e syntax like I have used to close the focused window. All of these functions are well documented in the step by step guide if you want to learn about them more.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003cp\u003e\u003cstrong\u003eCustom Layouts\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you take a look at the end of the xmonad.hs file, there is a configuration map:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight haskell\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003edefaults\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edefaultConfig\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eterminal\u003c/span\u003e           \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyTerminal\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efocusFollowsMouse\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyFocusFollowsMouse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eborderWidth\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyBorderWidth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003emodMask\u003c/span\u003e            \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyModMask\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eworkspaces\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyWorkspaces\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003enormalBorderColor\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyNormalBorderColor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efocusedBorderColor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyFocusedBorderColor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n      \u003cspan class=\"c1\"\u003e-- key bindings\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ekeys\u003c/span\u003e               \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyKeys\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003emouseBindings\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyMouseBindings\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\n      \u003cspan class=\"c1\"\u003e-- hooks, layouts\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elayoutHook\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyLayout\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003emanageHook\u003c/span\u003e         \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyManageHook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehandleEventHook\u003c/span\u003e    \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyEventHook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003elogHook\u003c/span\u003e            \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyLogHook\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estartupHook\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emyStartupHook\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis config map is very powerful because you can add custom functions in it for handing some of the basic functionality of XMonad. For example, you can add your custom keymaps, logs, startup applications, mouse bindings, terminal etc. You can even add your custom layout in XMonad, which by default features with the master and stack layout variants. The \u003ccode\u003emyLayout\u003c/code\u003e is a layout map we have defined earlier in the file:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight haskell\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003emyLayout\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etiled\u003c/span\u003e \u003cspan class=\"o\"\u003e|||\u003c/span\u003e \u003cspan class=\"kt\"\u003eMirror\u003c/span\u003e \u003cspan class=\"n\"\u003etiled\u003c/span\u003e \u003cspan class=\"o\"\u003e|||\u003c/span\u003e \u003cspan class=\"kt\"\u003eFull\u003c/span\u003e\n  \u003cspan class=\"kr\"\u003ewhere\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e-- default tiling algorithm partitions the screen into two panes\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etiled\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kt\"\u003eTall\u003c/span\u003e \u003cspan class=\"n\"\u003enmaster\u003c/span\u003e \u003cspan class=\"n\"\u003edelta\u003c/span\u003e \u003cspan class=\"n\"\u003eratio\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e-- The default number of windows in the master pane\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enmaster\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e-- Default proportion of screen occupied by master pane\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eratio\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e-- Percent of screen to increment by when resizing panes\u003c/span\u003e\n    \u003cspan class=\"n\"\u003edelta\u003c/span\u003e   \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYou can create custom modes of your own. Want a layout where 3/4th screen is horizontal and the rest is verticaly split? You can do that easily by following the xmonad documentation. With the help of distrotube, which I have linked in the description, I have some awesome layouts in my copy of the configuration file. Here are some of my favourites:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTall Layout\u003c/strong\u003e\u003cbr\u003e\nThis is the traditional master and stack layout that is very popular in all window managers. The new window comes on the left and all older windows are stacked onto the right hand side of the screen.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--frslDocj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xn528z81f6hz1ztm0tr6.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--frslDocj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xn528z81f6hz1ztm0tr6.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrid Layout\u003c/strong\u003e\u003cbr\u003e\nEach and every window is given the same amount of space on the screen. This results in a grid formation of spawnables.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ob_ralvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ont7ecau7ppu886i41wd.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ob_ralvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ont7ecau7ppu886i41wd.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOne Big Layout\u003c/strong\u003e\u003cbr\u003e\nThis is a custom layout where 4 windows are allowed in tiling mode. After the 4th window, all subsequent windows keep stacking up on the last window. It gives more focus to the top left corner of the screen. It is perfect for a Dev + Ops operation where you might need 2 additional smaller windows for monitoring logs while you develop and deploy using the other two.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sJ_ZpWCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tev7hao3051x9j9a1yir.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sJ_ZpWCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tev7hao3051x9j9a1yir.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSpace Layout\u003c/strong\u003e\u003cbr\u003e\nThis layout is exactly lke the One Big layout, but it adds additonal spaces between windows for a more aesthetically pleasing look. Perfect for r/unixporn.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_Aem7icI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4f3fqsdvj9qbhwwsjo95.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_Aem7icI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4f3fqsdvj9qbhwwsjo95.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch2\u003e\n  \u003ca name=\"xmobar-the-hackable-status-bar\" href=\"#xmobar-the-hackable-status-bar\"\u003e\n  \u003c/a\u003e\n  XMobar, the hackable status bar\n\u003c/h2\u003e\n\n\u003cp\u003eBeing suckless also means pluggability. Although XMonad does not impose any restrictions on using any status bars like dzen2, polybar or conky, but if you are going through the pain of learning and installng a WM that uses haskell, might as well use a status bar that goes along with it. XMobar is exactly what you want:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003epacman \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e xmobar\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYou essentially need to write an xmobar script which you can then call from your \u003ccode\u003exmonad.hs\u003c/code\u003e like the following:\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight haskell\"\u003e\u003ccode\u003e\u003cspan class=\"kr\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eXMonad.Hooks.DynamicLog\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nf\"\u003edynamicLogWithPP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003edefaultPP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003ewrap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003epad\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003exmobarPP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003exmobarColor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nf\"\u003eshorten\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ePP\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e..\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e-- the following line can be used to include xmobar in xmonad\u003c/span\u003e\n\u003cspan class=\"n\"\u003exmproc0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan class=\"n\"\u003espawnPipe\u003c/span\u003e \u003cspan class=\"s\"\u003e\"xmobar -x 0 ~/.config/xmobar/xmobarrc0\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe language is very straightforward but might feel intimidating at first. For example, \u003ca href=\"https://github.com/L04DB4L4NC3R/DEC/blob/master/config/xmobar/xmobarrc0\"\u003ehere\u003c/a\u003e are the contents of my xmobarrc.\u003c/p\u003e\n\n\u003cp\u003eNotice that you can even define custom fonts and colours for each and every section of your status bar. I have it configured so that it shows me my CPU, memory and hard disk usage, along with my upload and download speeds, battery, date-time and my workspaces.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cp__guMZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mu9pb03fe98ulboph051.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cp__guMZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mu9pb03fe98ulboph051.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"9\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"some-cool-things-you-can-do-with-xmonad\" href=\"#some-cool-things-you-can-do-with-xmonad\"\u003e\n  \u003c/a\u003e\n  Some cool things you can do with XMonad\n\u003c/h2\u003e\n\n\u003cp\u003eHere is a list of what xmonad can do (at least what all I have discovered so far).\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eCustom Layout Definition\u003c/strong\u003e. You can decide how windows are drawn  on the screen and come up with your own layouts, like this hilarious space layout:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_Aem7icI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4f3fqsdvj9qbhwwsjo95.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_Aem7icI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4f3fqsdvj9qbhwwsjo95.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eOpen Applications Grid\u003c/strong\u003e. You can switch between all the applications you have open no matter which workspace they are on, using a grid that is spawned on screen:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C_VjrKqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wlaygc3wmwgth6n6241d.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--C_VjrKqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wlaygc3wmwgth6n6241d.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"721\" height=\"392\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eApplication Spawn Grid\u003c/strong\u003e. You can define a grid to spawn that can be used to open any applications that you want, using the vim-key selection:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RcSt47cw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/od0yf5slb7mq111gtp0s.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--RcSt47cw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/od0yf5slb7mq111gtp0s.png\" alt=\"Alt Text\" loading=\"lazy\" width=\"791\" height=\"508\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePromote Master\u003c/strong\u003e. In a master and stack layout, you can promote a window to be your master. You can also demote the same. It is ideal when you want to shift focus without swapping the windows entirely.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eMove a window to every workspace\u003c/strong\u003e. You can copy a particular window to each and every workspace. The window will still remain in the first one but its copies will be made across every workspace. It is ideal if you are screen recording and want your front camera window to be on every workspace. You can also kill all other copies except the first one.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCustom window rules\u003c/strong\u003e. Want your Gimp to always spawn in floating mode? Or your browser to always be on the third workspace. You can do that using managed hooks.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eDifferent Prompts\u003c/strong\u003e. You don't need to use dmenu as a run prompt. XMonad has a built in run prompt. In fact it has many other prompts, namely manpage prompt, ssh prompt among others. You can even create your own custom prompt for one liner command line outputs.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eKey Sub-Maps\u003c/strong\u003e. Running out of keybindings? You can have custom key maps. For example, for opening custom prompts, you can assign \u003ccode\u003eMod + p\u003c/code\u003e to prompts and subsequently press the \u003ccode\u003em\u003c/code\u003e button for the manpage prompt or \u003ccode\u003er\u003c/code\u003e for the run prompt. So the whole command will end up being \u003ccode\u003eMod + p + r\u003c/code\u003e for the run prompt and \u003ccode\u003eMod + p + m\u003c/code\u003e for the manpage prompt.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"at-what-cost\" href=\"#at-what-cost\"\u003e\n  \u003c/a\u003e\n  At what cost?\n\u003c/h2\u003e\n\n\u003cp\u003eTime! Time is the only thing you need to understand this beast and extend it to your liking. Although you can copy someone else's config, and there is nothing wrong with that, in fact it is a great way to start with XMonad, but learning the basics and being able to create your own config from scratch is an experience altogether. You don't need to be a haskell god for using it, but any functionality you want can be looked up in the awesome haskell wiki called \u003ca href=\"\"\u003ehackage\u003c/a\u003e. It has syntactical queues and useful examples to build a config of your dreams. \u003c/p\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"verdict\" href=\"#verdict\"\u003e\n  \u003c/a\u003e\n  Verdict\n\u003c/h2\u003e\n\n\u003cp\u003eWhile XMonad is a very difficult window manager to configure in the beginning, especially if you are doing it from scratch, it is one of the most hackable, fast and reliable window managers that I have ever used. This \u003cem\u003eWM\u003c/em\u003e is very old but there is a reason it is so popular even now. Some might argue that it is more suckless than dwm itself, and I agree, but it is certainly harder to setup than dwm due to the fact that you might end up writing (or copy pasting) a lot of code in a language you are likely not familiar with.\u003c/p\u003e\n\n\u003cp\u003eWith that being said, I think I will use xmonad for another month or so before I make the next window manager hop!\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n\n\u003chr\u003e\n\n\u003ch2\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/DEC/tree/master/.xmonad\"\u003eMy XMonad Config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gitlab.com/dwt1/dotfiles/-/tree/master/.xmonad\"\u003eDerek Taylor's XMonad Config\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://distrotube.com/\"\u003eDistrotube\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/DEC\"\u003eMy Dotfiles\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "xmonad-hackability-at-a-cost-390a",
		"social_image": null,
		"title": "XMonad: Hackability, At a Cost",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-06-22T18:16:01.310Z",
		"crossposted_at": "2020-06-25T09:07:54.331Z",
		"edited_at": null,
		"last_comment_at": "2021-02-23T07:30:06.329Z",
		"published_at": "2020-06-25T09:07:54.331Z",
		"canonical_url": null,
		"feed_source_url": "https://medium.com/gdg-vit/my-mom-uses-archlinux-e678f29b0df7",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "\n\nIt is almost impossible to install and operate Arch Linux without prior linux knowledge. So why does my mom use it?\n\n[Check out my latest article for DSC VIT »](https://medium.com/gdg-vit/my-mom-uses-archlinux-e678f29b0df7?source=rss----7ebddf9721d---4)",
		"cached_tag_list": "family, technology, linux",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 1,
		"description": "It is almost impossible to install and operate Arch Linux without prior linux knowledge. So why does...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--iUKhBN5E--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/lt4ye6h77rmmm8xeffvv.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/my-mom-uses-archlinux-cf1",
		"public_reactions_count": 3,
		"processed_html": "\u003cp\u003eIt is almost impossible to install and operate Arch Linux without prior linux knowledge. So why does my mom use it?\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://medium.com/gdg-vit/my-mom-uses-archlinux-e678f29b0df7?source=rss----7ebddf9721d---4\"\u003eCheck out my latest article for DSC VIT »\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "my-mom-uses-archlinux-cf1",
		"social_image": null,
		"title": "My Mom Uses ArchLinux",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-07-02T13:38:37.229Z",
		"crossposted_at": "2020-07-02T16:13:24.620Z",
		"edited_at": "2020-07-02T16:15:30.837Z",
		"last_comment_at": "2020-07-03T04:27:25.191Z",
		"published_at": "2020-07-02T16:13:24.620Z",
		"canonical_url": null,
		"feed_source_url": "https://medium.com/gdg-vit/i-got-tired-of-being-un-informed-not-anymore-35945c221674",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "How I started reading more than 100 articles a week!\n\nFood for thought: How many times have you wished you could read more? And how many times have you felt disheartened by the fact that you are not reading enough? Well you would feel good to know that it is NOT you who is entirely to blame.\n\nThe internet has become a mess of different sources of information and all of them seem relevant, if not legitimate, primarily due to the fact that in this age of misinformation, a lot of us have evolved with an inherent radar for detecting bullsh\\*t. Still nowadays there are too many sources of legitimate information too, and it keeps on getting outdated and updated.\n\n\u003e Then there is the talk of **Embracing the Apotheosis of Apps_._** With each one claiming to bring new content to the table and each one aggravating imposter syndrome.\n\n![](https://cdn-images-1.medium.com/max/1024/0*_7hHxlOWJgdR91Lp)\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@healing_photographer?utm_source=medium\u0026amp;utm_medium=referral\"\u003eAarón Blanco Tejedor\u003c/a\u003e on \u003ca href=\"https://unsplash.com?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\n\nI am a developer by profession. So naturally I love to stay up to date on my GitHub feed. But then I also manage an organization so I need to be updated on that front too. Then I keep on getting notifications of subreddits that I follow, along with daily and weekly newsletters of a plethora of blogs being spammed in my mailbox. Moreover, platforms like DEV and Medium swarm you with an array of meaningful information to churn. I become swarmed! And for the longest of time, this demotivated me. Even though I had a lot of meaningful content at a touch of a button.\n\nIn this blog I am going to talk about how I optimized my workflow by organizing information. Subsequently, I am also going to answer the following:\n\n- How to get into a habit of reading more\n- How to _stay_ true to your habit\n\n### Step 1: Bringing Everything to one place\n\nDitch the so-called _apotheosis of apps._ Ditch your Firefox bookmarks, delete your news apps, unsubscribe to all mailing lists. You don’t need them. THEY need you. They are the ones monetizing your data, which is costlier than oil these days. They are the ones earning from your suffering. If you are waking up in the morning and opening fifteen apps for checking your feed on different social media, then you are doing something wrong.\n\nYou can see where this is headed. Rest assured this blog is not an introduction to RSS. If you want that, [go here](https://en.wikipedia.org/wiki/RSS). RSS feeds (or atom feeds), allow you to subscribe to your own feed and view it from special apps called _RSS Readers._ Almost every blogging and social media platform has an RSS feed. Just look for this sign:\n\n![](https://cdn-images-1.medium.com/max/128/1*SSgD6uBB2cZhcdj1lkGlcA.png)\u003cfigcaption\u003eRSS icon (look for this in every website)\u003c/figcaption\u003e\n\nThe benefit of RSS is that now you only have one application that you need to open, which is your RSS feed reader. You can then get all of your latest news, blogs and feed directly into it. I use newsboat, which is a terminal based RSS reader:\n\n![](https://cdn-images-1.medium.com/max/1024/1*to-nAA2-FZyWENlmfJkVGA.png)\u003cfigcaption\u003e\u003cem\u003enewsboat\u003c/em\u003e\u003c/figcaption\u003e\n\nYou can see that I have my GitHub, Reddit feeds along with so much more. Having this much variety of information would have otherwise required me to have all of the associated web pages bookmarked or their applications installed. This saves a LOT of time. Whenever I start my day anew, I just stir some coffee and go through my RSS feed to get all caught up with everything going around which is relevant to me.\n\n### Step 2: Know How to Podcast\n\nHaving all of the relevant information in one place means having your favourite podcasts as well. They might require you to open the webpage to listen to them. But you can integrate everything in your reader (at least an advanced reader such as newsboat).\n\nThe way I have configured my workflow is that whenever there is a podcast I like to listen to, I just press a _macro_ which I have configured in newsboat, and it automatically plays that podcast in my favourite audio/video player. This saves me the time it takes to open up a browser and press controls that are alien to me, at least when compared to my favourite video player.\n\n### Step 3: Take Notes\n\nIf you really like something and want to remember it, then what will you do? Surely **you won’t take hand written notes** on it, especially when everything is written in a concise form anyway. At least I know I won’t. Then it is time to integrate your note distribution application with your RSS reader.\n\n![](https://cdn-images-1.medium.com/max/1024/1*0uamBudX9y9MkCwA6q1tVw.gif)\n\nNow if your reader isn’t advanced enough then you can simply save the URL of the particular post you like. I like to integrate _Joplin_ with my newsboat RSS reader. So, with just a press of a _macro,_ I can save any blog/podcast I like (in markdown of course) and sync it across devices (yes, Joplin even has a mobile application).\n\n### Step 4: Choose the Right Font\n\nStudies such as [_A study of fonts Designed for Screen Display_](https://dl.acm.org/doi/pdf/10.1145/274644.274658) claim that human performance in terms of both reading and productivity when working with a screen is affected greatly by the font used. Times New Roman is a great font for writing research papers and journals, but it was made with print in format rather than screen. Fonts like Georgia (serif) and Verdana (sans serif) are a good fit for screens. In the aforementioned research, subjective perception of fonts favoured Georgia, the serif font and participants found it easier to read on the screen than Times New Roman and ended up performing better in the case of the former.\n\n![](https://cdn-images-1.medium.com/max/791/1*HOAqY0wZZI6w8diVytnRgA.png)\u003cfigcaption\u003eJetBrainsMonoExtraBold font\u003c/figcaption\u003e\n\nI, personally, am a huge fan of the _Nerd Fonts,_ especially monospaced fonts. Some of my choices include **JetBrainsMono** and **SauceCodePro,** and their respective bold variants. The photo you see above is an example of the _JetBrainsMonoExtraBold Nerd Font._ Notice how relaxing it is to read. Each and every character is distinguishable from the other and it makes skimming an overall pleasure. I like to use a keyboard with my laptop, so usually I am an extra few inch away from the screen, which makes this font perfect for me as I don’t have to strain my eyes or squint while reading. Note that it is about how comfortable you get, so check out a couple of fonts and decide which one suits your best. It will change your life.\n\n### Step 5: Dark or Light Theme?\n\nNow I am a programmer, so you might be thinking you already know what the answer to this question is. The fact of the matter is that although my IDEs and GTK applications are dark themed, but my Joplin app uses the solarized light theme. This is because usually note making or reading is the thing I do in the morning, when my house is flooded with light.\n\nUsing dark theme when your background is full of light can actually be bad for your eyes. So, make the choice between using dark at “certain times” of the day, or stick to one or two apps that are always light themed. If you are a vampire and light burns you then you can go for a more solarized theme like I have in the photo above. It is soothing to the eyes without harming them in the long run when being used in a brightly lit environment.\n\n### Step 6: Prioritize Through Visibility\n\nOkay so you got your feed reader and note application set up. But what will make you even more productive is you can prioritize certain textual information more than the others. For example, the title of a blog should be the first thing you see, and should be catchy to the eyes. _Red_ is my preferred colour of choice. Although red stings the eyes a bit (more so than other colours), but it is complemented by the fact that we only read the title for a few seconds.\n\n![](https://cdn-images-1.medium.com/max/1024/1*UZIoxOSVYM-DExp6zBlSig.png)\u003cfigcaption\u003eJetBrainsMono Nerd Font with text prioritized through visibility\u003c/figcaption\u003e\n\nThe body of the document is where the fun begins. It is the part which requires most of your attention, after the title, so it should be catchy to the eyes. But it is the part which you read the most, so it is also supposed to be soothing. I prefer a green body. All of the other metadata like the author and data, are not very important to me so I give them a blue colour on a dark background. Note that these colours depend on the background of your choice to. So, sort out step 5 then take a look at optimizing visibility.\n\n### Step 7: Variety Variety Varaiety\n\nOne bad thing that I have seen a lot of specialists do is that they try to stick to reading content which is relevant to only their stream. This lack of variety leads to a feeling of repetition and might be a reason for your rut. Moreover, doing this regularly limits your perspective and you find it increasingly difficult to have a professional talk to people who are not part of your specialization. Everyone loves listening to romantic music from time to time. But imagine listening to ONLY romantic music!\n\n\u003e Spice up your reading time with variety. Don’t let an essential brain-workout bore you. If you can’t eat pizza every day for the rest of your life, then why should you do the same thing with reading?\n\nEnsure variety in what you read. This allows you to stay up to date with more than one fields and allows you to connect to people who are not in yours. In addition to a bunch of programming feeds, I also have some feeds related to comedy/humor, as well as about people and politics, and I am an avid reader about mental health too. Hackernews is one of my favourite feeds. Primarily because it offers a variety of blogs/news which somehow connect to my field.\n\n### Step 8: Tell People About It\n\nMake a public commitment. Tell people about your workflow and what you are trying to achieve. And moreover, share what you have learnt with other people. Don’t be selfish or competitive, after all, knowledge is a source which multiplies the more you spread it.\n\nStart small. Find a person and tell them at least one interesting thing that you read every day. Whether it is a fact, a joke, or some interesting blog about how Deno is the next Node.js. It doesn’t matter. The source must be textual. This ensures instant gratification and gives you a reason to carry on until you have successfully incubated the bookworm in you.\n\n### Closing Note\n\n\u003e Take a day, take two days, take a week. You will never form a habit if you don’t find joy in doing it. Find what works for you and make it your workflow.\n\n### References\n\n- [L04DB4L4NC3R/DEC](https://github.com/L04DB4L4NC3R/DEC/tree/master/config/newsboat)\n- [The Podcast-ical Journey: Since 2004](https://medium.com/gdg-vit/the-podcast-ical-journey-since-2004-87c2955cb206)\n\n* * *\n\nThis Article was originally published [on Medium](https://medium.com/gdg-vit/editor-almighty-79807100f10c) under [Developer Student Clubs VIT, Powered By Google Developers](https://dscvit.com/). [Follow us](https://medium.com/gdg-vit) on Medium.",
		"cached_tag_list": "productivity",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 3,
		"description": "How I started reading more than 100 articles a week!  Food for thought: How many times have you wishe...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--kt78Oz-5--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/00zeywh6zdjm1a52ccdk.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/i-got-tired-of-being-un-informed-not-anymore-3aeg",
		"public_reactions_count": 11,
		"processed_html": "\u003cp\u003eHow I started reading more than 100 articles a week!\u003c/p\u003e\n\n\u003cp\u003eFood for thought: How many times have you wished you could read more? And how many times have you felt disheartened by the fact that you are not reading enough? Well you would feel good to know that it is NOT you who is entirely to blame.\u003c/p\u003e\n\n\u003cp\u003eThe internet has become a mess of different sources of information and all of them seem relevant, if not legitimate, primarily due to the fact that in this age of misinformation, a lot of us have evolved with an inherent radar for detecting bullsh*t. Still nowadays there are too many sources of legitimate information too, and it keeps on getting outdated and updated.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThen there is the talk of \u003cstrong\u003eEmbracing the Apotheosis of Apps_._\u003c/strong\u003e With each one claiming to bring new content to the table and each one aggravating imposter syndrome.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gWnZ1rzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2A_7hHxlOWJgdR91Lp\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gWnZ1rzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2A_7hHxlOWJgdR91Lp\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"583\"\u003e\u003c/a\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@healing_photographer?utm_source=medium\u0026amp;utm_medium=referral\"\u003eAarón Blanco Tejedor\u003c/a\u003e on \u003ca href=\"https://unsplash.com?utm_source=medium\u0026amp;utm_medium=referral\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003cp\u003eI am a developer by profession. So naturally I love to stay up to date on my GitHub feed. But then I also manage an organization so I need to be updated on that front too. Then I keep on getting notifications of subreddits that I follow, along with daily and weekly newsletters of a plethora of blogs being spammed in my mailbox. Moreover, platforms like DEV and Medium swarm you with an array of meaningful information to churn. I become swarmed! And for the longest of time, this demotivated me. Even though I had a lot of meaningful content at a touch of a button.\u003c/p\u003e\n\n\u003cp\u003eIn this blog I am going to talk about how I optimized my workflow by organizing information. Subsequently, I am also going to answer the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow to get into a habit of reading more\u003c/li\u003e\n\u003cli\u003eHow to \u003cem\u003estay\u003c/em\u003e true to your habit\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"step-1-bringing-everything-to-one-place\" href=\"#step-1-bringing-everything-to-one-place\"\u003e\n  \u003c/a\u003e\n  Step 1: Bringing Everything to one place\n\u003c/h3\u003e\n\n\u003cp\u003eDitch the so-called \u003cem\u003eapotheosis of apps.\u003c/em\u003e Ditch your Firefox bookmarks, delete your news apps, unsubscribe to all mailing lists. You don’t need them. THEY need you. They are the ones monetizing your data, which is costlier than oil these days. They are the ones earning from your suffering. If you are waking up in the morning and opening fifteen apps for checking your feed on different social media, then you are doing something wrong.\u003c/p\u003e\n\n\u003cp\u003eYou can see where this is headed. Rest assured this blog is not an introduction to RSS. If you want that, \u003ca href=\"https://en.wikipedia.org/wiki/RSS\"\u003ego here\u003c/a\u003e. RSS feeds (or atom feeds), allow you to subscribe to your own feed and view it from special apps called \u003cem\u003eRSS Readers.\u003c/em\u003e Almost every blogging and social media platform has an RSS feed. Just look for this sign:\u003c/p\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6MK9n8Kh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/128/1%2ASSgD6uBB2cZhcdj1lkGlcA.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--6MK9n8Kh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/128/1%2ASSgD6uBB2cZhcdj1lkGlcA.png\" alt=\"\" loading=\"lazy\" width=\"128\" height=\"128\"\u003e\u003c/a\u003e\u003cfigcaption\u003eRSS icon (look for this in every website)\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003cp\u003eThe benefit of RSS is that now you only have one application that you need to open, which is your RSS feed reader. You can then get all of your latest news, blogs and feed directly into it. I use newsboat, which is a terminal based RSS reader:\u003c/p\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vKqj9yFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2Ato-nAA2-FZyWENlmfJkVGA.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vKqj9yFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2Ato-nAA2-FZyWENlmfJkVGA.png\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"564\"\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003cem\u003enewsboat\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can see that I have my GitHub, Reddit feeds along with so much more. Having this much variety of information would have otherwise required me to have all of the associated web pages bookmarked or their applications installed. This saves a LOT of time. Whenever I start my day anew, I just stir some coffee and go through my RSS feed to get all caught up with everything going around which is relevant to me.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"step-2-know-how-to-podcast\" href=\"#step-2-know-how-to-podcast\"\u003e\n  \u003c/a\u003e\n  Step 2: Know How to Podcast\n\u003c/h3\u003e\n\n\u003cp\u003eHaving all of the relevant information in one place means having your favourite podcasts as well. They might require you to open the webpage to listen to them. But you can integrate everything in your reader (at least an advanced reader such as newsboat).\u003c/p\u003e\n\n\u003cp\u003eThe way I have configured my workflow is that whenever there is a podcast I like to listen to, I just press a \u003cem\u003emacro\u003c/em\u003e which I have configured in newsboat, and it automatically plays that podcast in my favourite audio/video player. This saves me the time it takes to open up a browser and press controls that are alien to me, at least when compared to my favourite video player.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"step-3-take-notes\" href=\"#step-3-take-notes\"\u003e\n  \u003c/a\u003e\n  Step 3: Take Notes\n\u003c/h3\u003e\n\n\u003cp\u003eIf you really like something and want to remember it, then what will you do? Surely \u003cstrong\u003eyou won’t take hand written notes\u003c/strong\u003e on it, especially when everything is written in a concise form anyway. At least I know I won’t. Then it is time to integrate your note distribution application with your RSS reader.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nttrFZN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2A0uamBudX9y9MkCwA6q1tVw.gif\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nttrFZN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2A0uamBudX9y9MkCwA6q1tVw.gif\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"495\" data-animated=\"true\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNow if your reader isn’t advanced enough then you can simply save the URL of the particular post you like. I like to integrate \u003cem\u003eJoplin\u003c/em\u003e with my newsboat RSS reader. So, with just a press of a \u003cem\u003emacro,\u003c/em\u003e I can save any blog/podcast I like (in markdown of course) and sync it across devices (yes, Joplin even has a mobile application).\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"step-4-choose-the-right-font\" href=\"#step-4-choose-the-right-font\"\u003e\n  \u003c/a\u003e\n  Step 4: Choose the Right Font\n\u003c/h3\u003e\n\n\u003cp\u003eStudies such as \u003ca href=\"https://dl.acm.org/doi/pdf/10.1145/274644.274658\"\u003e\u003cem\u003eA study of fonts Designed for Screen Display\u003c/em\u003e\u003c/a\u003e claim that human performance in terms of both reading and productivity when working with a screen is affected greatly by the font used. Times New Roman is a great font for writing research papers and journals, but it was made with print in format rather than screen. Fonts like Georgia (serif) and Verdana (sans serif) are a good fit for screens. In the aforementioned research, subjective perception of fonts favoured Georgia, the serif font and participants found it easier to read on the screen than Times New Roman and ended up performing better in the case of the former.\u003c/p\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zF9YIpRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/791/1%2AHOAqY0wZZI6w8diVytnRgA.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zF9YIpRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/791/1%2AHOAqY0wZZI6w8diVytnRgA.png\" alt=\"\" loading=\"lazy\" width=\"791\" height=\"342\"\u003e\u003c/a\u003e\u003cfigcaption\u003eJetBrainsMonoExtraBold font\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003cp\u003eI, personally, am a huge fan of the \u003cem\u003eNerd Fonts,\u003c/em\u003e especially monospaced fonts. Some of my choices include \u003cstrong\u003eJetBrainsMono\u003c/strong\u003e and \u003cstrong\u003eSauceCodePro,\u003c/strong\u003e and their respective bold variants. The photo you see above is an example of the \u003cem\u003eJetBrainsMonoExtraBold Nerd Font.\u003c/em\u003e Notice how relaxing it is to read. Each and every character is distinguishable from the other and it makes skimming an overall pleasure. I like to use a keyboard with my laptop, so usually I am an extra few inch away from the screen, which makes this font perfect for me as I don’t have to strain my eyes or squint while reading. Note that it is about how comfortable you get, so check out a couple of fonts and decide which one suits your best. It will change your life.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"step-5-dark-or-light-theme\" href=\"#step-5-dark-or-light-theme\"\u003e\n  \u003c/a\u003e\n  Step 5: Dark or Light Theme?\n\u003c/h3\u003e\n\n\u003cp\u003eNow I am a programmer, so you might be thinking you already know what the answer to this question is. The fact of the matter is that although my IDEs and GTK applications are dark themed, but my Joplin app uses the solarized light theme. This is because usually note making or reading is the thing I do in the morning, when my house is flooded with light.\u003c/p\u003e\n\n\u003cp\u003eUsing dark theme when your background is full of light can actually be bad for your eyes. So, make the choice between using dark at “certain times” of the day, or stick to one or two apps that are always light themed. If you are a vampire and light burns you then you can go for a more solarized theme like I have in the photo above. It is soothing to the eyes without harming them in the long run when being used in a brightly lit environment.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"step-6-prioritize-through-visibility\" href=\"#step-6-prioritize-through-visibility\"\u003e\n  \u003c/a\u003e\n  Step 6: Prioritize Through Visibility\n\u003c/h3\u003e\n\n\u003cp\u003eOkay so you got your feed reader and note application set up. But what will make you even more productive is you can prioritize certain textual information more than the others. For example, the title of a blog should be the first thing you see, and should be catchy to the eyes. \u003cem\u003eRed\u003c/em\u003e is my preferred colour of choice. Although red stings the eyes a bit (more so than other colours), but it is complemented by the fact that we only read the title for a few seconds.\u003c/p\u003e\n\n\u003cp\u003e\u003cfigure\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R3K-m_v5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AUZIoxOSVYM-DExp6zBlSig.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R3K-m_v5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AUZIoxOSVYM-DExp6zBlSig.png\" alt=\"\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003cfigcaption\u003eJetBrainsMono Nerd Font with text prioritized through visibility\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\n\n\u003cp\u003eThe body of the document is where the fun begins. It is the part which requires most of your attention, after the title, so it should be catchy to the eyes. But it is the part which you read the most, so it is also supposed to be soothing. I prefer a green body. All of the other metadata like the author and data, are not very important to me so I give them a blue colour on a dark background. Note that these colours depend on the background of your choice to. So, sort out step 5 then take a look at optimizing visibility.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"step-7-variety-variety-varaiety\" href=\"#step-7-variety-variety-varaiety\"\u003e\n  \u003c/a\u003e\n  Step 7: Variety Variety Varaiety\n\u003c/h3\u003e\n\n\u003cp\u003eOne bad thing that I have seen a lot of specialists do is that they try to stick to reading content which is relevant to only their stream. This lack of variety leads to a feeling of repetition and might be a reason for your rut. Moreover, doing this regularly limits your perspective and you find it increasingly difficult to have a professional talk to people who are not part of your specialization. Everyone loves listening to romantic music from time to time. But imagine listening to ONLY romantic music!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eSpice up your reading time with variety. Don’t let an essential brain-workout bore you. If you can’t eat pizza every day for the rest of your life, then why should you do the same thing with reading?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eEnsure variety in what you read. This allows you to stay up to date with more than one fields and allows you to connect to people who are not in yours. In addition to a bunch of programming feeds, I also have some feeds related to comedy/humor, as well as about people and politics, and I am an avid reader about mental health too. Hackernews is one of my favourite feeds. Primarily because it offers a variety of blogs/news which somehow connect to my field.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"step-8-tell-people-about-it\" href=\"#step-8-tell-people-about-it\"\u003e\n  \u003c/a\u003e\n  Step 8: Tell People About It\n\u003c/h3\u003e\n\n\u003cp\u003eMake a public commitment. Tell people about your workflow and what you are trying to achieve. And moreover, share what you have learnt with other people. Don’t be selfish or competitive, after all, knowledge is a source which multiplies the more you spread it.\u003c/p\u003e\n\n\u003cp\u003eStart small. Find a person and tell them at least one interesting thing that you read every day. Whether it is a fact, a joke, or some interesting blog about how Deno is the next Node.js. It doesn’t matter. The source must be textual. This ensures instant gratification and gives you a reason to carry on until you have successfully incubated the bookworm in you.\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"closing-note\" href=\"#closing-note\"\u003e\n  \u003c/a\u003e\n  Closing Note\n\u003c/h3\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTake a day, take two days, take a week. You will never form a habit if you don’t find joy in doing it. Find what works for you and make it your workflow.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"references\" href=\"#references\"\u003e\n  \u003c/a\u003e\n  References\n\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/L04DB4L4NC3R/DEC/tree/master/config/newsboat\"\u003eL04DB4L4NC3R/DEC\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/gdg-vit/the-podcast-ical-journey-since-2004-87c2955cb206\"\u003eThe Podcast-ical Journey: Since 2004\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003cp\u003eThis Article was originally published \u003ca href=\"https://medium.com/gdg-vit/editor-almighty-79807100f10c\"\u003eon Medium\u003c/a\u003e under \u003ca href=\"https://dscvit.com/\"\u003eDeveloper Student Clubs VIT, Powered By Google Developers\u003c/a\u003e. \u003ca href=\"https://medium.com/gdg-vit\"\u003eFollow us\u003c/a\u003e on Medium.\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "i-got-tired-of-being-un-informed-not-anymore-3aeg",
		"social_image": null,
		"title": "I Got Tired of Being Un-Informed | Not Anymore",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-09-28T14:17:03.695Z",
		"crossposted_at": "2020-09-30T18:05:37.791Z",
		"edited_at": null,
		"last_comment_at": "2020-09-30T18:05:37.791Z",
		"published_at": "2020-09-30T18:05:37.791Z",
		"canonical_url": null,
		"feed_source_url": "https://medium.com/gdg-vit/self-hosting-to-the-xtreme-server-on-mobile-2b205d9bd84d",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "\n\nHow I got a server to run on Android without rooting it.\n\n[Continue reading on DSC VIT Vellore »](https://medium.com/gdg-vit/self-hosting-to-the-xtreme-server-on-mobile-2b205d9bd84d?source=rss-14899f3695b2------2)",
		"cached_tag_list": "android, go, tutorial",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "How I got a server to run on Android without rooting it.  Continue reading on DSC VIT Vellore »",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--wAsnQfdj--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/gggfkhzoe339diti8xm2.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/self-hosting-to-the-xtreme-server-on-mobile-33b",
		"public_reactions_count": 7,
		"processed_html": "\u003cp\u003eHow I got a server to run on Android without rooting it.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://medium.com/gdg-vit/self-hosting-to-the-xtreme-server-on-mobile-2b205d9bd84d?source=rss-14899f3695b2------2\"\u003eContinue reading on DSC VIT Vellore »\u003c/a\u003e\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "self-hosting-to-the-xtreme-server-on-mobile-33b",
		"social_image": null,
		"title": "Self Hosting to the Xtreme | Server on Mobile?!",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-10-08T09:36:48.647Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2021-08-22T07:59:09.574Z",
		"published_at": "2020-10-08T13:29:24.354Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "InstantWM is a window manager to **InstantOS**, which is an Arch-Linux based operating system that aims to work right out of the box and also cater to power users. It went through a lot of scrutiny and controversy in it's development process, primarily due to faulty reviews from a particular youtuber ([distrotube](https://www.youtube.com/channel/UCVls1GmFKf6WlTraIb_IaJg)). \n\nThe developer subsequently [released a video](https://youtu.be/XTjAO3yUqpQ) with some bugs either excavated, or altogether nullified by the faulty review. When the smoke settled, people started reviewing InstantOS, but no one has really made a standalone review of **InstantWM**, which is the window manager that the OS uses, and can be installed on any distribution. I feel like this window manager deserves its own \"series\" of reviews.\n\n\n---\n\n### First Impressions\n\nI usually start my reviews with features and the installation procedure, but for this particular WM, I felt that a first impressions review is necessary due to the underlying controversy. \n\n\u003e It is the best and the most versatile window manager I have used in a while\n\nConsidering I have used stable and extendible WMs such as xmonad and i3, instantWM bring a lot to the table. On first glance, it looks like a [dwm](https://dwm.suckless.org/) fork. That is because it is, but only 40% of the suckless code is remaining in the instantWM repository.\n\nIt's versatility comes in the fact that it is both a tiling and a floating window manager. It has a menu like [awesome](https://awesomewm.org/), and you can even use it with a mouse instead of a keyboard, which makes it suitable for newcomers as well. It's modernity is in the fact that it is both minimal and fashionable at the same time, with it's attractive window animations and compsiting effects without sacrificing any functionality.\n\n---\n\n### Features\n\nInstantWM is no joke. It is feature rich without sacrificing on functionality and usability. Some of its main features include.\n\n* Patchless configuration (you don't have to manually patch things into the config)\n* Modern window transition animations without sacrificing on speed\n* Full multimedia and multimonitor support out of the box\n* **Instantutils** offers a rich set of utilities for support\n* Hybrid window manager (floating + tiling)\n* Tag system reminiscent of dwm, with tag pinning support as well\n\n---\n\n### Installation\n\nIf you are coming from a *dwm* background, you can simply skip this section. \n\nYou need to clone the instantWM repository and build it from source. This is the same way dwm works. Even the configuration is done in the code itself, and needs to recompile after every change.\n\n```sh\ngit clone --depth=1 https://github.com/instantOS/instantWM.git\ncd instantWM\n./build.sh\n```\n\nThese commands will generate a binary. You can then logout of your current DE or WM and login to instantWW, either using a [display manager](https://dev.to/l04db4l4nc3r/the-linux-desktop-deep-dive-1jh3#display-manager), or through changing your `~/.xinitrc` to say the following:\n\n```sh\nexec instantwm\n```\n\nBefore logging into instantWM, you can download the **instantutils**, which are available in the linux source repositories. We will touch on what these utilities do later on.\n\n```sh\n# instantutils is available in the AUR\nyay -S instantutils\n```\n\nInstantWM uses the [st](https://st.suckless.org/) terminal by default, so make sure you either have an st build or you change the configuration (`termcmd`) to point to another terminal.\n\n---\n\n### Tiling Modes\n\n[The official web page](https://instantos.io/youtube/layouts#rundown-of-all-layouts) has a rundown of all instantWM layouts. Some high utility ones are:\n\n**Grid Layout**\n\nThis layout arranges windows in a grid of equally sized windows.\n\n![Grid Layout](https://dev-to-uploads.s3.amazonaws.com/i/dj23c0z4x8qo7m1qe69c.png)\n\n**Centered Master**\n\nOne of m favourite layouts, centered master is a layout where the window at the center is the master and all other windows pop up on the left and right hand sides.\n\n![Centered Master](https://dev-to-uploads.s3.amazonaws.com/i/6nr5wljsibvp84fpqgfj.png)\n\n**Horizontal Stack Layouts - 1 and 2**\n\nThese are your traditional tiling modes but tiling is done either horizontally or vertically.\n\n![TTT](https://dev-to-uploads.s3.amazonaws.com/i/hiheo2vnmaunwtaaceas.png)\n\n![===](https://dev-to-uploads.s3.amazonaws.com/i/dzkz9uiyn94rwcl4qwz0.png)\n\n**Overview**\n\nThis layout stacks windows in a way that each window is visible and is unchanged from its size in the previous layout.\n\n![Overview Layout](https://dev-to-uploads.s3.amazonaws.com/i/b30fdkh5pyfne7vcuwik.png)\n\n**Half Stack**\n\nThe master area is tiled normally, but the stack works like the monocle layout with all windows layered on top of each other.\n\n![Half Stack](https://dev-to-uploads.s3.amazonaws.com/i/ej43e6mmkw8pdnp0c0dh.png)\n\nOther layouts are:\n\n* Floating\n* Monocle\n* Tiling Layout (Master and Stack)\n\n---\n\n### Overlay Windows\n\nHave you ever played games where you get an overlay console when you press the tilde button, where you can enter commands? You can do the same thing to your windows in instantWM. \n\n![Overlay](https://dev-to-uploads.s3.amazonaws.com/i/r6ej5ro40sdgfhty8mds.png)\n\n`super` + `control` + `w` overlays your current window on top of the other windows and essentially locks it in place so it cannot be accidentaly removed. You can then press the same keybinding to undo the action. This gives you a lot of power when you are developing as well as looking at documentation, or a manpage. You can [checkout available overlay animations](https://youtu.be/T40cfbBVBQw).\n\n---\n\n### Configuration\n\nInstantWM can be configured the same way you configure *dwm*. If you haven't read my blog on how to configure dwm, you can give it a read here:\n\n{% link https://dev.to/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji %}\n\nOr you can directly go into the [configuration section](https://dev.to/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji#configuration-and-patching), to checkout how to tweak instantWM to your liking. \n\n**NOTE**: A key difference between InstantWM and dwm configuration is that instantWM does not have a patch and diff system like dwm, and additional has a `build.sh` script that you can run everytime you change a configuration.\n\n---\n\n\n### Multiple Monitor Support\n\nI do not write about multiple monitor support a lot when I am doing my window manager reviews since the WMs that support this feature usually require `xrandr` commands to be run in order to set the display, but instantWM comes with an amazing utility for the same.\n\nThe moment you plug your external display in, an instantmenu pops up, asking if you want to mirror or extend your display out to the secondary display. This is a great feature that I hope more window managers incorporate.\n\n{% youtube cH2b7rz6xNU %}\n\nYou can easily switch between monitors and send current windows to the secondary display without leaving your keyboard, as shown in the video above.\n\n---\n\n### Conclusion\n\nInstantWM and its instantutils can be easily downloaded and configured for any system and you don't necessarily have to have instantOS for the best experience. People in the WM community are used to using minimal and lightweight WMs which often compromise on aesthetics. It is great to see a window manager with a modern user experience that is still minimal enough to be installed and used on low power machines.\n\nAs of now (when this article was written), instantWM is still in beta and actively looking for contributors. I am glad to see that the developer is also building towards ARM and 32 bit support. I can recommend this window manager to beginners as well as power users due to its outstanding versatility.\n\n\n\n| Judgement Rubric | Rating |\n|:-----------------:|:------:|\n| Simplicity of use | :heart: :heart: :heart: :heart: |\n| Simplicity of Configuration | :heart: :heart: |\n| Learning curve (lesser is better) | :heart: :heart: |\n| Productivity | :heart: :heart: :heart: :heart: :heart: |\n| Fun | :heart: :heart: :heart: :heart: :heart: |",
		"cached_tag_list": "linux, tutorial, opensource, ubuntu",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 3,
		"description": "InstantWM is a window manager to InstantOS, which is an Arch-Linux based operating system that aims t...",
		"main_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--fc08k5ty--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/0yxz2ohhis98yv0gxc95.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/instantwm-animations-in-a-window-manager-48f4",
		"public_reactions_count": 12,
		"processed_html": "\u003cp\u003eInstantWM is a window manager to \u003cstrong\u003eInstantOS\u003c/strong\u003e, which is an Arch-Linux based operating system that aims to work right out of the box and also cater to power users. It went through a lot of scrutiny and controversy in it's development process, primarily due to faulty reviews from a particular youtuber (\u003ca href=\"https://www.youtube.com/channel/UCVls1GmFKf6WlTraIb_IaJg\"\u003edistrotube\u003c/a\u003e). \u003c/p\u003e\n\n\u003cp\u003eThe developer subsequently \u003ca href=\"https://youtu.be/XTjAO3yUqpQ\"\u003ereleased a video\u003c/a\u003e with some bugs either excavated, or altogether nullified by the faulty review. When the smoke settled, people started reviewing InstantOS, but no one has really made a standalone review of \u003cstrong\u003eInstantWM\u003c/strong\u003e, which is the window manager that the OS uses, and can be installed on any distribution. I feel like this window manager deserves its own \"series\" of reviews.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"first-impressions\" href=\"#first-impressions\"\u003e\n  \u003c/a\u003e\n  First Impressions\n\u003c/h3\u003e\n\n\u003cp\u003eI usually start my reviews with features and the installation procedure, but for this particular WM, I felt that a first impressions review is necessary due to the underlying controversy. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIt is the best and the most versatile window manager I have used in a while\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eConsidering I have used stable and extendible WMs such as xmonad and i3, instantWM bring a lot to the table. On first glance, it looks like a \u003ca href=\"https://dwm.suckless.org/\"\u003edwm\u003c/a\u003e fork. That is because it is, but only 40% of the suckless code is remaining in the instantWM repository.\u003c/p\u003e\n\n\u003cp\u003eIt's versatility comes in the fact that it is both a tiling and a floating window manager. It has a menu like \u003ca href=\"https://awesomewm.org/\"\u003eawesome\u003c/a\u003e, and you can even use it with a mouse instead of a keyboard, which makes it suitable for newcomers as well. It's modernity is in the fact that it is both minimal and fashionable at the same time, with it's attractive window animations and compsiting effects without sacrificing any functionality.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"features\" href=\"#features\"\u003e\n  \u003c/a\u003e\n  Features\n\u003c/h3\u003e\n\n\u003cp\u003eInstantWM is no joke. It is feature rich without sacrificing on functionality and usability. Some of its main features include.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ePatchless configuration (you don't have to manually patch things into the config)\u003c/li\u003e\n\u003cli\u003eModern window transition animations without sacrificing on speed\u003c/li\u003e\n\u003cli\u003eFull multimedia and multimonitor support out of the box\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eInstantutils\u003c/strong\u003e offers a rich set of utilities for support\u003c/li\u003e\n\u003cli\u003eHybrid window manager (floating + tiling)\u003c/li\u003e\n\u003cli\u003eTag system reminiscent of dwm, with tag pinning support as well\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"installation\" href=\"#installation\"\u003e\n  \u003c/a\u003e\n  Installation\n\u003c/h3\u003e\n\n\u003cp\u003eIf you are coming from a \u003cem\u003edwm\u003c/em\u003e background, you can simply skip this section. \u003c/p\u003e\n\n\u003cp\u003eYou need to clone the instantWM repository and build it from source. This is the same way dwm works. Even the configuration is done in the code itself, and needs to recompile after every change.\u003cbr\u003e\n\u003c/p\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003egit clone \u003cspan class=\"nt\"\u003e--depth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e1 https://github.com/instantOS/instantWM.git\n\u003cspan class=\"nb\"\u003ecd \u003c/span\u003einstantWM\n./build.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eThese commands will generate a binary. You can then logout of your current DE or WM and login to instantWW, either using a \u003ca href=\"https://dev.to/l04db4l4nc3r/the-linux-desktop-deep-dive-1jh3#display-manager\"\u003edisplay manager\u003c/a\u003e, or through changing your \u003ccode\u003e~/.xinitrc\u003c/code\u003e to say the following:\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eexec \u003c/span\u003einstantwm\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eBefore logging into instantWM, you can download the \u003cstrong\u003einstantutils\u003c/strong\u003e, which are available in the linux source repositories. We will touch on what these utilities do later on.\u003cbr\u003e\n\u003c/p\u003e\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e# instantutils is available in the AUR\u003c/span\u003e\nyay \u003cspan class=\"nt\"\u003e-S\u003c/span\u003e instantutils\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003cp\u003eInstantWM uses the \u003ca href=\"https://st.suckless.org/\"\u003est\u003c/a\u003e terminal by default, so make sure you either have an st build or you change the configuration (\u003ccode\u003etermcmd\u003c/code\u003e) to point to another terminal.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"tiling-modes\" href=\"#tiling-modes\"\u003e\n  \u003c/a\u003e\n  Tiling Modes\n\u003c/h3\u003e\n\n\u003cp\u003e\u003ca href=\"https://instantos.io/youtube/layouts#rundown-of-all-layouts\"\u003eThe official web page\u003c/a\u003e has a rundown of all instantWM layouts. Some high utility ones are:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGrid Layout\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThis layout arranges windows in a grid of equally sized windows.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s---_q3XuOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dj23c0z4x8qo7m1qe69c.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s---_q3XuOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dj23c0z4x8qo7m1qe69c.png\" alt=\"Grid Layout\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCentered Master\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOne of m favourite layouts, centered master is a layout where the window at the center is the master and all other windows pop up on the left and right hand sides.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zVKiTDnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6nr5wljsibvp84fpqgfj.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zVKiTDnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6nr5wljsibvp84fpqgfj.png\" alt=\"Centered Master\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHorizontal Stack Layouts - 1 and 2\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThese are your traditional tiling modes but tiling is done either horizontally or vertically.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zDbUzP6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hiheo2vnmaunwtaaceas.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--zDbUzP6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hiheo2vnmaunwtaaceas.png\" alt=\"TTT\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--S0tCPkBu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dzkz9uiyn94rwcl4qwz0.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--S0tCPkBu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dzkz9uiyn94rwcl4qwz0.png\" alt=\"===\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOverview\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThis layout stacks windows in a way that each window is visible and is unchanged from its size in the previous layout.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Zh_WN4-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b30fdkh5pyfne7vcuwik.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Zh_WN4-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b30fdkh5pyfne7vcuwik.png\" alt=\"Overview Layout\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHalf Stack\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe master area is tiled normally, but the stack works like the monocle layout with all windows layered on top of each other.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--APqmnZrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ej43e6mmkw8pdnp0c0dh.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--APqmnZrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ej43e6mmkw8pdnp0c0dh.png\" alt=\"Half Stack\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eOther layouts are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFloating\u003c/li\u003e\n\u003cli\u003eMonocle\u003c/li\u003e\n\u003cli\u003eTiling Layout (Master and Stack)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"overlay-windows\" href=\"#overlay-windows\"\u003e\n  \u003c/a\u003e\n  Overlay Windows\n\u003c/h3\u003e\n\n\u003cp\u003eHave you ever played games where you get an overlay console when you press the tilde button, where you can enter commands? You can do the same thing to your windows in instantWM. \u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WpPYJtEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6ej5ro40sdgfhty8mds.png\" class=\"article-body-image-wrapper\"\u003e\u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WpPYJtEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6ej5ro40sdgfhty8mds.png\" alt=\"Overlay\" loading=\"lazy\" width=\"880\" height=\"495\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003esuper\u003c/code\u003e + \u003ccode\u003econtrol\u003c/code\u003e + \u003ccode\u003ew\u003c/code\u003e overlays your current window on top of the other windows and essentially locks it in place so it cannot be accidentaly removed. You can then press the same keybinding to undo the action. This gives you a lot of power when you are developing as well as looking at documentation, or a manpage. You can \u003ca href=\"https://youtu.be/T40cfbBVBQw\"\u003echeckout available overlay animations\u003c/a\u003e.\u003c/p\u003e\n\n\u003chr\u003e\n\u003ch3\u003e\n  \u003ca name=\"configuration\" href=\"#configuration\"\u003e\n  \u003c/a\u003e\n  Configuration\n\u003c/h3\u003e\n\n\u003cp\u003eInstantWM can be configured the same way you configure \u003cem\u003edwm\u003c/em\u003e. If you haven't read my blog on how to configure dwm, you can give it a read here:\u003c/p\u003e\n\n\n\u003cdiv class=\"ltag__link\"\u003e\n  \u003ca href=\"/l04db4l4nc3r\" class=\"ltag__link__link\"\u003e\n    \u003cdiv class=\"ltag__link__pic\"\u003e\n      \u003cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Llv5B6bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---Q54OzKD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197603/a4320666-6350-4843-b37e-07bcfa168f55.png\" alt=\"l04db4l4nc3r\" loading=\"lazy\"\u003e\n    \u003c/div\u003e\n  \u003c/a\u003e\n  \u003ca href=\"/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji\" class=\"ltag__link__link\"\u003e\n    \u003cdiv class=\"ltag__link__content\"\u003e\n      \u003ch2\u003eDwm: The Suckless Window Manager\u003c/h2\u003e\n      \u003ch3\u003eAngad Sharma ・ Apr 7 '20 ・ 7 min read\u003c/h3\u003e\n      \u003cdiv class=\"ltag__link__taglist\"\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#linux\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#opensource\u003c/span\u003e\n        \u003cspan class=\"ltag__link__tag\"\u003e#ubuntu\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eOr you can directly go into the \u003ca href=\"https://dev.to/l04db4l4nc3r/dwm-the-suckless-window-manager-1ji#configuration-and-patching\"\u003econfiguration section\u003c/a\u003e, to checkout how to tweak instantWM to your liking. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: A key difference between InstantWM and dwm configuration is that instantWM does not have a patch and diff system like dwm, and additional has a \u003ccode\u003ebuild.sh\u003c/code\u003e script that you can run everytime you change a configuration.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"multiple-monitor-support\" href=\"#multiple-monitor-support\"\u003e\n  \u003c/a\u003e\n  Multiple Monitor Support\n\u003c/h3\u003e\n\n\u003cp\u003eI do not write about multiple monitor support a lot when I am doing my window manager reviews since the WMs that support this feature usually require \u003ccode\u003exrandr\u003c/code\u003e commands to be run in order to set the display, but instantWM comes with an amazing utility for the same.\u003c/p\u003e\n\n\u003cp\u003eThe moment you plug your external display in, an instantmenu pops up, asking if you want to mirror or extend your display out to the secondary display. This is a great feature that I hope more window managers incorporate.\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/cH2b7rz6xNU\" allowfullscreen loading=\"lazy\"\u003e\n\u003c/iframe\u003e\n\u003c/p\u003e\n\n\u003cp\u003eYou can easily switch between monitors and send current windows to the secondary display without leaving your keyboard, as shown in the video above.\u003c/p\u003e\n\n\n\u003chr\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"conclusion\" href=\"#conclusion\"\u003e\n  \u003c/a\u003e\n  Conclusion\n\u003c/h3\u003e\n\n\u003cp\u003eInstantWM and its instantutils can be easily downloaded and configured for any system and you don't necessarily have to have instantOS for the best experience. People in the WM community are used to using minimal and lightweight WMs which often compromise on aesthetics. It is great to see a window manager with a modern user experience that is still minimal enough to be installed and used on low power machines.\u003c/p\u003e\n\n\u003cp\u003eAs of now (when this article was written), instantWM is still in beta and actively looking for contributors. I am glad to see that the developer is also building towards ARM and 32 bit support. I can recommend this window manager to beginners as well as power users due to its outstanding versatility.\u003c/p\u003e\n\n\u003cdiv class=\"table-wrapper-paragraph\"\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eJudgement Rubric\u003c/th\u003e\n\u003cth\u003eRating\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of use\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSimplicity of Configuration\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eLearning curve (lesser is better)\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eProductivity\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFun\u003c/td\u003e\n\u003ctd\u003e❤️ ❤️ ❤️ ❤️ ❤️\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "instantwm-animations-in-a-window-manager-48f4",
		"social_image": null,
		"title": "InstantWM: Animations in a Window Manager!",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-10-28T12:44:58.381Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2017-01-01T05:00:00.000Z",
		"published_at": null,
		"canonical_url": null,
		"feed_source_url": "https://medium.com/@angadsharma1016/no-need-for-do-here-4a2f0f78595b",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: No need for \"do\" here\npublished: false\ndate: 2020-10-28 12:35:56 UTC\ntags: \ncanonical_url: \n---\n\nNo need for \"do\" here",
		"cached_tag_list": "",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "No need for \"do\" here",
		"main_image": null,
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/no-need-for-do-here-2g12-temp-slug-6385116",
		"public_reactions_count": 0,
		"processed_html": "\u003cp\u003eNo need for \"do\" here\u003c/p\u003e\n\n",
		"published": false,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "no-need-for-do-here-2g12-temp-slug-6385116",
		"social_image": null,
		"title": "No need for \"do\" here",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-10-28T12:44:58.764Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2017-01-01T05:00:00.000Z",
		"published_at": null,
		"canonical_url": null,
		"feed_source_url": "https://medium.com/@angadsharma1016/realized-sounds-a-bit-patronizing-we-learnt-can-be-more-suitable-here-dd67d3a5870e",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: Realized sounds a bit patronizing. \"We learnt\" can be more suitable here\npublished: false\ndate: 2020-10-28 12:37:46 UTC\ntags: \ncanonical_url: \n---\n\nRealized sounds a bit patronizing. \"We learnt\" can be more suitable here",
		"cached_tag_list": "",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "Realized sounds a bit patronizing. \"We learnt\" can be more suitable here",
		"main_image": null,
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/realized-sounds-a-bit-patronizing-we-learnt-can-be-more-suitable-here-36dm-temp-slug-3275330",
		"public_reactions_count": 0,
		"processed_html": "\u003cp\u003eRealized sounds a bit patronizing. \"We learnt\" can be more suitable here\u003c/p\u003e\n\n",
		"published": false,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "realized-sounds-a-bit-patronizing-we-learnt-can-be-more-suitable-here-36dm-temp-slug-3275330",
		"social_image": null,
		"title": "Realized sounds a bit patronizing. \"We learnt\" can be more suitable here",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-10-28T12:44:59.145Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2017-01-01T05:00:00.000Z",
		"published_at": null,
		"canonical_url": null,
		"feed_source_url": "https://medium.com/@angadsharma1016/actually-or-in-reality-57dd71138158",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: actually, or \"in reality\"\npublished: false\ndate: 2020-10-28 12:39:55 UTC\ntags: \ncanonical_url: \n---\n\nactually, or \"in reality\"",
		"cached_tag_list": "",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "actually, or \"in reality\"",
		"main_image": null,
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/actually-or-in-reality-36g1-temp-slug-4834533",
		"public_reactions_count": 0,
		"processed_html": "\u003cp\u003eactually, or \"in reality\"\u003c/p\u003e\n\n",
		"published": false,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "actually-or-in-reality-36g1-temp-slug-4834533",
		"social_image": null,
		"title": "actually, or \"in reality\"",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-10-28T12:44:59.529Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2017-01-01T05:00:00.000Z",
		"published_at": null,
		"canonical_url": null,
		"feed_source_url": "https://medium.com/@angadsharma1016/not-be-good-a-metric-a9aa5571f3e1",
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "---\ntitle: \"not be good a metric\"\npublished: false\ndate: 2020-10-28 12:44:40 UTC\ntags: \ncanonical_url: \n---\n\n\"not be good a metric\"",
		"cached_tag_list": "",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 0,
		"description": "\"not be good a metric\"",
		"main_image": null,
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/not-be-good-a-metric-1p8c-temp-slug-5570050",
		"public_reactions_count": 0,
		"processed_html": "\u003cp\u003e\"not be good a metric\"\u003c/p\u003e\n\n",
		"published": false,
		"published_from_feed": true,
		"show_comments": true,
		"slug": "not-be-good-a-metric-1p8c-temp-slug-5570050",
		"social_image": null,
		"title": "not be good a metric",
		"video": null,
		"video_code": null
	},
	{
		"created_at": "2020-12-20T08:17:54.884Z",
		"crossposted_at": null,
		"edited_at": null,
		"last_comment_at": "2021-09-20T17:43:13.636Z",
		"published_at": "2020-12-20T08:36:44.411Z",
		"canonical_url": null,
		"feed_source_url": null,
		"video_closed_caption_track_url": null,
		"video_source_url": null,
		"video_thumbnail_url": null,
		"body_markdown": "We live in a time where anyone can write code. What matters is how efficiently you write and test it and of course how you distribute it. Continuous integration has become a major part of GitOps and github actions has make it very easy to write simple configurations for CI and associate it with an event on your code repository (for example: on code release).\n\n### The need\n\nThe Github Actions platform provides developers with the power to test and package their code on github's infrastructure for free. But like all free things, this also comes with a catch. You can only run your actions as per a limited quota provided by github. This forces developers to compromise their pipeline to ensure that CI builds run less often. What if I told you that your cheap credit-card sized raspberry pi can be used as a machine to run all of your github actions automatically? Well such is the power of SBCs(single board computers) in 2020.\n\nEver since the launch of raspberry pi 4, single board computing has reached new heights, with more than [35 million](https://youtu.be/ZZ2ub2RZ0o8) copies sold as per the publishing date of this article, with around 44% of the units sold to industrial customers. In light of this development, this article will be all the more relevant to a wide variety of consumers willing to run more workloads from their internal networks and self hosted comfort zones.\n\nLet us start by elaborating why you would want your github actions to run on the raspberry pi:\n\n* Unlimited github actions quota\n* No need to expose infrastructure from the internal network\n* Low power draw\n* Full and sole ownership of data\n\n\tIf you are an enterprise user (or part of an organization that is an enterprise on github), you can pretty much configure your entire organization actions to run on self hosted solutions, but if you are an individual user, you can only do so on a per-repository level. With this information, let us get started with how to offload your github actions to your raspberry pi.\n\n### Steps to run your own actions on a raspberry pi\n\n1. Firstly you will need a raspberry pi with any linux distribution. I prefer Ubuntu server 20.04. Run a quick update and upgrade on it to set it up. Remember that you don't need to configure any kind of port forwarding since this solution will work even if you raspberry pi is not exposed on the external network. You do need an internet connection though since your pi will have to connect to the GitHub servers for this to work.\n\n2. Go to the **Actions** setting in your repository (remember, this is a repository level setting rather than a global one. If you are an enterprise user, you can go into your enterprise settings for the same) and press the option to add a new Self Hosted Runner.\n\n3. In the add self hosted runner section, choose operating system as linux and architecture as ARM64 if you are using a 64 bit raspberry pi, or just ARM if you are using a 32 bit version.\n\n4. The add self hosted runners section gives you the necessary commands to run inside your raspberry pi to set everything up. After you have pasted those commands one by one, you are ready to starting the service in your pi that will listen or any dispatched actions and perform them internally.\n\n5. `./run.sh` allows you to start listening immediately. If you want this service to run permanently in the background, you can run the following command:\n\n```sh\nsudo ./svc.sh install\nsudo ./svc.sh start\n```\n\n6. Configure your actions to use this infrastructure by using the keyword self-hosted in the actions configuration for the repository for which you have set up the actions. For example:\n\n```yml\nname: Go Build\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n\n  build:\n    name: Build\n    runs-on: self-hosted\n    steps:\n\n    - name: Set up Go 1.x\n      uses: actions/setup-go@v2\n      with:\n        go-version: ^1.15\n\n    - name: Check out code into the Go module directory\n      uses: actions/checkout@v2\n\n    - name: Run Build\n      run: |\n        make build\n```\n\n### Conclusion\n\nRaspberry pi attracts a huge community of enthusiasts who use it for various use cases. There have been amazing projects like [the turing pi](https://turingpi.com/), which make use of the more compact [Compute module 4](https://www.raspberrypi.org/products/compute-module-4/?variant=raspberry-pi-cm4001000) of the raspberry pi to provide server grade computing. Projects like these have enabled developers and system administrators to get cheap compute for self hosted workloads. Easy GitOps is just another fun yet sustainable solution to configure to your own satisfaction, whether it be for a fun project or an industrial use case.",
		"cached_tag_list": "linux, github, devops",
		"cached_user_name": "Angad Sharma",
		"cached_user_username": "l04db4l4nc3r",
		"comments_count": 3,
		"description": "We live in a time where anyone can write code. What matters is how efficiently you write and test it...",
		"main_image": "https://dev-to-uploads.s3.amazonaws.com/i/l4qsymko94ycduuttpfg.png",
		"main_image_background_hex_color": "#dddddd",
		"path": "/l04db4l4nc3r/self-hosted-github-actions-using-raspberry-pi-212m",
		"public_reactions_count": 13,
		"processed_html": "\u003cp\u003eWe live in a time where anyone can write code. What matters is how efficiently you write and test it and of course how you distribute it. Continuous integration has become a major part of GitOps and github actions has make it very easy to write simple configurations for CI and associate it with an event on your code repository (for example: on code release).\u003c/p\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"the-need\" href=\"#the-need\"\u003e\n  \u003c/a\u003e\n  The need\n\u003c/h3\u003e\n\n\u003cp\u003eThe Github Actions platform provides developers with the power to test and package their code on github's infrastructure for free. But like all free things, this also comes with a catch. You can only run your actions as per a limited quota provided by github. This forces developers to compromise their pipeline to ensure that CI builds run less often. What if I told you that your cheap credit-card sized raspberry pi can be used as a machine to run all of your github actions automatically? Well such is the power of SBCs(single board computers) in 2020.\u003c/p\u003e\n\n\u003cp\u003eEver since the launch of raspberry pi 4, single board computing has reached new heights, with more than \u003ca href=\"https://youtu.be/ZZ2ub2RZ0o8\"\u003e35 million\u003c/a\u003e copies sold as per the publishing date of this article, with around 44% of the units sold to industrial customers. In light of this development, this article will be all the more relevant to a wide variety of consumers willing to run more workloads from their internal networks and self hosted comfort zones.\u003c/p\u003e\n\n\u003cp\u003eLet us start by elaborating why you would want your github actions to run on the raspberry pi:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnlimited github actions quota\u003c/li\u003e\n\u003cli\u003eNo need to expose infrastructure from the internal network\u003c/li\u003e\n\u003cli\u003eLow power draw\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFull and sole ownership of data\u003c/p\u003e\n\n\u003cp\u003eIf you are an enterprise user (or part of an organization that is an enterprise on github), you can pretty much configure your entire organization actions to run on self hosted solutions, but if you are an individual user, you can only do so on a per-repository level. With this information, let us get started with how to offload your github actions to your raspberry pi.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003e\n  \u003ca name=\"steps-to-run-your-own-actions-on-a-raspberry-pi\" href=\"#steps-to-run-your-own-actions-on-a-raspberry-pi\"\u003e\n  \u003c/a\u003e\n  Steps to run your own actions on a raspberry pi\n\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eFirstly you will need a raspberry pi with any linux distribution. I prefer Ubuntu server 20.04. Run a quick update and upgrade on it to set it up. Remember that you don't need to configure any kind of port forwarding since this solution will work even if you raspberry pi is not exposed on the external network. You do need an internet connection though since your pi will have to connect to the GitHub servers for this to work.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGo to the \u003cstrong\u003eActions\u003c/strong\u003e setting in your repository (remember, this is a repository level setting rather than a global one. If you are an enterprise user, you can go into your enterprise settings for the same) and press the option to add a new Self Hosted Runner.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn the add self hosted runner section, choose operating system as linux and architecture as ARM64 if you are using a 64 bit raspberry pi, or just ARM if you are using a 32 bit version.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe add self hosted runners section gives you the necessary commands to run inside your raspberry pi to set everything up. After you have pasted those commands one by one, you are ready to starting the service in your pi that will listen or any dispatched actions and perform them internally.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003e./run.sh\u003c/code\u003e allows you to start listening immediately. If you want this service to run permanently in the background, you can run the following command:\u003cbr\u003e\n\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo\u003c/span\u003e ./svc.sh \u003cspan class=\"nb\"\u003einstall\nsudo\u003c/span\u003e ./svc.sh start\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eConfigure your actions to use this infrastructure by using the keyword self-hosted in the actions configuration for the repository for which you have set up the actions. For example:\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cdiv class=\"highlight js-code-highlight\"\u003e\n\u003cpre class=\"highlight yaml\"\u003e\u003ccode\u003e\u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eGo Build\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003eon\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"na\"\u003epush\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ebranches\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003emain\u003c/span\u003e \u003cspan class=\"pi\"\u003e]\u003c/span\u003e\n\n\u003cspan class=\"na\"\u003ejobs\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\n  \u003cspan class=\"na\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eBuild\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eruns-on\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eself-hosted\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esteps\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eSet up Go 1.x\u003c/span\u003e\n      \u003cspan class=\"na\"\u003euses\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eactions/setup-go@v2\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ewith\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ego-version\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e^1.15\u003c/span\u003e\n\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eCheck out code into the Go module directory\u003c/span\u003e\n      \u003cspan class=\"na\"\u003euses\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eactions/checkout@v2\u003c/span\u003e\n\n    \u003cspan class=\"pi\"\u003e-\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eRun Build\u003c/span\u003e\n      \u003cspan class=\"na\"\u003erun\u003c/span\u003e\u003cspan class=\"pi\"\u003e:\u003c/span\u003e \u003cspan class=\"pi\"\u003e|\u003c/span\u003e\n        \u003cspan class=\"s\"\u003emake build\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"highlight__panel js-actions-panel\"\u003e\n\u003cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003e\u003ctitle\u003eEnter fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003e\u003ctitle\u003eExit fullscreen mode\u003c/title\u003e\n    \u003cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003e\u003c/path\u003e\n\u003c/svg\u003e\n\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003ch3\u003e\n  \u003ca name=\"conclusion\" href=\"#conclusion\"\u003e\n  \u003c/a\u003e\n  Conclusion\n\u003c/h3\u003e\n\n\u003cp\u003eRaspberry pi attracts a huge community of enthusiasts who use it for various use cases. There have been amazing projects like \u003ca href=\"https://turingpi.com/\"\u003ethe turing pi\u003c/a\u003e, which make use of the more compact \u003ca href=\"https://www.raspberrypi.org/products/compute-module-4/?variant=raspberry-pi-cm4001000\"\u003eCompute module 4\u003c/a\u003e of the raspberry pi to provide server grade computing. Projects like these have enabled developers and system administrators to get cheap compute for self hosted workloads. Easy GitOps is just another fun yet sustainable solution to configure to your own satisfaction, whether it be for a fun project or an industrial use case.\u003c/p\u003e\n\n",
		"published": true,
		"published_from_feed": false,
		"show_comments": true,
		"slug": "self-hosted-github-actions-using-raspberry-pi-212m",
		"social_image": null,
		"title": "Self hosted GitHub Actions using Raspberry Pi",
		"video": null,
		"video_code": null
	}
]
